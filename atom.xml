<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[三省吾身丶丶]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://guowenfh.github.io/"/>
  <updated>2015-12-24T06:02:52.618Z</updated>
  <id>http://guowenfh.github.io/</id>
  
  <author>
    <name><![CDATA[guowenfh]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[task0002（四）- 练习：数据处理、轮播及交互]]></title>
    <link href="http://guowenfh.github.io/2015/12/24/task0002-Exercises/"/>
    <id>http://guowenfh.github.io/2015/12/24/task0002-Exercises/</id>
    <published>2015-12-24T05:46:57.000Z</published>
    <updated>2015-12-24T06:02:52.618Z</updated>
    <content type="html"><![CDATA[<p>包括5部分：</p>
<ul>
<li>小练习1-处理用户输入</li>
<li>小练习2-日期对象的使用</li>
<li>小练习3：轮播图</li>
<li>小练习4：输入提示框</li>
<li>小练习5：界面拖拽交互</li>
</ul>
<p><a href="https://github.com/guowenfh/IFE/tree/master/task0002" target="_blank" rel="external">源码地址</a></p>
<h2 id="小练习1：处理用户输入">小练习1：处理用户输入</h2><blockquote>
<p>这里直接可以利用原来写过的<code>util.js</code>。所以应该不是特别难。主要考察对字符串的操作，以及正则表达式的使用</p>
</blockquote>
<h3 id="任务描述">任务描述</h3><p>在<code>task0002</code>目录下创建一个<code>task0002_1.html</code>文件，以及一个<code>js</code>目录和<code>css</code>目录，在<code>js</code>目录中创建<code>task0002_1.js</code>，并将之前写的<code>util.js</code>也拷贝到<code>js</code>目录下。然后完成以下需求。</p>
<h4 id="第一阶段">第一阶段</h4><p>在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。</p>
<p>当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。</p>
<p><strong>实现</strong></p>
<p>根据题目要求，这个地方比较简单，可以直接利用前面写过的一些函数，分成四步，进行。</p>
<ol>
<li>使用正则表达式来对字符串进行分割操作。</li>
<li><code>uniqArray</code>函数进行去重操作。</li>
<li>for循环，<code>trim</code>函数对数组项进行去除首尾空格，用来处理，该项为空的情况。</li>
<li>innerHTML进行输出。</li>
</ol>
<p>html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"user_input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"user_output"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>task0002_1.js</code>中的js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自执行的匿名函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">handle_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//其实这里没必要使用id因为数据那么少$函数直接获取标签就行</span></span><br><span class="line">    <span class="keyword">var</span> inp = $(<span class="string">"#user_input"</span>);</span><br><span class="line">    <span class="keyword">var</span> out = $(<span class="string">"#user_output"</span>);</span><br><span class="line">    $.click(<span class="string">"#btn"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = inp.value.split(<span class="regexp">/\,|\，/</span>); <span class="comment">//1.根据半角逗号分割成数组。</span></span><br><span class="line">        <span class="keyword">var</span> unValue = uniqArray(value); <span class="comment">//2.数组去重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = unValue.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> trimValue = trim(unValue[i]); <span class="comment">//3.对每一项进行去除首尾空格操作</span></span><br><span class="line">            <span class="built_in">console</span>.log(trimValue);</span><br><span class="line">            <span class="keyword">if</span> (trimValue !== <span class="string">""</span>) &#123; <span class="comment">//4.只有在去除首尾空格后不为空的数组才输出。</span></span><br><span class="line">                out.innerHTML += <span class="string">"&lt;li&gt;"</span> + trimValue + <span class="string">"&lt;/li&gt;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h4 id="第二阶段">第二阶段</h4><p>单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。</p>
<p>当点击按钮时的行为同上</p>
<p><strong>实现</strong></p>
<p>看题目描述，主要是对于第一步进行修改，第一阶段只要求对半角逗号进行处理，但是在第二阶段中，需要对<strong>“换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号”</strong>进行处理。<br>主要是考察对于正则表达式的应用。</p>
<p>只需要对<code>var value = inp.value.split(/\,|\，/);</code>进行更改如下：</p>
<p><code>var value = inp.value.split(/\n|\s+|\,|\，|\、|\;|\；/);</code><br>需要注意的是：在正则表达式进行匹配这些符号时最好是前面加上转义字符。</p>
<h4 id="第三阶段">第三阶段</h4><p>用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。</p>
<p>同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。</p>
<p><strong>实现</strong></p>
<ul>
<li>嗯，其实这里按照题目要求应该要实时监听输入值变化，但是那样太麻烦了，，所以就直接在点击按钮的时候判断了。</li>
<li>直接判断数组长度就行了。。输入为空时，判断字符串=“”。</li>
<li>输出<code>checkbox</code>这里不过多的设置了，只是演示。</li>
</ul>
<h3 id="最终完成">最终完成</h3><p>html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">name</span>=<span class="value">"user_input"</span> <span class="attribute">id</span>=<span class="value">"user_input"</span> <span class="attribute">cols</span>=<span class="value">"45"</span> <span class="attribute">rows</span>=<span class="value">"10"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span>&gt;</span>处理并输出<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>输入的爱好数量不能超过10个，或什么都不输入<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"user_output"</span>&gt;</span><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">handle_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inp = $(<span class="string">"#user_input"</span>);</span><br><span class="line">    <span class="keyword">var</span> out = $(<span class="string">"#user_output"</span>);</span><br><span class="line">    $.click(<span class="string">"#btn"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = inp.value.split(<span class="regexp">/\n|\s+|\,|\，|\、|\;|\；/</span>); <span class="comment">//分割成数组。</span></span><br><span class="line">        <span class="keyword">var</span> unValue = uniqArray(value); <span class="comment">//数组去重</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> len = unValue.length;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">10</span> || unValue == <span class="string">""</span>) &#123;</span><br><span class="line">            $(<span class="string">"p"</span>).style.disautoPlay = <span class="string">"block"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">"p"</span>).style.disautoPlay = <span class="string">"none"</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> trimValue = trim(unValue[i]); <span class="comment">//对每一项进行去除首尾空格操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(trimValue);</span><br><span class="line">                <span class="keyword">if</span> (trimValue !== <span class="string">""</span>) &#123; <span class="comment">//只有在去除首尾空格后不为空的数组才输出。</span></span><br><span class="line">                    out.innerHTML += <span class="string">"&lt;label&gt;"</span> + <span class="string">"&lt;input type='checkbox'&gt;"</span> + trimValue + <span class="string">"&lt;/label&gt;"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>在线演示：<strong><a href="http://guowenfh.github.io/IFE/task0002/task0002_1.html">小练习1：处理兴趣列表</a></strong></p>
<h2 id="小练习2：日期对象的使用">小练习2：日期对象的使用</h2><h3 id="任务描述-1">任务描述</h3><p>在和上一任务同一目录下面创建一个<code>task0002_2.html</code>文件，在<code>js</code>目录中创建<code>task0002_2.js</code>，并在其中编码，实现一个倒计时功能。</p>
<ul>
<li>界面首先有一个文本输入框，允许按照特定的格式<code>YYYY-MM-DD</code>输入年月日；</li>
<li>输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差</li>
<li>在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒</li>
<li>每一秒钟更新倒计时上显示的数</li>
<li>如果时差为0，则倒计时停止</li>
</ul>
<h3 id="实现思路">实现思路</h3><h4 id="了解日期对象">了解日期对象</h4><p>这里主要是考察的对于日期对象的使用。</p>
<p><code>new Date()</code>。如果没有输入任何参数，则Date的构造器会依据系统设置的当前时间来创建一个Date对象。表示当前系统时间。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间对象创建的几种方式。</span></span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"December 17, 1995 03:24:00"</span>);</span><br><span class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1995-12-17T03:24:00"</span>);</span><br><span class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1995</span>,<span class="number">11</span>,<span class="number">17</span>);</span><br><span class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1995</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">3</span>,<span class="number">24</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Date对象中处理时间和日期的常用方法：详细内容在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external">MDN</a>上</li>
</ul>
<p><img src="/images/ife/DateObject.jpg" alt="日期对象常用方法"></p>
<h4 id="正式开始：">正式开始：</h4><ol>
<li>创建时间处理函数，使用正则表达式，处理输入的值，<code>value.match(/(^\d{4})-(\d{2})-(\d{2}$)/);</code>用到了match方法和正则的分组，在我写的正则博客里应该有过详细介绍了。这里也不过的说明了。</li>
<li>使用目标时间的<code>getTime()</code>毫秒数减去得到当前的毫秒数，得到相差的毫秒数。处理它：<strong>（注意毫秒的问题）</strong><ul>
<li><code>(60 * 60 * 24)</code> ：剩余的天数。</li>
<li><code>(60 * 60) % 24)</code> :剩余的小时数。依次类推。</li>
</ul>
</li>
<li><code>innerHTML输出</code>，并且判断相差时间，改变输出的值。</li>
<li>定时器的使用。(我这里使用的<code>setTimeout()</code>，使用递归调用实现自执行)<ul>
<li>计时器<code>setTimeout(函数,延迟时间);</code>，在载入后延迟指定时间后,去执行一次表达式,仅执行一次。</li>
<li>取消计时器:<code>clearTimeout()</code>停止计时器。</li>
</ul>
</li>
<li>给按钮添加点击事件，在点击时，调用刚刚编写的的时间处理函数。</li>
</ol>
<p>在线演示：<strong><a href="http://guowenfh.github.io/IFE/task0002/task0002_2.html">小练习2：倒计时</a></strong></p>
<h2 id="小练习3：轮播图组件">小练习3：轮播图组件</h2><h3 id="任务描述-2">任务描述</h3><p>在和上一任务同一目录下面创建一个<code>task0002_3.html</code>文件，在<code>js</code>目录中创建<code>task0002_3.js</code>，并在其中编码，实现一个轮播图的功能。</p>
<ul>
<li>图片数量及URL均在HTML中写好</li>
<li>可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长</li>
<li>图片切换的动画要流畅</li>
<li>在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片</li>
</ul>
<p>效果示例：<a href="http://echarts.baidu.com/" target="_blank" rel="external">http://echarts.baidu.com/</a> 上面的轮播图（不需要做左右两个箭头）</p>
<h3 id="实现思路:">实现思路:</h3><blockquote>
<p>主要是对于考察对于定时器，以及事件绑定的处理，以及动画效果，为此我专门写了一篇博客《<a href="http://guowenfh.github.io/2015/12/21/JS-Animated-Frames/">JS完美运动框架的封装过程</a>》。 这里就直接使用里面封装好的函数了。</p>
<p>本来都要放弃组件的编写了，只想按照常规方法来写个轮播图就好，但是在先把小练习4完成的情况下，就发现了一种新方法，可以帮助我完成这个任务（强烈建议先看小练习四！）使用<code>nextElementNode</code>,图片向左切换。（不涉及任何css，我假设css都会了，也没有用到特别难css属性）</p>
</blockquote>
<p><strong>该轮播图有依赖函数。主要使用到以下函数：</strong></p>
<ul>
<li>选择器函数<code>$(class)</code>;</li>
<li>运动框架<code>startMove</code>。<ul>
<li>同时在该函数引入时，还依赖于获取实际样式函数<code>getStyle</code>。 </li>
</ul>
</li>
<li>获取当前元素在同级元素的索引<code>getIndex</code>;</li>
<li>事件代理函数：<code>delegateEvent</code>。</li>
<li>添加class与删除class元素<code>addClass、romoveClass</code>。</li>
</ul>
<h4 id="第一步：实现点击切换">第一步：实现点击切换</h4><p>编写幻灯片函数：<code>Slideshow(element)</code>。</p>
<ol>
<li>根据图片的数量创建与图片数量相同的导航小点：<code>ul&gt;li*length</code> 。设置其<code>li</code>样式，并且默认把第一个<code>li</code>设置为活动状态<code>className</code>为<code>active</code>。</li>
<li>编写点击函数<code>clickLi</code>：<ol>
<li>给<code>li</code>添加事件代理函数。</li>
<li>据点击的li的索引值算出来动画的目标值，<code>-iCurrent * getIndex(this);</code></li>
<li>移除所有<code>li</code>上的选中状态<code>active</code>：编写函数<code>removeLiClass()</code>，在后面我们还要用到它。</li>
<li>设置当前点击的<code>li</code>为选中：状态<code>active</code></li>
<li>调用运动框架实现动画效果。</li>
</ol>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Slideshow</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建li</span></span><br><span class="line">    <span class="keyword">var</span> imgArr = element.getElementsByTagName(<span class="string">"img"</span>); <span class="comment">//获取图片数量</span></span><br><span class="line">    <span class="keyword">var</span> imgArrLen = imgArr.length; <span class="comment">//缓存图片数量</span></span><br><span class="line">    <span class="keyword">var</span> createUl = <span class="built_in">document</span>.createElement(<span class="string">"ul"</span>); <span class="comment">//创建小点的ul</span></span><br><span class="line">    <span class="keyword">var</span> iCurrent = <span class="built_in">parseInt</span>(getStyle(imgArr[<span class="number">0</span>], <span class="string">"width"</span>)); <span class="comment">//获取一张图片的宽度</span></span><br><span class="line">    element.style.width = iCurrent * imgArrLen + <span class="string">"px"</span>; <span class="comment">//设置图片容器的宽度。</span></span><br><span class="line">    <span class="comment">//创建li</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = imgArrLen; i &lt; len; i++) &#123;</span><br><span class="line">        createUl.innerHTML += <span class="string">"&lt;li&gt;&lt;/li&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    element.parentNode.appendChild(createUl); <span class="comment">//插入导航</span></span><br><span class="line">    addClass(createUl, <span class="string">"Slideshow-nav"</span>); <span class="comment">//添加导航样式</span></span><br><span class="line">    addClass(createUl.getElementsByTagName(<span class="string">"li"</span>)[<span class="number">0</span>], <span class="string">"active"</span>); <span class="comment">//默认设置第一个为第当前活动的li</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//编写点击函数clickLi： </span></span><br><span class="line">    clickLi();</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 点击导航</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clickLi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        delegateEvent(createUl, <span class="string">"li"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> iTaget = -iCurrent * getIndex(<span class="keyword">this</span>);</span><br><span class="line">            removeLiClass();</span><br><span class="line">            addClass(<span class="keyword">this</span>, <span class="string">"active"</span>); <span class="comment">//移出</span></span><br><span class="line">            startMove(element, &#123;</span><br><span class="line">                <span class="string">"left"</span>: iTaget</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 用于移除所有的Li的选中状态：active</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeLiClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oLi = createUl.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oLi.length; i &lt; len; i++) &#123;</span><br><span class="line">            removeClass(oLi[i], <span class="string">"active"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二步：实现自动播放">第二步：实现自动播放</h4><blockquote>
<p>为了方便后续的封装，暂时只考虑：<strong>正序</strong>，<strong>不循环</strong>的情况！</p>
</blockquote>
<ol>
<li>创建自动播放函数<code>paly（）</code>,获取当前为选中状态<code>active</code>的li.</li>
<li>设置目标值，根据选中状态的索引+1 *width来设置。（注意是负值，同时考虑索引值+1为<code>length</code>的情况。）</li>
<li>因为不循环，需要在设置<code>(getIndex(heightLi)+1)===imgArrLen-1</code>清除定时器。(其实就是轮播到最后的时候，至于为什么是这样，可以自己研究一下，更改一下值。)</li>
<li>获取下一个元素节点，存在的话，取消现有选中状态，设置下一个元素节点为选择中，调用运动框架！实现动画，</li>
<li>添加定时器<code>setInterval()</code>，调用该函数，实现自动播放。<ul>
<li>测试几次，你会发现：点击<code>li</code>和自动播放之间存在<strong>冲突</strong>，动画效果都没做完就播放下一张了，<strong>如何解决呢？</strong></li>
</ul>
</li>
<li>给图片容器添加一个鼠标移入和移除事件（<code>mouseover、mouseover</code>）也就是<code>hover</code>上去的效果<ul>
<li>移入时，清除定时器，暂停播放。</li>
<li>移出时，开启定时器，继续轮播。</li>
<li>然后你会发现问题成功的解决了！（而且我观察了大部分的轮播，都是这个效果，移入暂停，移出继续)</li>
</ul>
</li>
</ol>
<p>这里我们的最基本的功能都实现了，代码如下：(放在<code>Slideshow()</code>函数内部)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iSpeed = <span class="number">4000</span>;<span class="comment">//定时器间隔。</span></span><br><span class="line"></span><br><span class="line">hoverElement(); </span><br><span class="line"><span class="comment">/*</span><br><span class="line">* 移入图片容器暂停，移除继续播放。</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoverElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    addEvent(element.parentNode, <span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;);</span><br><span class="line">    addEvent(element.parentNode, <span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(autoPlay, iSpeed);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">timer = setInterval(autoPlay, iSpeed);</span><br><span class="line"><span class="comment">/*</span><br><span class="line">* 自动播放函数。</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> heightLi = $(<span class="string">".Slideshow-nav .active"</span>); <span class="comment">//高亮的li</span></span><br><span class="line">    <span class="keyword">var</span> iTaget;</span><br><span class="line">    iTaget = (getIndex(heightLi) + <span class="number">1</span>) === imgArrLen ? <span class="number">0</span> : (-iCurrent * (getIndex(heightLi) + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getIndex(heightLi) + <span class="number">1</span> === imgArrLen - <span class="number">1</span>) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nextLi = heightLi.nextElementSibling;</span><br><span class="line">    <span class="keyword">if</span> (nextLi) &#123;</span><br><span class="line">        removeLiClass();</span><br><span class="line">        addClass(nextLi, <span class="string">"active"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    startMove(element, &#123;</span><br><span class="line">        <span class="string">"left"</span>: iTaget</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第三步：添加配置项（题目要求完成）">第三步：添加配置项（题目要求完成）</h4><ol>
<li>获取题目要求：主要是以下三点。<ol>
<li>是否循环，默认为循环。</li>
<li>是否反向，默认不反向。只有循环时，才可反向。</li>
<li>轮播间隔时间，默认4000。</li>
</ol>
</li>
<li>如何实现？（使用JSON如下：）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * @param &#123;JSON&#125;         option       配置项</span><br><span class="line"> *   @config   &#123;String&#125;  noLoop       不循环？，默认为循环，只要存在则不循环，任意值</span><br><span class="line"> *   @config   &#123;String&#125;  reverse      是否反向，任意值。只有“noLoop”不存在时，也就是只有循环时，才执行。</span><br><span class="line"> *   @config   &#123;Number&#125;  intervalTime 轮播间隔时间（单位为毫秒），默认为4000，</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在<code>Slideshow()</code>内部，以下部分进行修改或添加。<ol>
<li>先从简单的开始吧！判断<code>option.intervalTime</code>是否存在并且更改<code>iSpeed</code>的值（这样，轮播间隔时间配置就成功了），默认为4000毫秒。</li>
</ol>
</li>
<li>改变自动播放（一）：<code>autoPlay</code>函数。这里是整个改造中最复杂的部分！分几步进行。<ol>
<li>把刚刚写的<code>autoPlay</code>函数内的内容，除去<code>var heightLi = $(&quot;.Slideshow-nav .active&quot;);</code>、<code>var iTaget;</code>这两个内容，其他的都使用<code>if(option.noLoop){}</code>包裹起来。<br>这样就又完成了一个内容，当配置为不循环时的情况，就写好了。</li>
<li>既然有<code>if</code><strong>不循环</strong>的情况,那么就肯定有<code>else</code>对应<strong>循环</strong>时的情况对吧?（笑）那么在里面应该怎么做呢？</li>
<li>第一次练习时，可以不添加函数，直接使用<code>if else</code>,对应正向与反向的情况！但是，在这里为了后面的进化，且不过多的阐述，就直接使用使用函数了，就叫他<code>play(reverse)</code>吧。<br>在这里当然传入的参数是<code>option.reverse</code>，</li>
</ol>
</li>
<li><p>改变自动播放（二）：编写<code>play(reverse)</code>。</p>
<ol>
<li>第一要务就是加入<code>if eles</code>啦，用来区分，true时为反向，false为正向（默认）。</li>
<li>先来说正向的情况！其实特别简单，有两步：</li>
</ol>
<ul>
<li>第一步：删除<code>(getIndex(heightLi)+1)===imgArrLen-1</code>清除定时器的部分，只有这样才能实现循环，</li>
<li>第二步：在上面被提取到不循环的内容中(也就是第一版的<code>autoPlay()</code>)的<code>if (nextLi)</code>部分加上<code>else</code>的情况就行了！<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在下一个元素节点不存在的情况下（也就是到了最后了），设置第一个节点为活动状态，就这样正向的循环就成功了！</span></span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">    removeLiClass();</span><br><span class="line">    addClass($(<span class="string">".Slideshow-nav li"</span>), <span class="string">"active"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>反向的情况(只需要对正向循环进行修改)：</li>
</ol>
<ul>
<li>改变目标值<code>iTaget</code>。<code>getIndex(heightLi) === 0 ? -iCurrent * (imgArrLen - 1) : -iCurrent * (getIndex(heightLi) - 1);</code></li>
<li>改变下一个元素节点，为前一个元素节点<code>previousElementSibling</code>。</li>
<li>改变上面<code>else</code>的情况，为设置最后一个节点为活动状态。代码就不贴了，有兴趣的看源码吧!</li>
</ul>
</li>
<li><p>到现在函数就修改完成了。只需要在循环的情况下，调用该函数，并且传入<code>option.reverse</code>。</p>
</li>
</ol>
<p>其实到这里我们题目要求就完成了！</p>
<p>但是！不挑战一下怎么能行？</p>
<p>为什么不把左右点击切换一起实现了呢？</p>
<p>既然这样，我们就继续吧！</p>
<h4 id="第四步：扩展！左右箭头实现！">第四步：扩展！左右箭头实现！</h4><ol>
<li><p>创建并设置箭头样式(配合css使用)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建左右导航</span></span><br><span class="line"><span class="keyword">var</span> createSpan = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">addClass(createSpan, <span class="string">"left-right"</span>)</span><br><span class="line">createSpan.innerHTML = <span class="string">"&lt;span class='nav-left'&gt;&amp;lt;&lt;/span&gt;&lt;span class='nav-right'&gt;&amp;gt;&lt;/span&gt;"</span></span><br><span class="line">element.parentNode.appendChild(createSpan);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建点击事件，事件代理。</p>
</li>
<li>炸裂的函数调用。<ul>
<li>还记得我们刚刚的<code>play(reverse)</code>函数吗？刚刚的功能完全不用封装函数，那为什么要做呢？就是这里啦！</li>
<li>想想刚刚的函数实现了什么功能呢？是不是正向循环，和反向循环？，自动播放是因为在外层有定时器的缘故。</li>
<li>所以只需要调用传参就行了！</li>
</ul>
</li>
<li>传什么参数？<ul>
<li>想想左右箭头的索引，是不是0和1。这样就懂了吧！</li>
<li>对索引进行取反。传参！代码如下：</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delegateEvent(createSpan, <span class="string">"span"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> heightLi = $(<span class="string">".Slideshow-nav .active"</span>); <span class="comment">//高亮的待选li</span></span><br><span class="line">    <span class="keyword">var</span> leftIndex = !getIndex(<span class="keyword">this</span>); <span class="comment">//点击左时为true，点击又为false</span></span><br><span class="line">    <span class="comment">//移动的目标值，默认正向</span></span><br><span class="line">    play(leftIndex);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>至此，我们的轮播图组件就完成了！ 需要配合CSS使用。 通过这次封装，收益良多，感兴趣的话可以看看<a href="https://github.com/guowenfh/IFE/tree/master/task0002" target="_blank" rel="external">源码</a></p>
<p>在线演示：<strong><a href="http://guowenfh.github.io/IFE/task0002/task0002_3.html">小练习3：图片轮播组件</a></strong></p>
<h2 id="小练习4：输入提示框">小练习4：输入提示框</h2><h3 id="任务描述-3">任务描述</h3><p>在和上一任务同一目录下面创建一个<code>task0002_4.html</code>文件，在<code>js</code>目录中创建<code>task0002_4.js</code>，并在其中编码，实现一个类似百度搜索框的输入提示的功能。</p>
<p>要求如下：</p>
<ul>
<li>允许使用鼠标点击选中提示栏中的某个选项</li>
<li>允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中</li>
<li>选中后，提示内容变更到输入框中</li>
</ul>
<p><strong>初级班：</strong></p>
<ul>
<li>不要求和后端交互，可以自己伪造一份提示数据例如：</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suggestData = [<span class="string">'Simon'</span>, <span class="string">'Erik'</span>, <span class="string">'Kener'</span>];</span><br></pre></td></tr></table></figure>
<p><strong>中级班：</strong></p>
<ul>
<li>自己搭建一个后端Server，使用Ajax来获取提示数据</li>
</ul>
<p>示例：</p>
<p><img src="https://github.com/baidu-ife/ife/raw/master/2015_spring/task/task0002/img/task0002_sug.png" alt="示例"></p>
<h3 id="实现思路-1">实现思路</h3><p>这里我并没有一开始就直接进行数据获取的部分，而是进行了任务分解，如下：</p>
<h4 id="第一阶段-1">第一阶段</h4><ol>
<li>先在使用写好的<code>ul&gt;li</code>标签下，。添加3个事件<code>mouseover</code>、<code>mouseout</code>、<code>click</code>。实现点击li使其值变成输入框内的值。（直接使用事件代理）</li>
<li>对输入框添加键盘事件（对，你没看错，只有在聚焦在输入框时才触发）<ul>
<li>获取当前高亮的li。没有则设第一个为高亮<code>active</code>。</li>
<li>判断<code>keyCode</code>使用键盘下键,使用<code>nextElementSibling</code>方法获取下一个节点（向上同理）,取消当前的<code>active</code>，设置下一个为<code>active</code>。（使用键盘上下选中的效果,处理完成）</li>
<li>判断<code>keyCode</code>，获取当前状态为<code>active</code>的值，实现回车时，把其设为<code>input</code>的值。</li>
</ul>
</li>
</ol>
<ol>
<li>需要注意的地方：<ul>
<li>在移除高亮状态时，最好是遍历一遍。因为键盘与鼠标划过有可能同时触发，导致有多个高亮。 </li>
<li>错误处理</li>
</ul>
</li>
</ol>
<h4 id="第二阶段-1">第二阶段</h4><ol>
<li>删除原来的<code>ul&gt;li</code>html部分的<code>li</code>。添加对于输入框进行实时监听（这部分不在这里展开讲，如何实现大家去google吧，因为一展开就太多要说的了）。</li>
</ol>
<ul>
<li>给个参考：<a href="http://www.cnblogs.com/lhb25/archive/2012/11/30/oninput-and-onpropertychange-event-for-input.html" target="_blank" rel="external">实时监听输入框值变化</a></li>
</ul>
<ol>
<li>使用AJAX获取服务器上的数据，解析，遍历，并进行数据匹配。</li>
<li>匹配成功显示<code>ul</code>，否则设为<code>none</code>。</li>
<li>使用正则表达式的<code>match</code>方法，来获取匹配成功的把部分，使用<code>span</code>进行高亮显示。并且插入<code>ul</code></li>
<li>改造第一阶段的函数：</li>
</ol>
<ul>
<li>因为是使用的事件代理，直接对<code>ul</code>添加事件，所以需要修改的部分不是很多。</li>
<li><code>click</code>和<code>enter</code>部分获取的值，因为<code>span</code>标签的存在，需要使用正则进行处理，输出删除<code>span</code>后的值。</li>
</ul>
<p>在线演示：<strong><a href="http://guowenfh.github.io/IFE/task0002/task0002_4.html">小练习4：输入框即时提示</a></strong></p>
<h2 id="小练习5：界面拖拽交互">小练习5：界面拖拽交互</h2><ul>
<li>实现一个可拖拽交互的界面</li>
<li>如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动</li>
<li>被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动</li>
<li>注意拖拽释放后，要添加到准确的位置</li>
<li>拖拽到什么位置认为是可以添加到新容器的规则自己定</li>
<li>注意交互中良好的用户体验和使用引导</li>
</ul>
<p><img src="https://github.com/baidu-ife/ife/raw/master/2015_spring/task/task0002/img/task0002_drag.png" alt="示例"></p>
<h3 id="实现思路：">实现思路：</h3><h4 id="第一步：封装拖拽函数">第一步：封装拖拽函数</h4><blockquote>
<p>开一个DEMO页面，实践如下：</p>
</blockquote>
<ol>
<li>了解应该用到的事件，<code>onmousedown</code>、<code>onmousemove</code>、<code>onmouseup</code>。</li>
<li>思考<strong>对谁添加事件?</strong><ol>
<li>在鼠标点击<code>div</code>时，对<code>div</code>添加<code>onmousedown</code>,表示鼠标按下。</li>
<li>在事件内给<code>document</code>添加<code>onmousemove</code>。（为啥给<code>document</code>加呢？因为给<code>div</code>加在移动过快时会跳出去）表示鼠标移动。</li>
<li>并且添加<code>document</code>添加<code>onmouseup</code>，表示鼠标已经抬起，清除移动事件，以及本身。</li>
</ol>
</li>
<li>思考<strong>如何设置对象的位置？</strong><ol>
<li>直接获取鼠标的位置并设置给<code>div</code>行不行呢？试试吧！显然，会出现问题，点击鼠标就到<code>div</code>左上角去了。</li>
<li>那么怎么改变呢？获取鼠标在<code>div</code>中的位置？对。就这样，在鼠标按下时记录鼠标在<code>div</code>中的位置.</li>
<li>在鼠标移动时，用当前的位置，减去刚刚的位置，这就是应该的值！</li>
</ol>
</li>
<li>别忘了鼠标抬起时，需要清除事件，不然鼠标就粘住了。 <blockquote>
<p>这里用到了event,事件对象的相关概念，推荐观看慕课网的视频。<a href="http://www.imooc.com/learn/138" target="_blank" rel="external">DOM事件探秘</a></p>
</blockquote>
</li>
<li>善用this。<br><strong>扩展</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 鼠标拖拽函数。</span><br><span class="line"> * @param &#123;HTMLElement&#125; element 需要拖拽的对象</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDrag</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    addEvent(element, <span class="string">"mousedown"</span>, onmousedown);</span><br><span class="line">    <span class="comment">//鼠标按下</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onmousedown</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oEvent = ev || event;</span><br><span class="line">        <span class="keyword">var</span> disX = oEvent.clientX - <span class="keyword">this</span>.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> disY = oEvent.clientY - <span class="keyword">this</span>.offsetTop;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        addEvent(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, onmousemove);</span><br><span class="line">        addEvent(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, onmouseup);</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 鼠标移动</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onmousemove</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oEvent = ev || event;</span><br><span class="line">            that.style.left = oEvent.clientX - disX + <span class="string">"px"</span>;</span><br><span class="line">            that.style.top = oEvent.clientY - disY + <span class="string">"px"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 鼠标抬起删除事件</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onmouseup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            removeEvent(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, onmousemove);</span><br><span class="line">            removeEvent(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, onmouseup);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二步：布局转换函数">第二步：布局转换函数</h4><ol>
<li>两个参数，第一个参数，传入父级对象。第二个参数传入标签名，</li>
<li>循环，使用数组，对象，获取标签当前元素的位置<code>left</code>，<code>top</code>。（<code>offsetLeft</code>）。这里不能使用获取实际样式函数，因为本身就需要获取其相对父元素的位置。</li>
<li>第二个循环<ul>
<li>设置<code>left</code>，<code>top</code>值。</li>
<li>设置绝对定位。</li>
<li>取消原有的<code>margin</code>值。</li>
</ul>
</li>
<li>调用函数，把对象从文档流布局，变成绝对定位布局。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 布局转换函数</span><br><span class="line"> * @param &#123;HTMLElment&#125; element  HTML对象</span><br><span class="line"> * @param &#123;string&#125;     childEle 其内需要转换的标签名</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toPosition</span>(<span class="params">element, childEle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> eleArr = element.getElementsByTagName(childEle);</span><br><span class="line">    <span class="keyword">var</span> aPos = [];</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = eleArr.length; i &lt; len; i++) &#123;</span><br><span class="line">        aPos[i] = &#123;</span><br><span class="line">            left: eleArr[i].offsetLeft,</span><br><span class="line">            top: eleArr[i].offsetTop</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = eleArr.length; i &lt; len; i++) &#123;</span><br><span class="line">        eleArr[i].style.left = aPos[i].left + <span class="string">"px"</span>;</span><br><span class="line">        eleArr[i].style.top = aPos[i].top + <span class="string">"px"</span>;</span><br><span class="line">        eleArr[i].style.position = <span class="string">"absolute"</span>;</span><br><span class="line">        eleArr[i].style.margin = <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在线演示：<strong><a href="http://guowenfh.github.io/IFE/task0002/task0002_5.html">小练习5：拖拽交互</a></strong></p>
<h4 id="第三步：实现拖拽">第三步：实现拖拽</h4><blockquote>
<p>前面我们已经实现了<code>setDrag(element)</code>函数，常规方法就是直使用循环，然后传入<code>element</code>。</p>
</blockquote>
<p>但是，为什么不用事件代理呢？</p>
<p>特别简单，只需要对上面写的函数进行一些简单的改装。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delegateEvent(parentElement, <span class="string">"li"</span>, <span class="string">"mousedown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line"><span class="comment">//此处是原函数中的内容。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>现在知道为什么上面的函数会用到this了吧？</strong></p>
<h4 id="第四步：碰撞检测函数">第四步：碰撞检测函数</h4><p>先来看张图：<br><img src="/images/ife/hitDetection.jpg" alt="碰撞检测示意图"></p>
<p>是不是有瞬间豁然开朗的感觉呢？</p>
<p>获取相关值，只需要考虑不碰不上的情况就行了！。如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 碰撞检测函数</span><br><span class="line"> * @param   &#123;object&#125;  obj1 对象1</span><br><span class="line"> * @param   &#123;object&#125;  obj2 对象2</span><br><span class="line"> * @returns &#123;boolean&#125; 碰撞时返回true，否则反正false</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hitDetection</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对象1的相关值</span></span><br><span class="line">    <span class="keyword">var</span> l1 = obj1.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> r1 = obj1.offsetLeft + obj1.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> t1 = obj1.offsetTop;</span><br><span class="line">    <span class="keyword">var</span> b1 = obj1.offsetTop + obj1.offsetHeight;</span><br><span class="line">    <span class="comment">//对象2的相关值</span></span><br><span class="line">    <span class="keyword">var</span> l2 = obj2.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> r2 = obj2.offsetLeft + obj2.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> t2 = obj2.offsetTop;</span><br><span class="line">    <span class="keyword">var</span> b2 = obj2.offsetTop + obj2.offsetHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r1 &lt; l1 || l1 &gt; r2 || b1 &lt; t2 || t1 &gt; b2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//没碰上</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第五步：处理各种碰撞情况">第五步：处理各种碰撞情况</h4><blockquote>
<p>这里讲起来就太复杂了。源代码中注释还是比较详细的，有兴趣可以看下</p>
</blockquote>
<p><a href="http://guowenfh.github.io/IFE/task0002/index.html">task0002 在线Demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>包括5部分：</p>
<ul>
<li>小练习1-处理用户输入</li>
<li>小练习2-日期对象的使用</li>
<li>小练习3：轮播图</li>
<li>小练习4：输入提示框</li>
<li>小练习5：界面拖拽交互</li>
</ul>
<p><a href="h]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="task0002" scheme="http://guowenfh.github.io/tags/task0002/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS完美运动框架的封装过程]]></title>
    <link href="http://guowenfh.github.io/2015/12/21/JS-Animated-Frames/"/>
    <id>http://guowenfh.github.io/2015/12/21/JS-Animated-Frames/</id>
    <published>2015-12-21T09:17:29.000Z</published>
    <updated>2015-12-21T09:20:32.764Z</updated>
    <content type="html"><![CDATA[<h2 id="运动框架的实现思路">运动框架的实现思路</h2><blockquote>
<p>运动，其实就是在一段时间内改变<code>left</code>、<code>right</code>、<code>width</code>、<code>height</code>、<code>opactiy</code>的值，到达目的地之后停止。</p>
</blockquote>
<p>现在按照以下步骤来进行我们的运动框架的封装:</p>
<ol>
<li>匀速运动。</li>
<li>缓冲运动。</li>
<li>多物体运动。</li>
<li>任意值变化。</li>
<li>链式运动。</li>
<li>同时运动。</li>
</ol>
<h2 id="（一）匀速运动">（一）匀速运动</h2><h3 id="速度动画">速度动画</h3><h4 id="运动基础">运动基础</h4><p>思考：<strong>如何让<code>div</code>动起来?</strong><br>如下：</p>
<ol>
<li>设置元素为绝对定位，只有绝对定位后，<code>left</code>,<code>top</code>等值才生效。</li>
<li>定时器的使用（动态改变值），这里使用<code>setInterval()</code>每隔指定的时间执行代码。<ul>
<li>计时器<code>setInterval(函数,交互时间(毫秒))</code>：在执行时,从载入页面后每隔指定的时间执行代码。</li>
<li>取消计时器<code>clearInterval(函数)</code> 方法可取消由 <code>setInterval()</code> 设置的交互时间。</li>
</ul>
</li>
<li>获取当前的位置，大小等等。<code>offsetLeft</code>（当前元素相对父元素位置）。</li>
<li>速度–物体运动的快慢<ul>
<li>定时器间隔时间</li>
<li>改变值的大小</li>
</ul>
</li>
</ol>
<p>根据上面的信息我们就可以开始封装运动框架创建一个变化的<code>div</code>了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运动框架-1-动起来</span><br><span class="line"> * @param &#123;HTMLElement&#125; element 进行运动的节点</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//定时器</span></span><br><span class="line">        element.style.left = element.offsetLeft + <span class="number">5</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你没看错，就是那么简单。但是等等， what？ 怎么不会停？WTF？</p>
<p>那是因为我们没有运动终止条件。好再还是比较简单。直接在定时器内部，判断到达目标值，清除定时器就行拉！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运动框架-2-运动终止</span><br><span class="line"> * @param &#123;HTMLElement&#125; element 进行运动的节点</span><br><span class="line"> * @param &#123;number&#125;      iTarget 运动终止条件。</span><br><span class="line"> */</span></span><br><span class="line"> <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element, iTarget</span>) </span>&#123;</span><br><span class="line">    timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        element.style.left = element.offsetLeft + <span class="number">5</span> + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span> (element.offsetLeft === iTarget) &#123;<span class="comment">//停止条件</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就这样是不是就完成了呢？已经ok了呢？<br>no。还有一些Bug需要处理。</p>
<h4 id="运动中的Bug">运动中的Bug</h4><ol>
<li>速度取到某些值会无法停止</li>
<li>到达位置后再点击还会运动</li>
<li>重复点击速度加快</li>
<li>速度无法更改</li>
</ol>
<h4 id="解决BUG">解决BUG</h4><ol>
<li>速度取到某些值会无法停止（这个Bug稍后解决，在进化过程中自然解决）</li>
<li>把运动和停止隔开(if/else)</li>
<li>在开始运动时,关闭已有定时器</li>
<li>把速度用变量保存</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运动框架-3-解决Bug</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element, iTarget</span>) </span>&#123;</span><br><span class="line">    clearInterval(timer);<span class="comment">//在开始运动时,关闭已有定时器</span></span><br><span class="line">    timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> iSpeed = <span class="number">5</span>;<span class="comment">//把速度用变量保存</span></span><br><span class="line">        <span class="comment">//把运动和停止隔开(if/else)</span></span><br><span class="line">        <span class="keyword">if</span> (element.offsetLeft === iTarget) &#123;<span class="comment">//结束运动</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element.style.left = element.offsetLeft + iSpeed + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一个简单的运动框架就完成了。但是，再等等。只能向右走？别急，我们不是定义了把速度变成为了变量吗？只需要对它进行一些处理就行啦！<br><code>var iSpeed = 5;</code><strong>–&gt;</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断距离目标位置，达到自动变化速度正负</span></span><br><span class="line"><span class="keyword">var</span> iSpeed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (element.offsetLeft &lt; iTarget) &#123;</span><br><span class="line">    iSpeed = <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    iSpeed = -<span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="透明度动画">透明度动画</h3><ol>
<li>用变量<code>alpha</code>储存当前透明度。</li>
<li>把上面的<code>element.offsetLeft</code>改成变量<code>alpha</code>。</li>
<li>运动和停止条件部分进行更改。如下：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//透明度浏览器兼容实现</span></span><br><span class="line"><span class="keyword">if</span> (alpha === iTarget) &#123;</span><br><span class="line">    clearInterval(time);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alpha += speed;</span><br><span class="line">    element.style.filter = <span class="string">'alpha(opacity:'</span> + alpha + <span class="string">')'</span>; <span class="comment">//兼容IE</span></span><br><span class="line">    element.style.opacity = alpha / <span class="number">100</span>;<span class="comment">//标准</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="（二）缓冲动画">（二）缓冲动画</h2><p>思考：<strong>怎么样才是缓冲动画？</strong></p>
<p>应该有以下几点：</p>
<ul>
<li>逐渐变慢,最后停止</li>
<li>距离越远速度越大<ul>
<li>速度由距离决定</li>
<li>速度=(目标值-当前值)/缩放系数</li>
</ul>
</li>
<li>Bug :速度取整(使用Math方法)，不然会闪<ul>
<li>向上取整。<code>Math.ceil(iSpeed)</code></li>
<li>向下取整。<code>Math.floor(iSpeed)</code></li>
</ul>
</li>
</ul>
<p>还是对速度作文章：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运动框架-4-缓冲动画</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element, iTarget</span>) </span>&#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//因为速度要动态改变，所以必须放在定时器中</span></span><br><span class="line">        <span class="keyword">var</span> iSpeed = (iTarget - element.offsetLeft) / <span class="number">10</span>; <span class="comment">//(目标值-当前值)/缩放系数=速度</span></span><br><span class="line">        iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed); <span class="comment">//速度取整</span></span><br><span class="line">        <span class="keyword">if</span> (element.offsetLeft === iTarget) &#123;<span class="comment">//结束运动</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element.style.left = element.offsetLeft + iSpeed + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>做到这里，（速度取到某些值会无法停止)这个Bug就自动解决啦！</li>
<li>例子:缓冲菜单<ul>
<li>跟随页面滚动的缓冲侧边栏<br>在线演示：<a href="http://codepen.io/guowen921/pen/rxLOMd" target="_blank" rel="external">codepen</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>潜在问题目标值不是整数时</p>
</blockquote>
<h2 id="（三）多物体运动">（三）多物体运动</h2><p>思考：<strong>如何实现多物体运动？</strong></p>
<ul>
<li>单定时器，存在问题。每个div一个定时器</li>
<li>定时器作为对象的属性<ul>
<li>直接使用<code>element.timer</code>把定时器变成对象上的一个属性。</li>
</ul>
</li>
<li>参数的传递:物体/目标值<br>比较简单把上面框架的进行如下更改：<code>timer</code><strong>–&gt;</strong><code>element.timer</code></li>
</ul>
<p>就这样就行啦！</p>
<h2 id="（四）任意值变化">（四）任意值变化</h2><p>咳咳。我们来给div加个1px的边框。<code>boder :1px solid #000</code></p>
<p>然后来试试下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    oDiv.style.width = oDiv.offsetWidth - <span class="number">1</span> + <span class="string">"px"</span>;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p>嗯，神奇的事情发生了！what？我设置的不是宽度在减吗？怎么尼玛增加了！ 不对啊，大兄弟。</p>
<p>究竟哪里出了问题呢？</p>
<p>一起找找资料，看看文档，原来<code>offset</code>这一系列的属性都会存在，被其他属性干扰的问题。</p>
<p>好吧，既然不能用，那么我们就顺便把任意值变化给做了吧。</p>
<h3 id="第一步：获取实际样式">第一步：获取实际样式</h3><blockquote>
<p>使用offsetLeft..等获取样式时, 若设置了边框, padding, 等可以改变元素宽度高度的属性时会出现BUG..</p>
</blockquote>
<ul>
<li>通过查找发现<code>element.currentStyle(attr)</code>可以获取计算过之后的属性。</li>
<li>但是因为兼容性的问题，需封装getStyle函数。（万恶的IE）</li>
<li>当然配合CSS的<code>box-sizing</code>属性设为<code>border-box</code>可以达到一样的效果 ? (自认为，未验证)。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取实际样式函数</span><br><span class="line"> * @param   &#123;HTMLElement&#125;   element  需要寻找的样式的html节点</span><br><span class="line"> * @param   &#123;String]&#125; attr 在对象中寻找的样式属性</span><br><span class="line"> * @returns &#123;String&#125; 获取到的属性</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//IE写法</span></span><br><span class="line">    <span class="keyword">if</span> (element.currentStyle) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.currentStyle[attr];</span><br><span class="line">    <span class="comment">//标准</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(element, <span class="literal">false</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二步：改造原函数">第二步：改造原函数</h3><ol>
<li>添加参数，<code>attr</code>表示需要改变的属性值。</li>
<li>更改<code>element.offsetLeft</code>为<code>getStyle(element, attr)</code>。<ul>
<li>需要注意的是：<code>getStyle(element, attr)</code>不能直接使用，因为它获取到的字符串,例：<code>10px</code>。</li>
<li>变量<code>iCurrent</code>使用<code>parseInt()</code>,将样式转成数字。</li>
</ul>
</li>
<li><code>element.style.left</code>为<code>element.style[attr]</code>。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运动框架-4-任意值变化</span><br><span class="line"> * @param &#123;HTMLElement&#125; element 运动对象</span><br><span class="line"> * @param &#123;string&#125;      attr    需要改变的属性。</span><br><span class="line"> * @param &#123;number&#125;      iTarget 目标值</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element, attr, iTarget</span>) </span>&#123;</span><br><span class="line">    clearInterval(element.timer);</span><br><span class="line">    element.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//因为速度要动态改变，所以必须放在定时器中</span></span><br><span class="line">    <span class="keyword">var</span> iCurrent=<span class="number">0</span>;</span><br><span class="line">    iCurrent = <span class="built_in">parseInt</span>(getStyle(element, attr));<span class="comment">//实际样式大小</span></span><br><span class="line">        <span class="keyword">var</span> iSpeed = (iTarget - iCurrent) / <span class="number">10</span>; <span class="comment">//(目标值-当前值)/缩放系数=速度</span></span><br><span class="line">        iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed); <span class="comment">//速度取整</span></span><br><span class="line">        <span class="keyword">if</span> (iCurrent === iTarget) &#123;<span class="comment">//结束运动</span></span><br><span class="line">            clearInterval(element.timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element.style[attr] = iCurrent + iSpeed + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试一试，这样是不是就可以了呢？</p>
<blockquote>
<p>还记得上面我们写的透明度变化吗?  再试试</p>
</blockquote>
<p>果然还是不行， （废话，你见过透明度有”px”单位的么? - -<code>白眼</code> ）</p>
<h3 id="第三步：透明度兼容处理">第三步：透明度兼容处理</h3><p>思考：<strong>需要对那些属性进行修改？</strong></p>
<ol>
<li>判断<code>attr</code>是不是透明度属性<code>opacity</code> 。</li>
<li>对于速度进行处理。<ul>
<li>为透明度时，由于获取到的透明度会是小数，所以需要 * 100</li>
<li>并且由于计算机储存浮点数的问题，还需要将小数，进行四舍五入为整数。使用： <code>Math.round(parseFloat(getStyle(element, attr)) * 100)</code>。</li>
<li>否则，继续使用默认的速度。</li>
</ul>
</li>
<li>对结果输出部分进行更改。<ul>
<li>判断是透明度属性，使用透明度方法</li>
<li>否则，使用使用默认的输出格式。</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运动框架-5-兼容透明度</span><br><span class="line"> * @param &#123;HTMLElement&#125; element 运动对象</span><br><span class="line"> * @param &#123;string&#125;      attr    需要改变的属性。</span><br><span class="line"> * @param &#123;number&#125;      iTarget 目标值</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element, attr, iTarget</span>) </span>&#123;</span><br><span class="line">    clearInterval(element.timer);</span><br><span class="line">    element.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//因为速度要动态改变，所以必须放在定时器中</span></span><br><span class="line">        <span class="keyword">var</span> iCurrent = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">"opacity"</span>) &#123; <span class="comment">//为透明度时执行。</span></span><br><span class="line">            iCurrent = <span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(getStyle(element, attr)) * <span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//默认情况</span></span><br><span class="line">            iCurrent = <span class="built_in">parseInt</span>(getStyle(element, attr)); <span class="comment">//实际样式大小</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> iSpeed = (iTarget - iCurrent) / <span class="number">10</span>; <span class="comment">//(目标值-当前值)/缩放系数=速度</span></span><br><span class="line">        iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed); <span class="comment">//速度取整</span></span><br><span class="line">        <span class="keyword">if</span> (iCurrent === iTarget) &#123;<span class="comment">//结束运动</span></span><br><span class="line">            clearInterval(element.timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (attr === <span class="string">"opacity"</span>) &#123; <span class="comment">//为透明度时，执行</span></span><br><span class="line">                element.style.filter = <span class="string">"alpha(opacity:"</span> + (iCurrent + iSpeed) + <span class="string">")"</span>; <span class="comment">//IE</span></span><br><span class="line">                element.style.opacity = (iCurrent + iSpeed) / <span class="number">100</span>; <span class="comment">//标准</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//默认</span></span><br><span class="line">                element.style[attr] = iCurrent + iSpeed + <span class="string">"px"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里，这个运动框架就基本上完成了。但是，我们是追求完美的不是吗？</p>
<p>继续进化！</p>
<h2 id="（五）链式动画">（五）链式动画</h2><blockquote>
<p>链式动画：顾名思义，就是在该次运动停止时，开始下一次运动。</p>
</blockquote>
<p>如何实现呢？</p>
<ul>
<li>使用回调函数：运动停止时,执行函数</li>
<li>添加<code>func</code>形参（回调函数）。</li>
<li>在当前属性到达目的地时<code>iCurrent === iTarget</code>，判断是否有回调函数存在，有则执行。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (iCurrent === iTarget) &#123;<span class="comment">//结束运动</span></span><br><span class="line">    clearInterval(element.timer);</span><br><span class="line">    <span class="keyword">if</span> (func) &#123;</span><br><span class="line">        func();<span class="comment">//回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>good，链式动画完成！距离完美还差一步！</p>
<h2 id="（六）同时运动">（六）同时运动</h2><p>思考：<strong>如何实现同时运动？</strong></p>
<ol>
<li>使用JSON传递多个值</li>
<li>使用<code>for in</code>循环，遍历属性，与值。</li>
<li>定时器问题!(运动提前停止)<ul>
<li>在循环外设置变量,假设所有的值都到达了目的值为true</li>
<li>在循环中检测是否到达目标值,若没有值未到则为false</li>
<li>在循环结束后,检测是否全部达到目标值.是则清除定时器</li>
</ul>
</li>
</ol>
<p>实现：</p>
<ol>
<li>删除<code>attr</code>与<code>iTarget</code>两个形参，改为<code>json</code></li>
<li>在函数开始时，设置一个标记<code>var flag = true; //假设所有运动到达终点.</code></li>
<li>在定时器内使用<code>for in</code>，遍历属性与目标，改写原来的<code>attr</code>与<code>iTarget</code>，为json的属性与值</li>
<li>修改运动终止条件，只有每一项的实际属性值<code>iCurrent</code>，等于目标值<code>json[attr]</code>时，<code>flag</code>才为<code>true</code>。清除定时器，判断是否回调。</li>
<li>否则，继续执行代码，直到所有属性值等于目标值。</li>
</ol>
<h2 id="完美运动框架">完美运动框架</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取实际样式函数</span><br><span class="line"> * @param   &#123;HTMLElement&#125;   element  需要寻找的样式的html节点</span><br><span class="line"> * @param   &#123;String]&#125; attr 在对象中寻找的样式属性</span><br><span class="line"> * @returns &#123;String&#125; 获取到的属性</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//IE写法</span></span><br><span class="line">    <span class="keyword">if</span> (element.currentStyle) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.currentStyle[attr];</span><br><span class="line">        <span class="comment">//标准</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(element, <span class="literal">false</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 完美运动框架</span><br><span class="line"> * @param &#123;HTMLElement&#125; element 运动对象</span><br><span class="line"> * @param &#123;JSON&#125;        json    属性：目标值      </span><br><span class="line"> *   @property &#123;String&#125; attr    属性值</span><br><span class="line"> *   @config   &#123;Number&#125; target  目标值</span><br><span class="line"> * @param &#123;function&#125;    func    可选，回调函数，链式动画。</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">element, json, func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">//假设所有运动到达终点.</span></span><br><span class="line">    clearInterval(element.timer);</span><br><span class="line">    element.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">            <span class="comment">//1.取当前的属性值。</span></span><br><span class="line">            <span class="keyword">var</span> iCurrent = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (attr === <span class="string">"opacity"</span>) &#123; <span class="comment">//为透明度时执行。</span></span><br><span class="line">                iCurrent = <span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(getStyle(element, attr)) * <span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//默认情况</span></span><br><span class="line">                iCurrent = <span class="built_in">parseInt</span>(getStyle(element, attr)); <span class="comment">//实际样式大小</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.算运动速度,动画缓冲效果</span></span><br><span class="line">            <span class="keyword">var</span> iSpeed = (json[attr] - iCurrent) / <span class="number">10</span>; <span class="comment">//(目标值-当前值)/缩放系数=速度</span></span><br><span class="line">            iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed); <span class="comment">//速度取整</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.未到达目标值时，执行代码 </span></span><br><span class="line">            <span class="keyword">if</span> (iCurrent != json[attr]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>; <span class="comment">//终止条件</span></span><br><span class="line">                <span class="keyword">if</span> (attr === <span class="string">"opacity"</span>) &#123; <span class="comment">//为透明度时，执行</span></span><br><span class="line">                    element.style.filter = <span class="string">"alpha(opacity:"</span> + (iCurrent + iSpeed) + <span class="string">")"</span>; <span class="comment">//IE</span></span><br><span class="line">                    element.style.opacity = (iCurrent + iSpeed) / <span class="number">100</span>; <span class="comment">//标准</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//默认</span></span><br><span class="line">                    element.style[attr] = iCurrent + iSpeed + <span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4. 运动终止，是否回调</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                clearInterval(element.timer);</span><br><span class="line">                <span class="keyword">if</span> (func) &#123;</span><br><span class="line">                    func();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运动框架总结">运动框架总结</h2><ul>
<li>运动框架演变过程</li>
</ul>
<table>
<thead>
<tr>
<th>框架</th>
<th>变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>startMove(element)</td>
<td>运动</td>
</tr>
<tr>
<td>startMove(element,iTarget)</td>
<td>匀速–&gt;缓冲–&gt;多物体</td>
</tr>
<tr>
<td>startMove(element,attr,iTargrt)</td>
<td>任意值</td>
</tr>
<tr>
<td>startMove(element,attr,iTargrt,func)</td>
<td>链式运动</td>
</tr>
<tr>
<td>startMove(element,json,func)</td>
<td>多值(同时)–&gt;完美运动框架</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="运动框架的实现思路">运动框架的实现思路</h2><blockquote>
<p>运动，其实就是在一段时间内改变<code>left</code>、<code>right</code>、<code>width</code>、<code>height</code>、]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[task0002（三）- BOM + AJAX]]></title>
    <link href="http://guowenfh.github.io/2015/12/19/task0002-BOM&&AJAX/"/>
    <id>http://guowenfh.github.io/2015/12/19/task0002-BOM&&AJAX/</id>
    <published>2015-12-18T16:08:41.000Z</published>
    <updated>2015-12-18T16:26:38.745Z</updated>
    <content type="html"><![CDATA[<h2 id="BOM">BOM</h2><p>实现以下函数</p>
<h3 id="判断是否为IE浏览器">判断是否为IE浏览器</h3><ul>
<li>这里应该说一下，在从网上了解到的资料来看，在对于某个功能事件的时候不要去做浏览器检测，而应该做特性检测。这样更符合要求，且浏览器的<code>UserAgent</code>可人为修改</li>
<li>需要实现的话，ie11的版本号中并没有<code>msie:</code>。只能通过<code>rv:</code>获得。所以需进行一些处理。但是该属性同样可以返回火狐浏览器的版本号<code>- -。</code>所以还需要多加一层判断。查找是否存在<code>Trident\/7.0;</code></li>
<li>使用正则表达式的<code>match</code>方法,详细见我写的正则表达式的博客。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为IE浏览器，返回-1或者版本号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uUserAgent = navigator.userAgent; <span class="comment">//保存浏览器的userAgent</span></span><br><span class="line">    <span class="keyword">var</span> ieAgent = uUserAgent.match(<span class="regexp">/msie (\d+.\d+)/i</span>);</span><br><span class="line">    <span class="keyword">if</span> (ieAgent) &#123;</span><br><span class="line">        <span class="keyword">return</span> ieAgent[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (uUserAgent.match(<span class="regexp">/Trident\/7.0;/i</span>)) &#123; <span class="comment">//处理到ie11.</span></span><br><span class="line">            ieAgent = uUserAgent.match(<span class="regexp">/rv:(\d+.\d+)/i</span>);</span><br><span class="line">            <span class="keyword">return</span> ieAgent[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//不是ie浏览器。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Cookie相关">Cookie相关</h3><p>秒味js的免费课程，把cookie讲的很好。</p>
<h4 id="什么是cokie">什么是cokie</h4><ul>
<li><p>页面用来保存信息</p>
<ul>
<li>比如:自动登入/保存用户名</li>
</ul>
</li>
<li><p>cookie的特性</p>
<ul>
<li>同一个网站中所有页面共享一套cookie</li>
<li>数量/大小有限</li>
<li>过期时间</li>
</ul>
</li>
<li><p>JS中使用cookie</p>
<ul>
<li><code>document.cookie</code></li>
</ul>
</li>
</ul>
<h4 id="设置cookie">设置cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 设置cookie</span><br><span class="line"> * @param &#123;String&#125; cookieName  设置cookie名</span><br><span class="line"> * @param &#123;String&#125; cookieValue 对对应的cookie名</span><br><span class="line"> * @param &#123;Number&#125; expiredays  过期的时间(多少天后)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cookieName, cookieValue, expiredays</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    oDate.setDate(oDate.getDate() + expiredays);</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieName + <span class="string">"="</span> + cookieValue + <span class="string">";expires="</span> + oDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取cookie值">获取cookie值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span><br><span class="line"> * 获取cookie</span><br><span class="line"> * @param   &#123;String&#125; cookieName 待寻找的cookie名</span><br><span class="line"> * @returns &#123;String&#125; 返回寻找到的cookie值,无时为空</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cookieName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.split(<span class="string">"; "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr2 = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr2[<span class="number">0</span>] == cookieName) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="删除cookies">删除cookies</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 删除cookie</span><br><span class="line"> * @param &#123;String&#125; cookieName 待删除的cookie名</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">cookieName</span>) </span>&#123;</span><br><span class="line">    setCookie(cookieName, <span class="string">"1"</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展阅读：">扩展阅读：</h3><h4 id="sessionStorage、localStorage_和_cookie_之间的区别">sessionStorage、localStorage 和 cookie 之间的区别</h4><ul>
<li><strong>共同点</strong><br>  都是保存在浏览器端，且同源的。都是键值对存储。</li>
<li><strong>区别</strong></li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th>Cookie</th>
<th>localStorage</th>
<th>sessionStorage</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据的声明周期</td>
<td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td>
<td>除非被清除，否则永久保存</td>
<td>仅在当前会话下有效，关闭页面或关闭浏览器后被清除</td>
</tr>
<tr>
<td>存放数据大小</td>
<td>4K左右</td>
<td>一般为5MB</td>
<td>同左（话说markdown不支持跨列表格，只能用html写，懒得麻烦了-_-）</td>
</tr>
<tr>
<td>与服务器端通信</td>
<td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td>同左</td>
</tr>
<tr>
<td>易用性</td>
<td>需要程序员自己封装，原生的Cookie接口不友好</td>
<td>原生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
<td>同左</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>安全性</strong><br>  cookie 中最好不要放置任何明文的东西。而且特别需要注意敏感数据的存放。不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage中的。使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。</li>
<li>参考：<a href="http://jerryzou.com/posts/cookie-and-web-storage/" target="_blank" rel="external">详说 Cookie, LocalStorage 与 SessionStorage</a></li>
</ul>
<h2 id="Ajax">Ajax</h2><h3 id="任务描述">任务描述</h3><p>学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例：</span></span><br><span class="line">ajax(</span><br><span class="line">    <span class="string">'http://localhost:8080/server/ajaxtest'</span>, </span><br><span class="line">    &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: <span class="string">'simon'</span>,</span><br><span class="line">            password: <span class="string">'123456'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        onsuccess: <span class="function"><span class="keyword">function</span> (<span class="params">responseText, xhr</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>options是一个对象，里面可以包括的参数为：</p>
<ul>
<li>type: <code>post</code>或者<code>get</code>，可以有一个默认值</li>
<li>data: 发送的数据，为一个键值对象或者为一个用&amp;连接的赋值字符串</li>
<li>onsuccess: 成功时的调用函数</li>
<li>onfail: 失败时的调用函数</li>
</ul>
<h3 id="实现如下：">实现如下：</h3><blockquote>
<p>专门用两篇博客来记录了一下AJAX的学习过程，以及该函数的完成过程<br><a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-1/">Ajax入门（一）从0开始到一次成功的GET请求</a><br><a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-2-fn/">Ajax入门（二）Ajax函数封装</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * AJAX函数封装</span><br><span class="line"> * @param &#123;string&#125; url     请求地址（必须）</span><br><span class="line"> * @param &#123;object&#125; options 发送请求的选项参数</span><br><span class="line"> *   @config &#123;string&#125; [options.type] 请求发送的类型。默认为GET。</span><br><span class="line"> *   @config &#123;Object&#125; [options.data] 需要发送的数据。</span><br><span class="line"> *   @config &#123;Function&#125; [options.onsuccess] 请求成功时触发，function(oAjax.responseText, oAjax)。（必须）</span><br><span class="line"> *   @config &#123;Function&#125; [options.onfail] 请求失败时触发，function(oAjax)。(oAJax为XMLHttpRequest对象)</span><br><span class="line"> *</span><br><span class="line"> *@returns &#123;XMLHttpRequest&#125; 发送请求的XMLHttpRequest对象</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> oAjax = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined,进入else</span><br><span class="line">         * 若直接使用XMLHttpRequest,在不支持的情况下会报错</span><br><span class="line">         **/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">//IE6以上</span></span><br><span class="line">        oAjax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oAjax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.连接服务器</span></span><br><span class="line">    <span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">    <span class="keyword">var</span> param = <span class="string">""</span>; <span class="comment">//请求参数。</span></span><br><span class="line">    <span class="comment">//只有data存在，且为对象使才执行</span></span><br><span class="line">    <span class="keyword">var</span> data = options.data ? options.data : -<span class="number">1</span>; <span class="comment">//缓存data</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (data) === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123; <span class="comment">//请求参数拼接</span></span><br><span class="line">            <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">                param += key + <span class="string">"="</span> + data[key] + <span class="string">"&amp;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        param.replace(<span class="regexp">/&amp;$/</span>, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        param = <span class="string">"timestamp="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.发送请求</span></span><br><span class="line">    <span class="keyword">var</span> type = options.type ? options.type.toUpperCase() : <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">"GET"</span>) &#123;</span><br><span class="line">        oAjax.open(<span class="string">"GET"</span>, url + <span class="string">"?"</span> + param, <span class="literal">true</span>);</span><br><span class="line">        oAjax.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oAjax.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">        oAjax.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        oAjax.send(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.接收返回</span></span><br><span class="line">    <span class="comment">//OnRedayStateChange事件</span></span><br><span class="line">    oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oAjax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oAjax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//请求成功。形参为获取到的字符串形式的响应数据</span></span><br><span class="line">                options.onsuccess(oAjax.responseText, oAjax);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先判断是否存在请求失败函数</span></span><br><span class="line">                <span class="comment">//存在时，形参为XMLHttpRequest对象，便于进行错误进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (options.onfail) &#123;</span><br><span class="line">                    options.onfail(oAjax);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> oAjax;<span class="comment">//发送请求的XMLHttpRequest对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="BOM">BOM</h2><p>实现以下函数</p>
<h3 id="判断是否为IE浏览器">判断是否为IE浏览器</h3><ul>
<li>这里应该说一下，在从网上了解到的资料来看，在对于某个功能事件的时候不要去做浏览器检测，而应该做特性检测。这样更符合要求，且]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="task0002" scheme="http://guowenfh.github.io/tags/task0002/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《老子是癞蛤蟆》]]></title>
    <link href="http://guowenfh.github.io/2015/12/18/LaoZiShiLaiHaMa/"/>
    <id>http://guowenfh.github.io/2015/12/18/LaoZiShiLaiHaMa/</id>
    <published>2015-12-18T14:19:28.000Z</published>
    <updated>2015-12-18T16:10:23.475Z</updated>
    <content type="html"><![CDATA[<h2 id="为什么我会喜欢《老子是癞蛤蟆》这本书？">为什么我会喜欢《老子是癞蛤蟆》这本书？</h2><blockquote>
<p>说实话这本书有很多三观不正的地方，比如男主的后宫群，里面描述的各种关系等等。。。毕竟一本YY小说嘛，但是作为一个有思想的人，读书不都是应该取其精华的吗？</p>
<p>我想说的是：<strong>敢于吃天鹅肉的才是好癞蛤蟆</strong></p>
</blockquote>
<ul>
<li>一个隐富二代的奋斗史。（比你有钱的人，比你还努力，你在干嘛？）</li>
<li>一个男人的成长史。（人嘛，从来都不是一开始就天下无敌的。随着各种各样的经历，看的书越来越多，才能慢慢成熟）</li>
<li>对于感情的极致描写。（宠溺孙子到了极点的奶奶，胡璃之死，张乌梅的日记）很多事，可能家里确实做的不对，但是相信家人总是想着为你好，试着多一点理解。</li>
<li>对于努力的极致描写。（袁树，沈大元帅，项如意）请多努力一点，吃苦一点，总会有苦尽甘来的一天。</li>
<li>运动（早晚各10圈，一个好的身体才能支持你想要完成的事情。）</li>
<li>偏执（假如说别人对于赵甲第的期望值是100分的话，那么他这个偏执狂就自己在往120分上努力。疯魔状态）</li>
<li>忠诚（韩道德：“韩道德，你就算一条狗，人若以国士待我，我必以国士报之”）</li>
<li>读书（笔记达百万字？四年512本书？国考废纸卖1401块？）</li>
<li>专注（工行模型，闭关）</li>
<li>浪子回头。（不跳的马小跳）</li>
<li>做人。</li>
<li>…… 太多太多，每一次看，都能从里面学到自己应该要去改变的地方。</li>
</ul>
<blockquote>
<p>下面摘抄自《老子是癞蛤蟆》的段落（侵删）</p>
</blockquote>
<h2 id="开学典礼">开学典礼</h2><p>结果看到一个像门卫的老头踏着一双布鞋自顾自拿了一个话筒，就走到演讲台，没有发言稿，没有主持人预报，咳嗽了两声，不温不火道：“各位同仁，各位同学，我今天不想代表谁发言，只是以一个已经在本校扎根足足50年、并即将离开这所学校的老人这么个身份，跟2000多名新生说几句话。”</p>
<p>　　老人嗓音并不大，但清晰传到体育馆内每一个人耳朵里去。</p>
<p>　　台下一下子议论纷纷，都在窃窃私语。</p>
<p>　　老人一只手拿话筒，另一只手依然背负身后，厚重的老学究眼镜，踩着一双廉价橡胶底布鞋，一身土老帽的装扮，不理睬台下的喧闹，继续道：“我们身处的学区有个不太准确的叫法，杨浦大学城，这块土地上有复旦，有同济，有二军大，还有财大，还有呢？我不太记得住了，相信你们也一定不太清楚，这就是说，如果有人问起我们这所学校，他好不容易听清楚你的解释后，会恍然大悟，哦，就是在同济和二军大边上那所大学啊。或者等有一天你去上海市区逛街，等不到公交车，坐出租车来杨浦大学城，司机一定也一样不知道这么个地儿，所以你还得说，师傅，你干脆先把我送到同济大学吧。”</p>
<p>　　全场哄然大笑。</p>
<p>　　老校长也笑了，只是原先谈笑风生的主席台却鸦雀无声，一个个噤若寒蝉。</p>
<p>  老人轻轻摘下眼镜，用衬衫擦了擦，戴上后继续说道：“所以坦白说，这不是一所能让你说出去就可以赢得喝彩和羡慕的大学，我不知道2000多名学子中有多少是得意洋洋而来，觉得已经九九八十一难过后，可以逍遥快活了，也不知道又有多少是垂头丧气而来，只是混个文凭，然后就走上社会，给复旦学子北大清华学子们打杂做下手，跑跑腿端茶送水之类的。</p>
<p>  对此，我这个20岁那年就进入本校，然后就没有再离开的老头子还是想说点心里话，人的一生只有一个终点，却有很多个起点，从娘胎出生起是第一个大起点，这个谁都无法更改，接下来小学升初中，初中升高中，又是两个新起点，然后很多孩子就把高中升大学提前看作人生的终点了，这都是一种不负责任，18岁以后，你可以不必对你父母负责，但起码你得学会开始对自己负责。</p>
<p>  我记得有这么一句话，是你们某位学长一次醉酒后跟我说的：<strong>就是被人踩得像一滩烂泥，也要捏出狗尾巴花来。</strong></p>
<p>  如果我没有记错，他来自一个贫困县，每年学费都是欠着，然后都是靠他在学校拿奖学金和两个假期各做四份杂工和家教一块钱一块钱攒出来的，到毕业那天他跟我说这句话，那顿酒还是我付的钱。现在，这个大学四年期间从图书馆破本校纪录借了512本书的家伙，可能再过十来年等他走出国家发改委，再来上海，就是我的领导了。”</p>
<p>　　这一次笑声已经稀疏很多。</p>
<p>　　老校长笑了笑，环视台下2000多张稚嫩面孔，道：“我不要求你们跟那位学长一样每年借一百多本书，我觉得一年大概30多本就差不多了，当然必须是教材之外的书籍，说实话，<strong>大学拼命要你们读的书，反而是不太有用的东西，你们自己愿意去阅读去咀嚼去反思的作品，才是影响你们一生的精神财富。</strong></p>
<p>  <strong>我一个普普通通的农民子弟，20岁艰辛考上大学，26岁开始做老师，教书育人到今日，就只证明了一件事情，哪怕是一只癞蛤蟆，能够几十年如一日地充实自己，迟早都有跳出池塘吃上天鹅肉的一天。</strong><br>  <strong>这个天鹅肉可以是桃李满天下，可以是抱得美人归，也可以是功成名就光耀门楣，还可以是做一名伟大的金融家，我问心无愧了，没有遗憾了，也一直在等你们自认没有对自己愧疚的那一天。</strong></p>
<p>  也许听到这里，很多同学会问，凭什么你这么所不起眼的学校就要求我们奋发图强，是啊，这所学校既没有中国大学泛滥成灾的大楼，也没有几位中国学府集体漠视很多年的大师，凭什么？”</p>
<p>　　老校长停顿了一下，指了指自己，又指了指台下全场，“<strong>凭自己。</strong>”</p>
<p>　　全场沉默。</p>
<p>　　老人恢复轻松笑脸道：“好了，耽误大家那么多听歌看报纸的时间，很抱歉。散会。”</p>
<h2 id="毕业典礼。">毕业典礼。</h2><p>　　老校长没有做隆重的毕业致辞，仅是做了个简短并且破格的发言，几乎可以算作一场个人表彰。</p>
<p>　　“我们学校还是那个不怎么出名的学校，师资一般，就业率一般，藏书量一般，什么都很平常，还是比不上临近那些个财大气粗的复旦啊同济啊之类的名牌学。</p>
<p>  所以我如果要说让你们这帮在这里呆了四年可能只有失望的孩子认可‘我以学校为荣，学校以你为荣’，没几个人当回事，所以我在这里，不奢望什么，只希望以后听到有人骂这所学校的时候，出来说一句我们学校是不咋样但你们外人一边凉快去。</p>
<p>  可能有些学生已经知道，你们当中有人在去年国考拿下了170分，别说你们不信，我都不信，我还专门打电话去上海教委那边确认，说没错，是170分。那边一个我的学生都好几年没跟我拜年了，正月里特意跑来跟我道贺，说自己母校很不错，听到这话，我是高兴又不高兴。其中滋味，就不细说了。</p>
<p>  我要说的是这个考了170分的学生，名字不去提，其实教学楼那边很多老师都认识，尤其是跟我办公室一层那些个官帽没我大肚子倒是有我两个大的领导们，肯定记得，因为去年8月9月的时候，这个学生就窝在同一层的小房间，做一个连经济学者都觉得太复杂看不懂的模型，一做就是两个月，后来，我们这些闲着没事的校领导，当然也包括我，就得出一个挺有意思的结论：<strong>那穿着很熏人衣服一脸胡茬的年轻孩子如果是空手冲向洗手间，那肯定是上小号，如果说带上了纸笔，不用猜，是上大号了。</strong></p>
<p>  你们谁有兴趣，可以把工行10年的社会责任模型翻出来研究一下，就是这个学生做的。但哪怕是这样，我还是不信他能考出170，我要去考，这个分数，除以2，还差不多嘛，所以我很纳闷，凭什么你一个二本大学生考得出来？</p>
<p>  我就把他喊到办公室，问他怎么考出来的，这小子估摸着是在我办公室蹭吃蹭喝习惯了，随便说了一句看书做题来应付我，我当然不满意，说你小子不说出个子丑寅卯，毕业生扣下。</p>
<p>  结果他想了想，很认真对我说开始<strong>冲刺国考的7个月</strong>，考完以后把真题集、做过的行测试卷、申论材料这些乱七八糟全当废纸卖了，讨价还价以后<strong>一斤卖7毛钱，他卖了140块9毛钱</strong>，收废纸的给了他141块整，我问他这些钱能不能请我吃顿饭？</p>
<p>  这小子笑着说说报名费花去96块，还剩下47块。后来我和他找了个附近的大排挡，这段饭，是我这十几年来吃得最舒坦的一顿饭，因为我之前总觉得做了三十来年的狗屁校长，还不如最早的二十多年普通教师来得有用，吃完饭的时候，我对这个学生说。</p>
<p> <strong>“你不用以学校为荣，但学校以你为荣。”</strong></p>
<p>　　全场寂静。</p>
<p>  老校长顿了一下，依然是不急不缓的特色语调：“记得四年前开学典礼上跟耽误你们看报纸听歌的时候，有说到<strong>凭什么要你们奋发图强，答案是凭你们自己</strong>。</p>
<p>  <strong>今天，我再唠叨一句，希望哪一天你们参加这所学校几几年校庆的时候，可以对新校长理直气壮说一句‘学校要以我为荣’。</strong></p>
<p>  好了，毕业！”</p>
<h2 id="赵甲第回校演讲">赵甲第回校演讲</h2><p>  当一身休闲装的他站在讲台上，看着大教室黑压压一片的脑袋脸孔，有点骑虎难下，尤其是还有老校长亲自坐镇，大半校领导都坐在最后一排，这待遇，罕见。赵甲第深呼吸了几下，挤出一个笑脸，开门见山自嘲道：</p>
<p>  “这次老校长突然跟我说要开个讲座，一开始打死不答应，可架不住老校长威胁，只能硬着头皮来，到学校门口的时候都没想好该讲什么，光顾着紧张了。老校长说让我随便说，我就真的随便说了。”</p>
<p>　　响起一些笑声。</p>
<p>　　“不管你们信不信，我也仇富，也当过愤青。当然更打过架，不过胜多输少，高中挨过不少的警告处分，写过情书，但不怎么能收到情书，因为高中打篮球总是被盖帽给白马王子们找信心，踢足球总是跑最多触球最少的那个家伙，也会嫉妒那些长得比我帅的，羡慕口才比我好的，崇拜那些敢在教室跟女朋友亲嘴的。</p>
<p>  说这些，就是想说我的高中跟你们的没两样。考进这所学校，说实话没什么感觉，唯一记忆深刻的两件事，一件就是悲愤我们学校漂亮学姐太少。”</p>
<p>　　台下笑声明显多了点。</p>
<p>　　赵甲第笑了笑，一口洁白的牙齿，是很阳光向上，“第二件事，就是老校长在开学典礼上的那些话，但那会儿只是觉得这学校破破烂烂，跟复旦同济一比就跟丫鬟见着小姐一样，寒碜。但好歹有个不太一样的校长，总算没太大失望，大学四年，那么多日子总得过不是？<br>　　<br>　　除了中途休学一年，三年里跟在座的学弟学妹一样为了生存去学校食堂，价格死贵，东西死难吃，吃来吃去吃了一肚子的腹诽，不知道现在食堂伙食咋样了。”</p>
<p>　　台下开始互动：“一个德性！”<br>　　赵甲第望向后排玩笑道：“老校长，给改善改善？”<br>　　老校长呵呵笑道：“我亲手抓一抓好了，总不能让你白来。”</p>
<p>　　一阵雀跃欢呼。</p>
<p>　　赵甲第继续：“因为要打着听讲座的旗号去各个学校踩点，我买了两辆坐骑，第一辆自行车挂了两把锁都给偷了，真佩服那哥们的本事。三年下来把杨浦校区碾压了无数圈，觉得有些个复旦妹子确实挺耐看，我们学校，呃，只能说还好还好。”<br>　　一个被室友拉着来听讲座的漂亮mm举手道：“抗议。”<br>　　赵甲第笑道：“我应该晚生两年。”<br>　　哄堂大笑。</p>
<p>　　赵甲第犹豫了一下，笑容灿烂道：“现在想起来，真的挺怀念大学，跟室友一起翘课睡觉，一起去网吧通宵游戏，不过如果有美女上课，我总是不太舍得逃课。跟班上牲口些好不容易蜗牛速度下载来的爱情动作片，还会故意把音箱开到最大，对，就是29栋，被很多女生向校方举报的那个地方。”</p>
<p>　　一哥们嚷道：“学长，我就是29栋的！”<br>　　赵甲第打趣道：“那这个优良传统就靠你们发扬光大了。”<br>　　女生们会心一笑，没有丝毫反感。<br>　　这个学长，真是不太一样啊。</p>
<p>　　赵甲第似乎渐入佳境，不再有任何拘谨，轻松道：“刚才到门口看到这么多人，尤其是连走廊都有，我这手都在抖，现在好点了。<br>  说了这么多随便的，那就稍微说点不那么随便的。都是自己的心得，可能片面，你们拣爱听的就行。</p>
<p>  一个曾经让我当作超越目标的男人说过，他之所以成功，是因为他不读书，那些本来可以成功的人，都被钉死在书本上了。</p>
<p>  一开始我觉得这话说得偏激而霸气，很带劲，然后我就琢磨，我自己是属于读书还是不读书的？答案挺二百五的，还算是认真读书的老实孩子，小学天天被数学老师打板子，跟我唠叨越是好料越不能长歪，打着打着，就养成了越级做题的习惯，<strong>而这位老师教我最重要的东西，不是拿满分如何重要，而是如何去拿满分</strong>，读武侠小说的同学都知道‘天下武功唯快不破’‘万佛朝宗’这些调调，其实放在读书上，也是可以套用的。</p>
<p>  兜了一圈，读书到底有没有用？这个命题太大，我还没盖棺的资本，不敢瞎扯，但就我个人而言，<strong>读书有用没用，得看我们是读死书，还是读书读出世事洞明和人情练达</strong>，读死书，大概就是那个所谓的钉死在书本上了，读活了，哪怕成绩一般，我想到了社会，未必会比那些个高考状元差。</p>
<p>  读书无用论不可取，但存在即合理，当年暴发户嘲笑书生无用，其实有一半是对的，因为他们是社会这个大染缸里的高材生，错的一半不需要我多说，现在的社会趋势已经说明一切，要不中南海会有清华帮聚会？会有工科当政的说法？<strong>以后如果工科不再当政，那也肯定是风水轮流到了文科，怎么都轮不到天天上网玩游戏的，是吧？</strong></p>
<p>  越是成熟的社会，就越讲究积淀，放在各个行业也是如此，草莽龙蛇的年代一过，注定越来越靠扎实底蕴。</p>
<p>  <strong>读书好坏不在成绩，但话说回来，你连那些套教科书都玩不过，反而被玩死，就眼巴巴等着踏入社会大杀四方？</strong>不读书，或者说拼都不肯拼不敢拼一下，都成骄傲的资本了？天天嚷着富二代可恨该杀没用，人家照样吃香喝辣，还不如多想想富二代这么惬意，富一代是如何挣扎上位的？有人就说了官二代官三代太子党们又怎么讲，呵，问这个问题的，肯定是历史没学好，一部《解放战争》足以说明一切。”</p>
<p>　　“扯远了，难怪我作文一直没能拿过高分，议论文还好，散文完全是形散神更散。我想证明读书有用，现在没资格，希望以后有机会能证明，输了，正好当反面典型。接下来是不是该问答环节了？刚才在报刊亭那边买报纸，看到满摊子都是我的照片，你们多半是被这些骗进来的，我尽量做到有问必答。”</p>
<p>　　场面立即火爆起来。</p>
<p>　　问题一个个抛出来，不少都极为尖锐，赵甲第还真做到了知无不言言无不尽。</p>
<p>　　“学长，听说你精通围棋，那篇《他是谁》提到你在弈城有注册，我是业余里的业余，但在弈城也泡了好几年，就想问你是不是那个强九段‘国士无双’。”<br>　　“是。”<br>　　那位兄弟立马崇拜得五体投地，恨不得当场拜师学艺了。<br>　　“你已经进入发改委了，还会继承家族企业吗？”<br>　　“不出意外，会。”<br>　　满堂震惊。</p>
<p>　　“学长，我矮穷龊，一见到美女就脸红，能不能传授点经验？”</p>
<p>　　<strong>“舍得一身剁能把皇帝拉下马这是最逆天的屁民，这个我们不敢想，但舍得一身剐能把女神扛上床，这才是最凶残的癞蛤蟆。我一直坚信这点，脸皮厚点肯定没错，但前提是能保证自己给她幸福。”</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="为什么我会喜欢《老子是癞蛤蟆》这本书？">为什么我会喜欢《老子是癞蛤蟆》这本书？</h2><blockquote>
<p>说实话这本书有很多三观不正的地方，比如男主的后宫群，里面描述的各种关系等等。。。毕竟一本YY小说嘛，但是作为一个有思想的人，读书不都是应该取其]]>
    </summary>
    
      <category term="摘录" scheme="http://guowenfh.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="生活" scheme="http://guowenfh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ajax入门（二）Ajax函数封装]]></title>
    <link href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-2-fn/"/>
    <id>http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-2-fn/</id>
    <published>2015-12-18T11:49:35.000Z</published>
    <updated>2015-12-18T11:59:02.317Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>如果看了的我上一篇博客《<a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-1/">Ajax入门（一）从0开始到一次成功的GET请求</a>》的话，肯定知道我们已经完成了一个简单的get请求函数了。如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 一个简单的get请求</span><br><span class="line"> * @param &#123;String&#125;   url     请求地址,文件名</span><br><span class="line"> * @param &#123;Function&#125; fnSucc  请求成功时执行的函数</span><br><span class="line"> * @param &#123;Function&#125; fnFaild 请求失败执行的函数</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AJAX</span>(<span class="params">url, fnSucc, fnFaild</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> oAjax = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined.</span><br><span class="line">         * 进入else若直接使用XMLHttpRequest在不支持的情况下会报错</span><br><span class="line">         **/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">//IE6以上</span></span><br><span class="line">        oAjax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oAjax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.连接服务器</span></span><br><span class="line">    <span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">    oAjax.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.发送请求</span></span><br><span class="line">    oAjax.send();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.接收返回</span></span><br><span class="line">    <span class="comment">//OnRedayStateChange事件</span></span><br><span class="line">    oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oAjax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oAjax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//                alert("成功" + oAjax.responseText);</span></span><br><span class="line">                fnSucc(oAjax.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//                alert("服务器响应失败!");</span></span><br><span class="line">                <span class="keyword">if</span> (fnFaild) &#123;</span><br><span class="line">                    fnFaild();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>为什么要继续进行Ajax函数封装？</strong><br>原因如下：</p>
<ol>
<li>目前方法只能使用get请求，而不能使用post请求，而在用户注册时必须使用POST，因为POST，现在不够完整。</li>
<li>目前请求参数只能直接写在url里，不利于动态获取数据，应该使用参数解析的方式，便于使用。</li>
<li>get请求方式请求缓存问题。</li>
<li>学习封装方法，</li>
</ol>
<h2 id="改造目标">改造目标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>options是一个对象，里面可以包括的参数为：</p>
<ul>
<li>type: post或者get，可以有一个默认值</li>
<li>data: 发送的数据，为一个键值对象或者为一个用&amp;连接的赋值字符串</li>
<li>onsuccess: 成功时的调用函数</li>
<li>onfail: 失败时的调用函数</li>
</ul>
<h2 id="改造开始（三步）">改造开始（三步）</h2><h3 id="（一）原函数的改造">（一）原函数的改造</h3><p>形参中，删除<code>fnSucc</code>、<code>fnFaild</code> 添加<code>options</code>。使成功与失败执行的函数变成options对象的 <code>onsuccess</code>、<code>onfail</code>两个方法对应的值。<br>主要是在<strong>4、接收返回</strong>部分进行更改，如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.接收返回</span></span><br><span class="line">oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oAjax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oAjax.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//请求成功。形参为获取到的字符串形式的响应数据</span></span><br><span class="line">            options.onsuccess(oAjax.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//先判断是否存在请求失败函数</span></span><br><span class="line">            <span class="comment">//存在时，形参为XMLHttpRequest对象，便于进行错误进行处理</span></span><br><span class="line">            <span class="keyword">if</span> (options.onfail) &#123;</span><br><span class="line">                options.onfail(oAjax);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="（二）请求参数的处理">（二）请求参数的处理</h3><blockquote>
<p>首先我们要知道的是在使用请求参数存在时，GET方式的请求参数特别简单。直接在url后面添加?参数名=参数值&amp;参数名二=参数值二</p>
</blockquote>
<h4 id="实现思路：">实现思路：</h4><ol>
<li>首先判断options.data是否存在，不存在时使用<code>&quot;?timestamp= + new Date().getTime();</code>链接在url后，以清除缓存。<ul>
<li>这里只是我使用的方法，这里的timestamp可以随意更改</li>
<li><code>new Date().getTime();</code>也可以用<code>Math.random();</code>主要是保持每次请求的url都不一样。</li>
<li>还有许多别的方法参考<a href="http://any9.com/1731.html" target="_blank" rel="external">Ajax缓存问题怎么解决？</a>。有兴趣的自己再多google一下吧。</li>
</ul>
</li>
<li>存在options.data时，应该限制请求data格式便于处理，设定为JSON（当然没必要像JSON那么严格，但是应该保持键值对的格式）。</li>
<li>使用for in 遍历data，使用<code>=</code>来连接键与值，使用<code>&amp;</code>来连接多个请求参数</li>
<li>只需要对原函数中的<strong>2.连接服务器</strong>进行更改</li>
</ol>
<h4 id="实现如下：">实现如下：</h4><p>原：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.连接服务器</span></span><br><span class="line"><span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">oAjax.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p><strong>现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line"><span class="keyword">var</span> param = <span class="string">""</span>;<span class="comment">//请求参数。</span></span><br><span class="line"><span class="comment">//判断data存在时缓存它，不存在时，设为0</span></span><br><span class="line"><span class="keyword">var</span> data = options.data ? options.data : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(data)===<span class="string">"object"</span>)&#123;<span class="comment">//只有data为对象使才执行</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;<span class="comment">//请求参数拼接</span></span><br><span class="line">		<span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">			param += key+<span class="string">"="</span>+data[key]+<span class="string">"&amp;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	param.replace(<span class="regexp">/&amp;$/</span>,<span class="string">""</span>);<span class="comment">//去除结尾的&amp;。</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	param= <span class="string">"timestamp="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.连接服务器</span></span><br><span class="line">oAjax.open(<span class="string">"GET"</span>, url+<span class="string">"?"</span>+param, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="（三）请求类型选择">（三）请求类型选择</h3><blockquote>
<p>使用post发送数据，模拟form提交。在url看不到请求参数，更加安全。</p>
</blockquote>
<h4 id="实现思路：-1">实现思路：</h4><ol>
<li>判断是否type是否存在，存在时转为大写，默认为GET请求。</li>
<li>判断请求的类型，GET 或  POST 。</li>
<li>在使用post请求提交数据时，请求参数不跟在url后面。</li>
<li><p>使用post请求数据必须添加在<code>open()</code>与<code>send()</code>直接添加头信息。</p>
<ul>
<li><code>xmlHttp.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</code></li>
</ul>
</li>
<li><p>使用post请求数据，对<strong>2.连接服务器、3.发送请求</strong>部分进行处理</p>
</li>
</ol>
<h4 id="实现如下：-1">实现如下：</h4><p>原：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.连接服务器</span></span><br><span class="line">oAjax.open(<span class="string">"GET"</span>, url+<span class="string">"?"</span>+param, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p><strong>现</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line"><span class="keyword">var</span> type = options.type ? options.type.toUpperCase() : <span class="string">"GET"</span> ;</span><br><span class="line"><span class="keyword">if</span>(type ===<span class="string">"GET"</span>)&#123;</span><br><span class="line">	oAjax.open(<span class="string">"GET"</span>, url+<span class="string">"?"</span>+param, <span class="literal">true</span>);</span><br><span class="line">	oAjax.send();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	oAjax.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">	oAjax.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">	oAjax.send(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最终完成">最终完成</h2><blockquote>
<p>结合之前写的，集合起来。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * AJAX函数封装</span><br><span class="line"> * @param &#123;string&#125; url     请求地址（必须）</span><br><span class="line"> * @param &#123;object&#125; options 发送请求的选项参数</span><br><span class="line"> *   @config &#123;string&#125; [options.type] 请求发送的类型。默认为GET。</span><br><span class="line"> *   @config &#123;Object&#125; [options.data] 需要发送的数据。</span><br><span class="line"> *   @config &#123;Function&#125; [options.onsuccess] 请求成功时触发，function(oAjax.responseText, oAjax)。（必须）</span><br><span class="line"> *   @config &#123;Function&#125; [options.onfail] 请求失败时触发，function(oAjax)。(oAJax为XMLHttpRequest对象)</span><br><span class="line"> *</span><br><span class="line"> *@returns &#123;XMLHttpRequest&#125; 发送请求的XMLHttpRequest对象</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AJAX</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> oAjax = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined,进入else</span><br><span class="line">         * 若直接使用XMLHttpRequest,在不支持的情况下会报错</span><br><span class="line">         **/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">//IE6以上</span></span><br><span class="line">        oAjax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oAjax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.连接服务器</span></span><br><span class="line">    <span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">    <span class="keyword">var</span> param = <span class="string">""</span>; <span class="comment">//请求参数。</span></span><br><span class="line">    <span class="comment">//只有data存在，且为对象使才执行</span></span><br><span class="line">    <span class="keyword">var</span> data = options.data ? options.data : -<span class="number">1</span>; <span class="comment">//缓存data</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (data) === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123; <span class="comment">//请求参数拼接</span></span><br><span class="line">            <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">                param += key + <span class="string">"="</span> + data[key] + <span class="string">"&amp;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        param.replace(<span class="regexp">/&amp;$/</span>, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        param = <span class="string">"timestamp="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.发送请求</span></span><br><span class="line">    <span class="keyword">var</span> type = options.type ? options.type.toUpperCase() : <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">"GET"</span>) &#123;</span><br><span class="line">        oAjax.open(<span class="string">"GET"</span>, url + <span class="string">"?"</span> + param, <span class="literal">true</span>);</span><br><span class="line">        oAjax.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oAjax.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">        oAjax.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        oAjax.send(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.接收返回</span></span><br><span class="line">    <span class="comment">//OnRedayStateChange事件</span></span><br><span class="line">    oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oAjax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oAjax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//请求成功。形参为获取到的字符串形式的响应数据</span></span><br><span class="line">                options.onsuccess(oAjax.responseText, oAjax);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先判断是否存在请求失败函数</span></span><br><span class="line">                <span class="comment">//存在时，形参为XMLHttpRequest对象，便于进行错误进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (options.onfail) &#123;</span><br><span class="line">                    options.onfail(oAjax);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> oAjax;<span class="comment">//发送请求的XMLHttpRequest对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最终完成就是这样了。当然还远远算不上完美，比如<code>try catch</code>的使用 ，但是通过这样的封装，还是学到很多知识。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>如果看了的我上一篇博客《<a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-1/">Ajax入门（一）从0开始到一次成功的GET请求</a>》的话，肯定知道我们已]]>
    </summary>
    
      <category term="Ajax" scheme="http://guowenfh.github.io/tags/Ajax/"/>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ajax入门（一）从0开始到一次成功的GET请求]]></title>
    <link href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-1/"/>
    <id>http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-1/</id>
    <published>2015-12-18T06:38:40.000Z</published>
    <updated>2015-12-23T00:53:25.541Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>续作<a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-2-fn/">Ajax入门（二）Ajax函数封装</a><br>传统表单在提交后整个页面都刷新</p>
</blockquote>
<h2 id="什么是服务器">什么是服务器</h2><h3 id="网页浏览过程分析">网页浏览过程分析</h3><p>一个完整的<strong>HTTP请求</strong>过程,通常有下面7个步骤</p>
<ol>
<li>建立TCP连接</li>
<li>Web浏览器向Web服务器发送请求命令</li>
<li>Web浏览器发送请求头信息</li>
<li>Web服务器- 应答</li>
<li>Web服务器- 发送应答头信息</li>
<li>Web服务器- 向浏览器发送数据</li>
<li><p>Web服务器- 关闭TCP连接</p>
<p><strong>如何配置自己的服务器程序(AMP)</strong></p>
<blockquote>
<p>Ajax必须在服务器环境下才能正常使用</p>
</blockquote>
</li>
</ol>
<ul>
<li>我使用的WampServer程序.(支持中文)<a href="http://www.wampserver.com/en/" target="_blank" rel="external">官网连接</a>.可能速度不行,不过科学上网,大家应该都会.</li>
<li>网上的使用教程:<a href="http://www.phpthinking.com/archives/379" target="_blank" rel="external">如何安装使用</a></li>
<li>XAMPP–我试了一下,还是wamp简单,大家有兴趣就自己去测试了</li>
<li>推荐使用firefox浏览器进行AJAX的调试。</li>
</ul>
<h2 id="Ajax原理">Ajax原理</h2><blockquote>
<p>什么是Ajax?</p>
</blockquote>
<ul>
<li>无刷新数据读取<ul>
<li>用户注册/在线聊天室</li>
<li>理解同步和异步(基本都用异步请求).<blockquote>
<p>同步: 客户端发起请求–等待–&gt;服务器端处理—等待–&gt;响应–&gt;页面载入 (请求错误时全部重新载入).<br>异步: 客户端发起请求—&gt;服务器端处理—&gt;响应—&gt;页面载入(填写时,即时更新,部分返回).</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="HTTP请求">HTTP请求</h3><ul>
<li>一个HTTP请求一般由四部分组成<ol>
<li>HTTP请求的方法或动作如是<code>GET</code>还是<code>POST</code>请求</li>
<li>正在请求的URL,总得知道请求的地址是什么吧?</li>
<li>请求头,包含一些客户端环境信息,身份验证信息等</li>
<li>请求体,也就是请求正文,请求正文中可以包含客户端提交的查询字符串信息,表单信息等等.</li>
</ol>
</li>
</ul>
<p><img src="/images/ajax/http.png" alt="HTTP请求"></p>
<h3 id="HTTP响应">HTTP响应</h3><ul>
<li>一个<strong>HTTP响应</strong>一般由三部分组成:<ol>
<li>一个<strong>数字</strong>和<strong>文字</strong>组成的状态码,用来显示请求是成功还是失败</li>
<li><strong>响应头</strong>,响应头和请求头一样包含许多有用的信息,例如服务器类型,日期时间,内容类型和长度等.</li>
<li><strong>响应体</strong>,也就是响应正文.</li>
</ol>
</li>
</ul>
<p><img src="/images/ajax/http2.png" alt="HTTP响应"></p>
<h3 id="HTTP请求方式">HTTP请求方式</h3><table>
<thead>
<tr>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody>
<tr>
<td>用于信息获取/查询(如:浏览帖子)</td>
<td>用于修改服务器上的资源(如:用户注册)</td>
</tr>
<tr>
<td>安全性低(使用<code>url</code>传递参数所有人可见)</td>
<td>安全性一般(至少不可见)</td>
</tr>
<tr>
<td>容量低(2000个字符)</td>
<td>容量几乎无限</td>
</tr>
</tbody>
</table>
<h3 id="常见的HTTP状态码">常见的HTTP状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
<th>原因短语</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>请求成功.一般用于GET和POST方法</td>
<td>OK</td>
</tr>
<tr>
<td>301</td>
<td>资源移动.所请求资源移动到新的URL,浏览器自动跳转到新的URL</td>
<td>Moved Permanently</td>
</tr>
<tr>
<td>304</td>
<td>未修改.所请求资源未修改读取缓存数据</td>
<td>Not Modified</td>
</tr>
<tr>
<td>400</td>
<td>请求语法错误,服务器无法理解</td>
<td>Bad Request</td>
</tr>
<tr>
<td>404</td>
<td>未找到资源,可以设置个性”404页面”</td>
<td>Not Found</td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
<td>internal Server Error</td>
</tr>
</tbody>
</table>
<h2 id="编写Ajax">编写Ajax</h2><p><strong>类比打电话理解Ajax编写步骤</strong> </p>
<table>
<thead>
<tr>
<th>打电话</th>
<th>ajax请求</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.打电话</td>
<td>1.创建Ajax对象</td>
</tr>
<tr>
<td>2.拨号</td>
<td>2.连接服务器</td>
</tr>
<tr>
<td>3.建立连接</td>
<td>3.发送请求</td>
</tr>
<tr>
<td>4.听</td>
<td>4.接受返回</td>
</tr>
</tbody>
</table>
<h3 id="1-创建Ajax对象">1.创建Ajax对象</h3><ul>
<li>IE6:<code>ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</code>;//IE6已死,可以不考虑了</li>
<li><code>XMLHttpRequest()</code>; </li>
</ul>
<p>例:<code>var request = new XMLHttpRequest();</code></p>
<h3 id="2-连接服务器">2.连接服务器</h3><ul>
<li><code>open(method,url,async);</code></li>
<li>open(发送请求方法”GET/POST” ,(请求地址”文件名”) ,是否异步传输)</li>
</ul>
<p>例: <code>request.open(&quot;GET&quot;,&quot;get.json&quot;,true);</code></p>
<h3 id="3-发送请求">3.发送请求</h3><ul>
<li><code>send(string)</code><ul>
<li>在使用<code>GET</code>方式请求时无需填写参数</li>
<li>在使用<code>POST</code>方式时参数代表着向服务器发送的数据</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整的GET请求</span></span><br><span class="line"><span class="keyword">var</span> oAjax = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//创建Ajax对象</span></span><br><span class="line">oAjax.open(<span class="string">"GET"</span>,<span class="string">"create.php"</span>,<span class="literal">true</span>);<span class="comment">//连接服务器</span></span><br><span class="line">oAjax.send();<span class="comment">//发送请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完整的POST发送请求</span></span><br><span class="line"><span class="keyword">var</span> oAjax = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//创建</span></span><br><span class="line">oAjax.open(<span class="string">"POST"</span>,<span class="string">"create.php"</span>,<span class="literal">true</span>);<span class="comment">//"POST"</span></span><br><span class="line">oAjax.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);<span class="comment">//设置HTTP头信息.必须在open与send之间,否则出现异常.</span></span><br><span class="line">oAjax.send(<span class="string">"name=陈二狗&amp;sex=男"</span>);<span class="comment">//发送给服务器的内容</span></span><br></pre></td></tr></table></figure>
<h3 id="4-接收返回-请求状态监控">4.接收返回-请求状态监控</h3><ul>
<li>XMLHttpRequset取得响应</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>responseText</code></td>
<td>获得字符串形式的响应数据</td>
</tr>
<tr>
<td><code>responseXML</code></td>
<td>获得XML形式的响应数据</td>
</tr>
<tr>
<td><code>status</code>和<code>statusText</code></td>
<td>以数字和文本方式返回HTTP状态码</td>
</tr>
<tr>
<td><code>getAllResponseHeader()</code></td>
<td>获取所有的响应报头</td>
</tr>
<tr>
<td><code>getResponseheader()</code></td>
<td>查询响应中的某个字段的值</td>
</tr>
</tbody>
</table>
<ul>
<li><p><strong><code>onreadystatechange</code>事件</strong></p>
<blockquote>
<p>通过监听<code>onreadystatechange</code>事件,来判断请求的状态.</p>
</blockquote>
</li>
<li><p><code>readyState</code>属性:响应返回所处状态</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态</th>
<th>所处位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>(未初始化)</td>
<td>还没有调用<code>open()</code>方法</td>
</tr>
<tr>
<td>1</td>
<td>(载入)</td>
<td>已调用<code>send()</code>方法,正在发送请求</td>
</tr>
<tr>
<td>2</td>
<td>(载入完成)</td>
<td><code>send()</code>方法完成,已经收到全部响应 内容</td>
</tr>
<tr>
<td>3</td>
<td>(解析)</td>
<td>正在解析响应内容</td>
</tr>
<tr>
<td>4</td>
<td>(完成)</td>
<td>响应内容解析完成,<em>可以在客户端调用了</em></td>
</tr>
</tbody>
</table>
<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本完整的一个Ajax请求</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"GET"</span>,<span class="string">"get.json"</span>,<span class="literal">true</span>);</span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//响应成功,做一些事情</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//响应失败,做一些事情</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="使用函数简单的封装一个get请求">使用函数简单的封装一个get请求</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 一个简单的异步get请求</span><br><span class="line"> * <span class="doctag">@param</span> &#123;String&#125;   url     请求地址,文件名</span><br><span class="line"> * <span class="doctag">@param</span> &#123;Function&#125; fnSucc  请求成功时执行的函数,形参为为获取的字符串值.</span><br><span class="line"> * <span class="doctag">@param</span> &#123;Function&#125; fnFaild 请求失败执行的函数,可选参数</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">(url, fnSucc, fnFaild)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> oAjax = <span class="keyword">null</span></span><br><span class="line">        <span class="comment">//此处必须需要使用window.的方式,表示为window对象的一个属性.不存在是值为undefined,进入else/若直接使用XMLHttpRequest在不支持的情况下会报错</span></span><br><span class="line">    <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">        oAjax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//IE6以上,现在应该不需要考虑IE6了</span></span><br><span class="line">        oAjax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.连接服务器</span></span><br><span class="line">    <span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">    oAjax.open(<span class="string">"GET"</span>, url, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//3.发送请求</span></span><br><span class="line">    oAjax.send();</span><br><span class="line">    <span class="comment">//4.接收返回</span></span><br><span class="line">    <span class="comment">//OnRedayStateChange事件</span></span><br><span class="line">    oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oAjax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oAjax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                fnSucc(oAjax.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fnFaild) &#123;</span><br><span class="line">                    fnFaild();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用Ajax">使用Ajax</h2><h3 id="基础:请求并显示静态TXT文件">基础:请求并显示静态TXT文件</h3><ul>
<li>字符集编码:不一致时会出现乱码</li>
<li>缓存,阻止缓存,(使用时间对象添加)</li>
</ul>
<h3 id="动态数据:请求JS(或JSON)文件">动态数据:请求JS(或JSON)文件</h3><blockquote>
<p>注：<strong>并不推荐使用<code>eval</code>，并不推荐使用<code>eval</code>，并不推荐使用<code>eval</code></strong>。因为eval解析数据时会有一系列问题出现。这里是因为只是学习就随意点了。<br>在需要解析请求数据时，推荐使用JSON的方法<code>JSON.parse()</code>可以将一个 JSON 字符串解析成为一个 JavaScript 值。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON" target="_blank" rel="external">MDN-JSON</a></p>
</blockquote>
<ul>
<li><code>eval</code>的使用<br>例: </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"54-8*6+4"</span>;</span><br><span class="line">alert(<span class="built_in">eval</span>(str)); <span class="comment">//10;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"[1,2,3]"</span>;   </span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">eval</span>(str1);</span><br><span class="line">alert(arr[<span class="number">1</span>]);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">"function show()&#123;alert('abc');&#125;"</span>;</span><br><span class="line"><span class="built_in">eval</span>(str3);</span><br><span class="line">show() <span class="comment">//abc</span></span><br></pre></td></tr></table></figure>
<p><strong>一次成功的get请求</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已经引入get函数</span></span><br><span class="line"><span class="comment">//数据文件放在同级目录下就行了。</span></span><br><span class="line">get(<span class="string">"json.js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">eval</span>(str);</span><br><span class="line">    alert(arr[<span class="number">0</span>].a);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"服务器请求失败!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//json.js存放的文件如下</span></span><br><span class="line"><span class="comment">/*</span><br><span class="line">    [&#123;</span><br><span class="line">        a: 12,</span><br><span class="line">        b: 5</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        a: 2,</span><br><span class="line">        b: 56</span><br><span class="line">    &#125;]</span><br><span class="line">*/</span></span><br><span class="line"><span class="comment">//服务器响应成功时,将返回12.</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>DOM</code>创建元素<ul>
<li>局部刷新:请求并显示部分网页文件,使用<code>for</code>循环.</li>
<li>这里是属于DOM操作的范围，在这里就不过多讲述了。</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>续作<a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-2-fn/">Ajax入门（二）Ajax函数封装</a><br>传统表单在提交后整个页面都刷新</p>
<]]>
    </summary>
    
      <category term="Ajax" scheme="http://guowenfh.github.io/tags/Ajax/"/>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[task0002（二）- DOM + 事件]]></title>
    <link href="http://guowenfh.github.io/2015/12/16/task0002-DOM&&event/"/>
    <id>http://guowenfh.github.io/2015/12/16/task0002-DOM&&event/</id>
    <published>2015-12-16T04:32:41.000Z</published>
    <updated>2015-12-24T06:01:46.768Z</updated>
    <content type="html"><![CDATA[<h2 id="DOM">DOM</h2><h3 id="添加class、移除class、是否同级元素、获取元素位置">添加class、移除class、是否同级元素、获取元素位置</h3><p>先来一些简单的，在你的<code>util.js</code>中完成以下任务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为element增加一个样式名为newClassName的新样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element, newClassName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除element中的样式oldClassName</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element, oldClassName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSiblingNode</span>(<span class="params">element, siblingNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取element相对于浏览器窗口的位置，返回一个对象&#123;x, y&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// your implement</span></span><br></pre></td></tr></table></figure>
<h4 id="思路：">思路：</h4><ol>
<li><p>其实这里可以先定义一个<code>hasClass</code>函数。用来判断该节点是否含有某个className。</p>
<ul>
<li><code>addClass</code>添加样式。调用<code>hasClass</code>函数，判断<code>element</code>是否含有待添加的新className，若没有则添加，否则什么都不做。</li>
<li><code>removeClass</code>删除样式。调用<code>hasClass</code>函数，判断<code>element</code>是否含有该指定样式，若含有的话删除该className。没有的话什么都不做。</li>
</ul>
</li>
<li><p>判断siblingNode和element是否为同一个父元素下的同一级的元素。这里直接判断<code>parentNode</code>就可以了吧</p>
</li>
<li><p>获取element相对于浏览器窗口的位置，返回一个对象{x, y}。</p>
<ul>
<li>这个题应该是这几个中比较复杂的一个了。因为不能直接使用<code>offsetLeft/Top</code>。<strong><code>offsetLeft/Top</code>所获取的是其相对父元素的相对位置。</strong>当多层定位嵌套时想要获取到当前元素相对网页的位置就会不对。</li>
<li>并且由于在<code>表格</code>和<code>iframe</code>中，offsetParent对象未必等于父容器，所以也不能直接利用该元素的<code>parent</code>来获取位置，因为其对于<code>表格</code>和<code>iframe</code>中的元素不适用。</li>
<li><p>通过查询知道有一个<code>Element.getBoundingClientRect()</code>方法。它返回一个对象，其中包含了left、right、top、bottom四个属性，分别对应了该元素的左上角和右下角相对于浏览器窗口（viewport）左上角的距离。</p>
</li>
<li><p>但是用该方法获取到的是元素的相对位置，在出现滚动时，距离会发生改变，要获得绝对位置时，还需要加上滚动的距离。因为Firefox或Chrome的不兼容问题需要进行兼容性处理，参考<a href="http://www.cnblogs.com/zhenyu-whu/archive/2012/11/13/2768004.html" target="_blank" rel="external">document.body.scrollTop or document.documentElement.scrollTop</a></p>
</li>
<li>最终根据两个值，得到绝对位置。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其实也简单，只需要获取到两个值，取其中的最大值即可。</span></span><br><span class="line"><span class="keyword">var</span> scrollLeft = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollLeft, <span class="built_in">document</span>.body.scrollLeft);</span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollTop, <span class="built_in">document</span>.body.scrollTop);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h4 id="实现：">实现：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断element中是否含有className为sClass。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element, sClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(\\s|^)"</span> + sClass + <span class="string">"(\\s|$)"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为element增加一个样式名为newClassName的新样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element, newClassName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasClass(element, newClassName)) &#123;</span><br><span class="line">        element.className += <span class="string">" "</span> + newClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除element中的样式oldClassName</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element, oldClassName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hasClass(element, oldClassName)) &#123;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(\\s|^)"</span> + oldClassName + <span class="string">"(\\s|$)"</span>);</span><br><span class="line">        element.className = element.className.replace(reg, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSiblingNode</span>(<span class="params">element, siblingNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element.parentNode === siblingNode.parentNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取element相对于浏览器窗口的位置，返回一个对象&#123;x, y&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = &#123;&#125;;</span><br><span class="line">    position.x = element.getBoundingClientRect().left + <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollLeft, <span class="built_in">document</span>.body.scrollLeft);<span class="comment">//获取相对位置+滚动距离=绝对位置.</span></span><br><span class="line">    position.y = element.getBoundingClientRect().top + <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollTop, <span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料：（还没看完）</p>
<ul>
<li>阮一峰<a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="external">用Javascript获取页面元素的位置</a></li>
<li>博客园<a href="http://www.cnblogs.com/dolphinX/archive/2012/11/19/2777756.html" target="_blank" rel="external">JavaScript获取DOM元素位置和尺寸大小</a></li>
<li>博客园<a href="http://www.cnblogs.com/myzhibie/p/4256164.html?utm_source=tuicool" target="_blank" rel="external">js中的各种宽高以及位置总结</a></li>
</ul>
<h3 id="挑战mini_$">挑战<code>mini $</code></h3><p>接下来挑战一个<code>mini $</code>，它和之前的<code>$</code>是不兼容的，它应该是<code>document.querySelector</code>的功能子集，在不直接使用<code>document.querySelector</code>的情况下，在你的<code>util.js</code>中完成以下任务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个简单的Query</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过id获取DOM对象，通过#标示，例如</span></span><br><span class="line">$(<span class="string">"#adom"</span>); <span class="comment">// 返回id为adom的DOM对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过tagName获取DOM对象，例如</span></span><br><span class="line">$(<span class="string">"a"</span>); <span class="comment">// 返回第一个&lt;a&gt;对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过样式名称获取DOM对象，例如</span></span><br><span class="line">$(<span class="string">".classa"</span>); <span class="comment">// 返回第一个样式定义包含classa的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过attribute匹配获取DOM对象，例如</span></span><br><span class="line">$(<span class="string">"[data-log]"</span>); <span class="comment">// 返回第一个包含属性data-log的对象</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"[data-time=2015]"</span>); <span class="comment">// 返回第一个包含属性data-time且值为2015的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过简单的组合提高查询便利性，例如</span></span><br><span class="line">$(<span class="string">"#adom .classa"</span>); <span class="comment">// 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象</span></span><br></pre></td></tr></table></figure>
<p>实现思路：<br>嗯，这个题思考了很久，网上找了很多资料但还是不怎么会，还达不到想要的效果，有点钻牛角尖了。尽量来写一下吧。（我果然是个弱鸡）。感谢秒味课堂的免费课程。</p>
<ol>
<li>题目要求获取到所有的节点中的第一个，所以不需要用数组来储存获取到的节点。</li>
<li>额。。想了半天，还是使用函数包装来实现后代选择器比较好，所以VQuery函数返回是获取到的完整节点对象数组，<code>$</code>函数用来达到题目要求。</li>
<li>所以在VQuery函数中就不需要考虑空格了，直接使用switch分支，来判定不同的情况。<code>#</code>、<code>.</code>、<code>[</code>、 <code>[=]</code>。</li>
<li>在<code>$</code>函数中，判断字符串中是否含有空格，有空格的话需要分割成数组，数组的前一项是为父选择符，后一项为子选择符。分不同的情况来调用VQuery函数，并返回对象。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * $函数的依赖函数，选择器函数</span><br><span class="line"> * @param   &#123;string&#125; selector CSS方式的选择器</span><br><span class="line"> * @param   &#123;object&#125; root     可选参数，selector的父对象。不存在时，为document</span><br><span class="line"> * @returns &#123;Array&#125;  返回获取到的节点数组，需要注意的是使用ID选择器返的也是数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VQuery</span>(<span class="params">selector, root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用来保存选择的元素</span></span><br><span class="line">    <span class="keyword">var</span> elements = []; <span class="comment">//保存结果节点数组</span></span><br><span class="line">    <span class="keyword">var</span> allChildren = <span class="literal">null</span>; <span class="comment">//用来保存获取到的临时节点数组</span></span><br><span class="line">    root = root || <span class="built_in">document</span>; <span class="comment">//若没有给root，赋值document</span></span><br><span class="line">    <span class="keyword">switch</span> (selector.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"#"</span>: <span class="comment">//id选择器</span></span><br><span class="line">        elements.push(root.getElementById(selector.substring(<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"."</span>: <span class="comment">//class选择器</span></span><br><span class="line">        <span class="keyword">if</span> (root.getElementsByClassName) &#123; <span class="comment">//标准</span></span><br><span class="line">            elements = root.getElementsByClassName(selector.substring(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//兼容低版本浏览器</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + selector.substring(<span class="number">1</span>) + <span class="string">"\\b"</span>);</span><br><span class="line">            allChildren = root.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = allChildren.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (reg.test(allChildren[i].className)) &#123;</span><br><span class="line">                    elements.push(allChildren[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"["</span>: <span class="comment">//属性选择器</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (selector.indexOf(<span class="string">"="</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//只有属性没有值的情况</span></span><br><span class="line">            allChildren = root.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = allChildren.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (allChildren[i].getAttribute(selector.slice(<span class="number">1</span>, -<span class="number">1</span>)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    elements.push(allChildren[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//既有属性又有值的情况</span></span><br><span class="line">            <span class="keyword">var</span> index = selector.indexOf(<span class="string">"="</span>); <span class="comment">//缓存=出现的索引位置。</span></span><br><span class="line">            allChildren = root.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = allChildren.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (allChildren[i].getAttribute(selector.slice(<span class="number">1</span>, index)) === selector.slice(index + <span class="number">1</span>, -<span class="number">1</span>)) &#123;</span><br><span class="line">                    elements.push(allChildren[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">//tagName</span></span><br><span class="line">        elements = root.getElementsByTagName(selector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 模仿jQuery的迷你$选择符。</span><br><span class="line"> * @param   &#123;string&#125; selector CSS方式的选择器，支持简单的后代选择器（只支持一级）</span><br><span class="line"> * @returns &#123;object&#125; 返回获取到的第一个节点对象，后代选择器时，返回第一个对象中的第一个符合条件的对象</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line"><span class="comment">//这里trim处理输入时两端出现空格的情况，支持ie9+。但是这个函数实现起来也特别简单，可以参考我task0002（-）前面有trim函数的实现。稍微修改一下，这样就没兼容性问题了。</span></span><br><span class="line">    <span class="keyword">if</span> (selector == <span class="built_in">document</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    selector = selector.trim();</span><br><span class="line">    <span class="comment">//存在空格时，使用后代选择器</span></span><br><span class="line">    <span class="keyword">if</span> (selector.indexOf(<span class="string">" "</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> selectorArr = selector.split(<span class="regexp">/\s+/</span>); <span class="comment">//分割成数组，第一项为parent，第二项为chlid。</span></span><br><span class="line">        <span class="comment">//这里没去考虑特别多的情况了，只是简单的把参数传入。</span></span><br><span class="line">        <span class="keyword">return</span> VQuery(selectorArr[<span class="number">1</span>], VQuery(selectorArr[<span class="number">0</span>])[<span class="number">0</span>])[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//普通情况,只返回获取到的第一个对象</span></span><br><span class="line">        <span class="keyword">return</span> VQuery(selector,<span class="built_in">document</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件">事件</h2><h3 id="事件绑定、事件移除">事件绑定、事件移除</h3><p>我们来继续用封装自己的小jQuery库来实现我们对于JavaScript事件的学习，还是在你的<code>util.js</code>，实现以下函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给一个element绑定一个针对event事件的响应，响应函数为listener</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element, event, listener</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicklistener</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">addEvent($(<span class="string">"#doma"</span>), <span class="string">"click"</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除element对象对于event事件发生时执行listener的响应</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">element, event, listener</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里慕课网的视频讲的特别清楚，就不赘述了。</p>
<ul>
<li><a href="http://www.imooc.com/learn/488" target="_blank" rel="external">慕课网 DOM探索之基础详解篇</a></li>
<li><a href="http://www.imooc.com/view/138" target="_blank" rel="external">慕课网 DOM事件探秘</a>。这一部分，主要看这个。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 事件添加函数</span><br><span class="line"> * @param &#123;object&#125;   element  需要绑定事件的对象</span><br><span class="line"> * @param &#123;string&#125;   event    事件类型</span><br><span class="line"> * @param &#123;function&#125; listener 事件触发执行的函数</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element, event, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123; <span class="comment">//标准</span></span><br><span class="line">        element.addEventListener(event, listener, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123; <span class="comment">//低版本ie</span></span><br><span class="line">        element.attachEvent(<span class="string">"on"</span> + event, listener);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//都不行的情况</span></span><br><span class="line">        element[<span class="string">"on"</span> + event] = listener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 事件移除函数</span><br><span class="line"> * @param &#123;object&#125;   element  需要移除事件的对象</span><br><span class="line"> * @param &#123;string&#125;   event    事件类型</span><br><span class="line"> * @param &#123;function&#125; listener 需要被移除事件函数</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">element, event, listener</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123; <span class="comment">//标准</span></span><br><span class="line">        element.removeEventListener(event, listener, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123; <span class="comment">//低版本ie</span></span><br><span class="line">        element.detachEvent(<span class="string">"on"</span> + event, listener);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//都不行的情况</span></span><br><span class="line">        element[<span class="string">"on"</span> + event] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="click事件、Enter事件"><code>click</code>事件、<code>Enter</code>事件</h3><p>利用上面写好的事件绑定函数就很简单了。</p>
<ul>
<li><code>click</code>事件，这个简单，直接函数封装一层就行。</li>
<li><code>Enter</code>事件，这里主要考察的键盘的事件的触发。<ol>
<li><code>keydown</code>事件：在键盘按下时触发.</li>
<li><code>keyup</code>事件：在按键释放时触发,也就是你按下键盘起来后的事件</li>
<li><code>keypress</code>事件：在敲击按键时触发,我们可以理解为按下并抬起同一个按键</li>
<li><code>keyCode</code>属性：在键盘事件触发时，按下的键的值。值=13时，为<code>Enter</code>键。（需进行兼容处理）</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现对click事件的绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClickEvent</span>(<span class="params">element, listener</span>) </span>&#123;</span><br><span class="line">    addEvent(element, <span class="string">"click"</span>, listener);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现对于按Enter键时的事件绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEnterEvent</span>(<span class="params">element, listener</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    addEvent(element, <span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//兼容性处理。</span></span><br><span class="line">        <span class="keyword">var</span> oEvent = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (oEvent.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">            listener();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们把上面几个函数和$做一下结合，把他们变成$对象的一些方法</p>
<ul>
<li><code>addEvent(element, event, listener) -&gt; $.on(element, event, listener)</code>;</li>
<li><code>removeEvent(element, event, listener) -&gt; $.un(element, event, listener)</code>;</li>
<li><code>addClickEvent(element, listener) -&gt; $.click(element, listener)</code>;</li>
<li><code>addEnterEvent(element, listener) -&gt; $.enter(element, listener)</code>;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在js中万物皆对象(原谅我这么浅显的说），所以实现就特别简单了</span></span><br><span class="line">$.on = <span class="function"><span class="keyword">function</span> (<span class="params">element, type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addEvent(element, type, listener);</span><br><span class="line">&#125;;</span><br><span class="line">$.un = <span class="function"><span class="keyword">function</span> (<span class="params">element, type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeEvent(element, type, listener);</span><br><span class="line">&#125;;</span><br><span class="line">$.click = <span class="function"><span class="keyword">function</span> (<span class="params">element, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addClickEvent(element, listener);</span><br><span class="line">&#125;</span><br><span class="line">$.enter = <span class="function"><span class="keyword">function</span> (<span class="params">element, listener</span>) </span>&#123;</span><br><span class="line">    $.enter addEnterEvent(element, listener);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="事件代理">事件代理</h3><p>接下来考虑这样一个场景，我们需要对一个列表里所有的<code>&lt;li&gt;</code>增加点击事件的监听</p>
<p>我们通过自己写的函数，取到id为list这个ul里面的所有li，然后通过遍历给他们绑定事件。这样我们就不需要一个一个去绑定了。但是看看以下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"item1"</span>&gt;</span>Simon<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"item2"</span>&gt;</span>Kenner<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"item3"</span>&gt;</span>Erik<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span>&gt;</span>Change<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">function clickListener(event) &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#list"</span>).innerHTML = <span class="string">'&lt;li&gt;new item&lt;/li&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    each($(<span class="string">"#list"</span>).getElementsByTagName(<span class="string">'li'</span>), <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        $.click(item, clickListener);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $.click($(<span class="string">"#btn"</span>), renderList);</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<p>我们增加了一个按钮，当点击按钮时，改变list里面的项目，这个时候你再点击一下li，绑定事件不再生效了。那是不是我们每次改变了DOM结构或者内容后，都需要重新绑定事件呢？当然不会这么笨，接下来学习一下事件代理，然后实现下面新的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先简单一些</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegateEvent</span>(<span class="params">element, tag, eventName, listener</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.delegate = delegateEvent;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="comment">// 还是上面那段HTML，实现对list这个ul里面所有li的click事件进行响应</span></span><br><span class="line">$.delegate($(<span class="string">"#list"</span>), <span class="string">"li"</span>, <span class="string">"click"</span>, clickHandle);</span><br></pre></td></tr></table></figure>
<h4 id="实现思路：">实现思路：</h4><p>写到这里，刚好前几天CSS魔法写的《前端进阶之路：点击事件绑定》有提到“事件代理/委托”，不过是直接使用jQuery来实现的。所以地址有兴趣的自己搜索吧-_-。</p>
<ul>
<li>“事件代理” 的本质是利用了事件冒泡的特性。当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。这一过程被称为事件冒泡；</li>
<li><p>这个事件从原始元素开始一直冒泡到DOM树的最上层。任何一个事件的目标元素都是最开始的那个元素，在我们的这个例子中也就是按钮，并且它在我们的元素对象中以属性的形式出现。使用事件代理，我们可以把事件处理器添加到一个元素上，等待一个事件从它的子级元素里冒泡上来，并且可以得知这个事件是从哪个元素开始的。</p>
</li>
<li><p>这里就不细说事件冒泡与事件捕获了（阻止默认行为也会用到，有兴趣去网上找找看），但是要理解事件代理就必须先知道它们。下面这张图可以先看看。（图片来自网络，侵删）</p>
</li>
</ul>
<p><img src="/images/ife/JavaScirpt-Event-capture-Bubble.jpg" alt="事件捕获与事件冒泡原型图"></p>
<ul>
<li>理解了这个之后就没那么难了，只需要进行一点兼容性处理。</li>
<li>参考资料<ul>
<li><a href="http://www.cnblogs.com/Aralic/p/4446030.html" target="_blank" rel="external">javascript事件代理（委托）</a></li>
<li><a href="http://www.cnblogs.com/rubylouvre/archive/2009/08/09/1542174.html" target="_blank" rel="external">JavaScript事件代理</a></li>
</ul>
</li>
</ul>
<h4 id="实现如下：">实现如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 事件代理</span><br><span class="line"> * @param   &#123;HTMLElement&#125;   element   需要进行事件代理的父元素。</span><br><span class="line"> * @param   &#123;string&#125;   tag       需要触发事件的标签名</span><br><span class="line"> * @param   &#123;string&#125;   eventName 触发的事件类型</span><br><span class="line"> * @param   &#123;function&#125; listener  事件执行的函数</span><br><span class="line"> * @returns &#123;[[Type]]&#125; [[Description]]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegateEvent</span>(<span class="params">element, tag, eventName, listener</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">return</span> addEvent(element, eventName, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oEvent = ev || event; <span class="comment">//兼容处理</span></span><br><span class="line">        <span class="keyword">var</span> target = oEvent.target || oEvent.srcElement; <span class="comment">//兼容处理</span></span><br><span class="line">        <span class="keyword">if</span> (target.tagName.toLocaleLowerCase() === tag) &#123;</span><br><span class="line">            listener.call(target, oEvent); <span class="comment">//使用call方法修改执行函数中的this指向，现在this指向触发了事件的HTML节点（可直接使用this.innerHTML返回该节点内容）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.delegate = <span class="function"><span class="keyword">function</span> (<span class="params">element, tag, eventName, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> delegateEvent(element, tag, eventName, listener);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="封装改变">封装改变</h3><p>估计有同学已经开始吐槽了，函数里面一堆$看着晕啊，那么接下来把我们的事件函数做如下：（这里应该是把前面的<code>$.on</code>、<code>$.click</code>、<code>$.un</code>、<code>$.delegate</code>都改写一下。比较简单，就拿一个出来作例子吧。）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和上面的函数一样，原来第一个参数是传入获取到的父HTMLElement对象，现在直接传入选择器名称就行</span></span><br><span class="line">$.delegate = <span class="function"><span class="keyword">function</span> (<span class="params">selector, tag, event, listener</span>) </span>&#123;</span><br><span class="line"><span class="comment">//这里的`$(selector)`，是用的自己封装的选择器函数，愿意的话可以换成标准支持的`document.querySelector()`</span></span><br><span class="line">    <span class="keyword">return</span> delegateEvent($(selector), tag, event, listener);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用示例：</span></span><br><span class="line">$.delegate(<span class="string">'#list'</span>, <span class="string">"li"</span>, <span class="string">"click"</span>, liClicker);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="DOM">DOM</h2><h3 id="添加class、移除class、是否同级元素、获取元素位置">添加class、移除class、是否同级元素、获取元素位置</h3><p>先来一些简单的，在你的<code>util.js</code>中完成以下任务：</p>]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="task0002" scheme="http://guowenfh.github.io/tags/task0002/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[task0002（一）- JavaScript数据类型及语言基础]]></title>
    <link href="http://guowenfh.github.io/2015/12/14/task0002-javascriptBasic/"/>
    <id>http://guowenfh.github.io/2015/12/14/task0002-javascriptBasic/</id>
    <published>2015-12-14T06:45:52.000Z</published>
    <updated>2015-12-14T07:19:43.984Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_第一个页面交互">1. 第一个页面交互</h2><ul>
<li>这里最需要学习的老师的代码中，每一部分功能都由函数控制，没有创建一个全部变量。且最后有一个函数来控制执行代码。这个更多的是思想上的学习吧！</li>
<li>在chrome上相加时，直接两个数拼接到一起了，而不是数值相加。因为输入的值，在获取时，默认是字符串类型的。</li>
<li>在IE8下提示<code>对象不支持“addEventListener”属性或方法</code>。原因是IE8不支持标准的DOM事件绑定函数，它使用<code>attachEvent</code></li>
</ul>
<h3 id="1-1_了解JavaScript是什么">1.1 了解JavaScript是什么</h3><blockquote>
<p>JavaScript，一种直译式脚本语言，是一种动态类型、基于原型的语言，内置支持类。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML网页上使用，用来给HTML网页增加动态功能。然而现在JavaScript也可被用于网络服务器，如Node.js。</p>
</blockquote>
<p>上面是维基百科上的解释。不过让JavaScript流行起来的原因应该是<strong>JavaScript 是目前所有主流浏览器上唯一支持的脚本语言</strong>。下面是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview#What_is_JavaScript.3F" target="_blank" rel="external">MDN对其核心功能的解释</a></p>
<blockquote>
<p>核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如：</p>
<ul>
<li>客户端: JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。</li>
<li>服务器端: JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。</li>
</ul>
</blockquote>
<h3 id="1-2_如何在HTML页面加载JavaScript代码">1.2 如何在HTML页面加载JavaScript代码</h3><p>可以有三种方法加载在HTML页面中引入JavaScript代码：</p>
<ol>
<li>内联式: 在HTML标签的style属性中定义样式，在onclick这样的属性中定义Javascript代码;</li>
<li>嵌入式: 在页面中使用<code>&lt;script&gt;</code>标签定义Javascript代码;</li>
<li>引用外部文件: 在<code>&lt;script&gt;</code>标签中定义<code>src</code>属性引入Javascript文件.</li>
</ol>
<p><strong>注意</strong>：在<code>&lt;head&gt;</code>或者<code>&lt;body&gt;</code>中都可以创建<code>&lt;script&gt;</code>标签来创建或者引入JavaScript代码。</p>
<ul>
<li>搜索一下，为什么我们让你把<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前。<ol>
<li>浏览器在解释HTML页面时，是按照先后顺序的，所在放在前面的<code>JS</code>代码就会先被执行。正是因为这种特性，所以放在<code>&lt;head&gt;</code>中的<code>&lt;script&gt;</code>代码会阻塞页面的渲染。</li>
<li>其实有些JS代码可以放在<code>&lt;head&gt;&lt;/head &gt;</code>之间,比如IE9以下浏览器兼容HTML5标签的js代码，这是一个底层的兼容脚本，不涉及任何页面逻辑。那么它应该放在<code>&lt;head&gt;&lt;/head &gt;</code>间。</li>
<li>新版浏览器<code>&lt;script&gt;</code>标签可以使用<code>defer</code>属性来延迟加载。</li>
</ol>
</li>
</ul>
<p>最简单的不就是把能放在<code>body</code>中的代码放进去吗？扩展阅读中有详细介绍。</p>
<h3 id="1-3_扩展阅读：">1.3 扩展阅读：</h3><ul>
<li><a href="http://javascript.ruanyifeng.com/introduction/history.html" target="_blank" rel="external">JavaScript语言的历史</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html" target="_blank" rel="external">JavaScript 的性能优化：加载和执行</a></li>
</ul>
<h2 id="2-_JavaScript数据类型及语言基础">2. JavaScript数据类型及语言基础</h2><ul>
<li>创建一个JavaScript文件，比如<code>util.js</code>；</li>
<li>实践判断各种数据类型的方法，并在<code>util.js</code>中实现以下方法：</li>
</ul>
<h3 id="2-1_判断各种数据类型的方法">2.1 判断各种数据类型的方法</h3><p>这里比较简单，可以参考我的另一篇博客<a href="http://guowenfh.github.io/2015/11/30/2015-12-01-javascript-type/">JavaScript类型识别</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断arr是否为一个数组，返回一个bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (arr) === <span class="string">"object"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断fn是否为一个函数，返回一个bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (fn) === <span class="string">"function"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在ECMAScript5中，判断数组类型可以直接使用<code>Array.isArray()</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([]); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2_值类型和引用类型的区别-各种对象的读取、遍历方式">2.2 值类型和引用类型的区别.各种对象的读取、遍历方式</h3><ul>
<li>了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在<code>util.js</code>中实现以下方法：</li>
</ul>
<h4 id="2-2-1_深度克隆">2.2.1 深度克隆</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝</span></span><br><span class="line"><span class="comment">// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例：</span></span><br><span class="line"><span class="keyword">var</span> srcObj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        b1: [<span class="string">"hello"</span>, <span class="string">"hi"</span>],</span><br><span class="line">        b2: <span class="string">"JavaScript"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> abObj = srcObj;</span><br><span class="line"><span class="keyword">var</span> tarObj = cloneObject(srcObj);</span><br><span class="line"></span><br><span class="line">srcObj.a = <span class="number">2</span>;</span><br><span class="line">srcObj.b.b1[<span class="number">0</span>] = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(abObj.a);</span><br><span class="line"><span class="built_in">console</span>.log(abObj.b.b1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tarObj.a);      <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(tarObj.b.b1[<span class="number">0</span>]);    <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure>
<p><strong>思路如下</strong></p>
<ol>
<li>题目考的主要是有些对象的使用<code>=</code>直接赋值，并不是真正的复制，而是将一个新的变量指向了当前对象，共享同一个地址。在修改原对象时，新对象也会跟着改变。</li>
<li>经过测试，数字、字符串、布尔、日期、可以直接赋值，修改不会产生影响。所以就思考了在使用<code>typeof</code>值为对象或者是原始类型时的情况。且对象类型为<code>Date</code>对象时，也使用直接赋值的方式。</li>
<li>再考虑对象类型为<code>Array</code>或者<code>Object</code>的情况。对于结果声明其类型。</li>
<li>接着往下走，在遍历对象时，只考虑其自身的属性，而不考虑继承来属性。若其自身值还是对象，那么 就递归调用，进一步解析、赋值，否则直接赋值。</li>
</ol>
<p><strong>实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result ;<span class="comment">//返回的复制后的结果。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(src)===<span class="string">"object"</span>)&#123;</span><br><span class="line">        <span class="comment">//对象为日期对象时也直接赋值。</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(src)===<span class="string">"[object Date]"</span>)&#123;</span><br><span class="line">            result = src;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断对象的类型是Array还是Object，结果类型更改。</span></span><br><span class="line">            result = (<span class="built_in">Object</span>.prototype.toString.call(src)===<span class="string">"[object Array]"</span>)? [] : &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> src)&#123;</span><br><span class="line">                <span class="keyword">if</span> (src.hasOwnProperty(i)) &#123; <span class="comment">//排除继承属性</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> src[i] === <span class="string">"object"</span>) &#123;</span><br><span class="line">                        result[i] = cloneObject(src[i]); <span class="comment">//递归赋值</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result[i] = src[i]; <span class="comment">//直接赋值</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//对于原始类型直接赋值。</span></span><br><span class="line">        result = src;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3数组、字符串、数字等相关方法">2.3数组、字符串、数字等相关方法</h3><ul>
<li>学习数组、字符串、数字等相关方法，在<code>util.js</code>中实现以下函数</li>
</ul>
<h4 id="2-3-1_数组去重操作">2.3.1  数组去重操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = uniqArray(a);</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [1, 3, 5, 7]</span></span><br></pre></td></tr></table></figure>
<p><strong>思路如下：</strong></p>
<ol>
<li>新建一下新数组</li>
<li>循环原数组</li>
<li>判断新数组内元素,原数组是否含有.含有则跳过<ul>
<li>这里使用了数组的<code>indexOf</code>方法，找到某个元素在数组中的索引。简化了查找过程，若使用最简单的遍历寻找的话需要嵌套循环，是这样的，先在循环中取原数组的值，再循环在新数组中查找，若有相等的情况就不添加。（这是我的第一想法，显然比现在复杂很多）. </li>
<li>参看来自MDN的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array对象</a>.里面介绍了一下数组的方法.</li>
</ul>
</li>
<li>返回新数组.</li>
</ol>
<p><strong>实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">var</span> result = []; <span class="comment">//创建一个新数组。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.indexOf(arr[i]) === -<span class="number">1</span>) &#123; <span class="comment">//查找是否已经含有该元素</span></span><br><span class="line">            result.push(arr[i]); <span class="comment">//添加到新数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//返回新数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2_实现trim函数，去除字符串首尾空白">2.3.2 实现<code>trim</code>函数，去除字符串首尾空白</h4><ul>
<li>实现一个简单的<code>trim</code>函数，用于去除一个字符串，头部和尾部的空白字符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.字符串查找</span></span><br><span class="line"><span class="comment">// 假定空白字符只有半角空格、Tab</span></span><br><span class="line"><span class="comment">// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.正则</span></span><br><span class="line"><span class="comment">// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim</span></span><br><span class="line"><span class="comment">// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串</span></span><br><span class="line"><span class="comment">// 尝试使用一行简洁的正则表达式完成该题目</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'   hi!  '</span>;</span><br><span class="line">str = trim(str);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 'hi!'</span></span><br></pre></td></tr></table></figure>
<p><strong>实现如下:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.字符串查找</span></span><br><span class="line"><span class="comment">//这里就是利用两个循环，找到头尾第一个不是空格且不是tab符的元素。记录它们的索引，之后截取字符串。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, il = str.length; i &lt; il; i++) &#123; <span class="comment">//从头查找</span></span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">" "</span> &amp;&amp; str[i] != <span class="string">"\t"</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//查找到第一个不为空格及tab符的元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = str.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123; <span class="comment">//从尾查找</span></span><br><span class="line">        <span class="keyword">if</span> (str[j] != <span class="string">" "</span> &amp;&amp; str[j] != <span class="string">"\t"</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    result = str.slice(i, j + <span class="number">1</span>); <span class="comment">//截取需要的字符串。</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.正则</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    result = str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>); <span class="comment">//使用正则进行字符串替换</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-3_遍历数组，对每一个元素执行fn函数">2.3.3 遍历数组，对每一个元素执行fn函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中fn函数可以接受两个参数：item和index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'java'</span>, <span class="string">'c'</span>, <span class="string">'php'</span>, <span class="string">'html'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line">each(arr, output);  <span class="comment">// java, c, php, html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'java'</span>, <span class="string">'c'</span>, <span class="string">'php'</span>, <span class="string">'html'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">': '</span> + item)</span><br><span class="line">&#125;</span><br><span class="line">each(arr, output);  <span class="comment">// 0:java, 1:c, 2:php, 3:html</span></span><br></pre></td></tr></table></figure>
<p><strong>思路如下:</strong></p>
<ol>
<li>这里的实现有点类似ECMA5中数组的<code>forEach()</code>方法</li>
<li>由示例可知:item为必须参数,index为可选参数.</li>
<li>且item为数组项,index为数组索引.</li>
<li>这样就简单了,循环传参.</li>
</ol>
<p><strong>实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;<span class="comment">//遍历传参</span></span><br><span class="line">        fn(arr[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-4_获取对象里第一层元素的数量，返回整数">2.3.4 获取对象里第一层元素的数量，返回整数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个对象里面第一层元素的数量，返回一个整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectLength</span>(<span class="params">obj</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">3</span>,</span><br><span class="line">        c2: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getObjectLength(obj)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p><strong>实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用for in遍历时,直接获取到的就是第一层的结果</span></span><br><span class="line"><span class="comment">//排除继承来的属性,使用外部变量保存循环次数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectLength</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式">正则表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为邮箱地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">emailStr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为手机号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobilePhone</span>(<span class="params">phone</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路</strong></p>
<blockquote>
<p>这里参考我对于正则表达式入门的两篇博客</p>
<ul>
<li><a href="http://guowenfh.github.io/2015/12/01/Regexp-basis/">正则表达式-理论基础篇</a></li>
<li><a href="http://guowenfh.github.io/2015/12/14/Regexp-basisCombat/">正则表达式-基础实战篇</a></li>
</ul>
</blockquote>
<ul>
<li>手机号码的匹配<ol>
<li>这里匹配的情况是最简单的情况，并没有特别完美，比如限制开头第二位数字的范围：188，158通过，而123,191，不通过等等。</li>
<li>可利用多选分支，例如：<code>/^1[3|5][0-9]{9}$|^18\d{9}$/</code>。不过现在虚拟运营商的加入，号码段变多了，所以直接用最简单的方法，也没事。 </li>
</ol>
</li>
<li>邮箱的匹配<ol>
<li>在@前能出现哪些东西？这里使用<code>(\w+\.)*</code>来匹配出现<code>.</code>的情况，表示出现0次或多次因为<code>.</code>后不能紧跟@，所以后面紧跟<code>\w+</code>匹配普通的字母数字情况。</li>
<li>@后出现的邮箱后缀并不固定所以使用<code>\w+</code>来匹配。</li>
<li>最后考虑域名结尾的级联情况所以用<code>(\.\w+)+</code>。</li>
</ol>
</li>
</ul>
<p><strong>实现如下:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为邮箱地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">emailStr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^(\w+\.)*\w+@\w+(\.\w+)+$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(emailStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为手机号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobilePhone</span>(<span class="params">phone</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^1\d&#123;10&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(phone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4_参考资料">2.4 参考资料</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">JavaScript 数据结构</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">MDN Array</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="external">MDN String</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="external">MDN Number</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="external">MDN 正则</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_第一个页面交互">1. 第一个页面交互</h2><ul>
<li>这里最需要学习的老师的代码中，每一部分功能都由函数控制，没有创建一个全部变量。且最后有一个函数来控制执行代码。这个更多的是思想上的学习吧！</li>
<li>在chrome上相加时，直接两个数]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="task0002" scheme="http://guowenfh.github.io/tags/task0002/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式-基础实战篇]]></title>
    <link href="http://guowenfh.github.io/2015/12/14/Regexp-basisCombat/"/>
    <id>http://guowenfh.github.io/2015/12/14/Regexp-basisCombat/</id>
    <published>2015-12-14T03:34:31.000Z</published>
    <updated>2015-12-14T06:26:15.963Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>在理论基础篇之后呢,应该就对正则表达式有了一些了解.比如说如何去创建一个正则表达式以及其中的匹配规则等等.那么就开始正则表达式的实战吧!<br>建议把所有的实例在console窗口敲一遍.例子中展现的只是一部分,配合《正则表达式-理论基础篇》<a href="http://segmentfault.com/a/1190000003977848" target="_blank" rel="external">SF地址</a>、<a href="http://guowenfh.github.io/2015/12/01/Regexp-basis/">原址</a>使用效果更佳哦!</p>
</blockquote>
<h2 id="一个手机号码匹配的进化历程">一个手机号码匹配的进化历程</h2><blockquote>
<p>实例代码依托于:<code>RegExpObj.test(String)</code>，其含义是测试正则表达式与指定字符串是否匹配。成功匹配返回<code>true</code></p>
</blockquote>
<h3 id="第一阶段-字符直接量:匹配自身">第一阶段-字符直接量:匹配自身</h3><blockquote>
<p>先假设一个手机号码为13762571094.</p>
</blockquote>
<ul>
<li><strong>最初形态</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">13762571094</span>/.test(<span class="string">"13783281094"</span>);<span class="comment">//false</span></span><br><span class="line">/<span class="number">13762571094</span>/.test(<span class="string">"13762571094"</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">/<span class="number">13762571094</span>/.test(<span class="string">"ui13762571094dd"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//正则表达式在匹配时,只要输出匹配内容就返回true,不考虑前面的ui和后面的dd</span></span><br><span class="line"><span class="comment">//最后这种情况显然不是我们想要的.那么就进入下一阶段的实践吧.</span></span><br></pre></td></tr></table></figure>
<h3 id="第二阶段-锚点:指定匹配位置">第二阶段-锚点:指定匹配位置</h3><ul>
<li><code>^</code>匹配起始位置</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^http:/.test("http://www.163.com");//true</span><br><span class="line">/^http:/.test("ahttp://www.163.com");//false</span><br><span class="line">/^http:/.test("https://www.163.com");//false</span><br></pre></td></tr></table></figure>
<ul>
<li><code>$</code>匹配结尾位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/.jpg$/.test(<span class="string">"1.jpg"</span>);<span class="comment">//true</span></span><br><span class="line">/.jpg$/.test(<span class="string">"1.jpg png"</span>);<span class="comment">//false</span></span><br><span class="line">/.jpg$/.test(<span class="string">"1.png"</span>);<span class="comment">//false</span></span><br><span class="line">/.jpg$/.test(<span class="string">"regexp.png"</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>\b</code>:匹配单词边界</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/\bis\b/.test(<span class="string">"this"</span>);<span class="comment">//false</span></span><br><span class="line">/\bis\b/.test(<span class="string">"that is reg"</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在了解锚点之后我们的正则就有了<strong>第一次进化</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">13762571094</span>$/.test(<span class="string">"13762571094"</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">/^<span class="number">13762571094</span>$/.test(<span class="string">"ui13762571094dd"</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//此时这个程序就能正确识别头尾的字符了.下面我们看看</span></span><br><span class="line">/^<span class="number">13762571094</span>$/.test(<span class="string">"13712345674"</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">/*在试过了多个号码后发现,这个正则只能识别这个标准的手机号码.</span><br><span class="line">这显然不是我们想要的,而不是识别一个手机号码的格式.</span><br><span class="line">在下一阶段我们将实现一个手机号码的匹配.*/</span></span><br></pre></td></tr></table></figure>
<h3 id="第三阶段-字符类:匹配一类字符中的一个">第三阶段-字符类:匹配一类字符中的一个</h3><ul>
<li><code>[abc]</code>:a或b或c。<code>[0-9]</code>:一个数字</li>
<li><code>[^0-9]</code>:非数字的一个字符。<code>[a-z]</code>:一个字母</li>
<li><code>.</code>    :任一字符(换行符除外)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>-<span class="number">9</span>]/.test(<span class="string">"123"</span>)<span class="comment">//true</span></span><br><span class="line">/[<span class="number">0</span>-<span class="number">9</span>]/.test(<span class="string">"asd"</span>)<span class="comment">//false</span></span><br><span class="line">/[^<span class="number">0</span>-<span class="number">9</span>]/.test(<span class="string">"asd"</span>)<span class="comment">//true</span></span><br><span class="line">/[a-z]/.test(<span class="string">"asd"</span>)<span class="comment">//true</span></span><br><span class="line">/./.test(<span class="string">"allen"</span>)<span class="comment">//true</span></span><br><span class="line">/./.test(<span class="string">"12"</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>了解了字符类后,我们就可以进行<strong>第二次进化(50%)</strong>。此时就能匹配一个手机号码啦！</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]$/.test(<span class="string">"13762571094"</span>);<span class="comment">//true</span></span><br><span class="line">/^<span class="number">1</span>[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]$/.test(<span class="string">"13712345678"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//是不是感觉代码太长了呢?[0-9]足足5个字符呢,为了省力,当然不会就这样算了.继续向下看吧</span></span><br></pre></td></tr></table></figure>
<h4 id="元字符-具有特殊意义的字符">元字符-具有特殊意义的字符</h4><blockquote>
<p>其实我们已经在前面使用过它啦</p>
</blockquote>
<ul>
<li><code>^</code>、<code>$</code>、<code>\b</code>。</li>
<li><code>\d</code>:<code>[0-9]</code>。<code>\D</code>:<code>[^\d]</code></li>
<li><code>\s</code>:空白符。<code>\S</code>:<code>[^\s]</code></li>
<li><code>\w</code>:<code>[A-Za-z0-9_]</code>。<code>\W</code>:<code>[^\w]</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/\d/.test(<span class="string">"123"</span>);<span class="comment">//true</span></span><br><span class="line">/\d/.test(<span class="string">"1dsf"</span>);<span class="comment">//true</span></span><br><span class="line">/\D/.test(<span class="string">"1dsf"</span>);<span class="comment">//true</span></span><br><span class="line">/\D/.test(<span class="string">"123"</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//自己再多去实验一些例子吧</span></span><br></pre></td></tr></table></figure>
<ul>
<li>了解了元字符后我们就可以进行<strong>第二次进化(100%)</strong>了。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>\d\d\d\d\d\d\d\d\d\d$/.test(<span class="string">"13762571094"</span>);<span class="comment">//true</span></span><br><span class="line">/^<span class="number">1</span>\d\d\d\d\d\d\d\d\d\d$/.test(<span class="string">"13712345678"</span>);<span class="comment">//true</span></span><br><span class="line">/^<span class="number">1</span>\d\d\d\d\d\d\d\d\d\d$/.test(<span class="string">"1376257109x"</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//是不是感觉代码比刚刚短了很多了呢?但这还是不够,什么事情都阻止不了我想偷懒的心,继续学习吧.</span></span><br></pre></td></tr></table></figure>
<h3 id="第四阶段-量词:出现的次数">第四阶段-量词:出现的次数</h3><ul>
<li><code>{n,m}</code>:n到m次。<code>?</code>：<code>{0,1}</code></li>
<li><code>+</code>:<code>{1,}</code>。<code>*</code>:<code>{0,}</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/\d*/.test("abc");//true</span><br><span class="line">/\d+/.test("abc");//false</span><br><span class="line">/\d+/.test("1abc");//true</span><br><span class="line">/^https?:/.test("http://www.163.com");//true</span><br><span class="line">/^https?:/.test("https://www.163.com");//true</span><br><span class="line">/^https?:/.test("httpss://www.163.com");//false</span><br></pre></td></tr></table></figure>
<ul>
<li>此时我们的匹配手机号码的正则表达式就到了<strong>最后阶段</strong>了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>\d&#123;<span class="number">10</span>&#125;$/.test(<span class="string">"1376257109x"</span>);<span class="comment">//false</span></span><br><span class="line">/^<span class="number">1</span>\d&#123;<span class="number">10</span>&#125;$/.test(<span class="string">"13762571094"</span>);<span class="comment">//true</span></span><br><span class="line">/^<span class="number">1</span>\d&#123;<span class="number">10</span>&#125;$/.test(<span class="string">"13712345678"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//到这里手机号码就匹配完成了!</span></span><br></pre></td></tr></table></figure>
<h3 id="需要注意的点">需要注意的点</h3><ul>
<li>这里匹配的情况是最简单的情况，并没有特别完美，比如限制开头第二位数字的范围：188，158通过，而123,191，不通过等等。</li>
<li>可利用多选分支，例如：<code>/^1[3|5][0-9]{9}$|^18\d{9}$/</code>。不过现在虚拟运营商的加入，号码段变多了，所以直接用最简单的方法，也没事。</li>
</ul>
<h2 id="邮箱的匹配">邮箱的匹配</h2><p><code>/thi(c|n)k/</code>===<code>thi[cn]k</code></p>
<p><code>\.(png|jpg|jpeg|gif)$</code>:检测一个文件是不是图片文件.</p>
<h3 id="多选分支:网易邮箱的匹配">多选分支:网易邮箱的匹配</h3><h4 id="元字符的问题">元字符的问题</h4><p><code>/^http:/\/\/</code>..<code>/@163\.com$/</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/http:\/\<span class="comment">//.test("http://www.163.com");//true</span></span><br><span class="line">/@<span class="number">163.</span>com$/.test(<span class="string">"abc@163.com"</span>);<span class="comment">//true</span></span><br><span class="line">/@<span class="number">163.</span>com$/.test(<span class="string">"abc@163acom"</span>);<span class="comment">//true</span></span><br><span class="line">/@<span class="number">163</span>\.com$/.test(<span class="string">"abc@163.com"</span>);<span class="comment">//true</span></span><br><span class="line">/@<span class="number">163</span>\.com$/.test(<span class="string">"abc@163acom"</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h4 id="使用多选分支。">使用多选分支。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/(\w+)@(<span class="number">163</span>|<span class="number">126</span>|<span class="number">188</span>)\.com$/.test(<span class="string">"guo啊圣诞节了@163acom"</span>)<span class="comment">//false</span></span><br><span class="line">/(\w+)@(<span class="number">163</span>|<span class="number">126</span>|<span class="number">188</span>)\.com$/.test(<span class="string">"guodong111@163acom"</span>)<span class="comment">//false</span></span><br><span class="line">/(\w+)@(<span class="number">163</span>|<span class="number">126</span>|<span class="number">188</span>)\.com$/.test(<span class="string">"guodong111@163.com"</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="分组-邮箱的匹配">分组-邮箱的匹配</h3><p>这里需要思考几个问题.</p>
<ol>
<li>在@前能出现哪些东西？这里使用<code>(\w+\.)*</code>来匹配出现<code>.</code>的情况，表示出现0次或多次因为<code>.</code>后不能紧跟@，所以后面紧跟<code>\w+</code>匹配普通的字母数字情况。</li>
<li>@后出现的邮箱后缀并不固定所以使用<code>\w+</code>来匹配。</li>
<li>最后考虑域名结尾的级联情况所以用<code>(\.\w+)+</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^(\w+\.)*\w+@\w+(\.\w+)+$/.test(<span class="string">"guo啊圣诞节了@163acom"</span>)<span class="comment">//false</span></span><br><span class="line">/^(\w+\.)*\w+@\w+(\.\w+)+$/.test(<span class="string">"guodong111@163acom"</span>)<span class="comment">//false</span></span><br><span class="line">/^(\w+\.)*\w+@\w+(\.\w+)+$/.test(<span class="string">"guodong111@163.com"</span>)<span class="comment">//true</span></span><br><span class="line">/^(\w+\.)*\w+@\w+(\.\w+)+$/.test(<span class="string">"guodong111@yea.com.cn"</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="捕获">捕获</h2><ul>
<li>保存匹配到的字符串,日后再用</li>
<li><code>()</code>:捕获<code>/(\w+)@(163|126|188)\.com$/</code></li>
<li>(?:):不捕获<code>/(\w+)@(?:163|126|188)\.com$/</code></li>
<li>使用:<ul>
<li>$1,$2,…</li>
<li>api参数或返回值</li>
</ul>
</li>
</ul>
<h3 id="获取匹配的字符串:String-match(regexp)">获取匹配的字符串:<code>String.match(regexp)</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://blog.163.com/album?id=1#comment'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(https?:)\/\/([^\/]+)(\/[^\?]*)?(\?[^#]*)?(#.*)?$/</span>;</span><br><span class="line"><span class="comment">// var reg = /^(https?:)\/\/([^\/]+)([^\?]*)([^#]*)(.*)$///与上面的正则效果相同.;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = url.match(reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr[0]为原字符串."http://blog.163.com/album?id=1#comment"</span></span><br><span class="line"><span class="comment">//对应括号所匹配的字符</span></span><br><span class="line"><span class="keyword">var</span> protocol= arr[<span class="number">1</span>]<span class="comment">//"http:"</span></span><br><span class="line"><span class="keyword">var</span> host= arr[<span class="number">2</span>]<span class="comment">//"blog.163.com"</span></span><br><span class="line"><span class="keyword">var</span> pathname= arr[<span class="number">3</span>]<span class="comment">//"/album"</span></span><br><span class="line"><span class="keyword">var</span> search= arr[<span class="number">4</span>]<span class="comment">//"?id=1"</span></span><br><span class="line"><span class="keyword">var</span> hash= arr[<span class="number">5</span>]<span class="comment">//"#comment"</span></span><br></pre></td></tr></table></figure>
<h3 id="替换一个子串:str-replace(regexp/substr,replacement)">替换一个子串:<code>str.replace(regexp/substr,replacement)</code></h3><ul>
<li>第二个参数是字符时</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"the price of tomato is 5, the price of apple is 10."</span></span><br><span class="line">str.replace(<span class="regexp">/(\d+)/</span>,<span class="string">"$1.00"</span>)</span><br><span class="line"><span class="string">"the price of tomato is 5.00, the price of apple is 10."</span></span><br><span class="line"><span class="comment">//使用全局模式</span></span><br><span class="line">str.replace(<span class="regexp">/(\d+)/g</span>,<span class="string">"$1.00"</span>)</span><br><span class="line"><span class="string">"the price of tomato is 5.00, the price of apple is 10.00."</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二个参数是函数时</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;label&gt;网址:&lt;/label&gt;&lt;input placeholder="以http://起始"&gt;'</span>;</span><br><span class="line">html = html.replace(<span class="regexp">/[&lt;&gt;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m0</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">switch</span>(m0)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'&amp;lt;'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'&amp;gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//处理后输出结果为：</span></span><br><span class="line"><span class="built_in">console</span>.log(html);<span class="comment">//&amp;lt;label&amp;gt;网址:&amp;lt;/label&amp;gt;&amp;lt;input placeholder="以http://起始"&amp;gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="更强大的检索_-_regexpObj-exec(str)">更强大的检索 - <code>regexpObj.exec(str)</code></h3><ul>
<li>更详尽的结果:index</li>
<li>过程的状态:lastIndex</li>
<li>一般用不到，就不详细说明了，有兴趣的自己去了解一下。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>在理论基础篇之后呢,应该就对正则表达式有了一些了解.比如说如何去创建一个正则表达式以及其中的匹配规则等等.那么就开始正则表达式的实战吧!<br>建议把所有的实例在console窗口敲一遍.例子中展现的只是一部分,配合《正则表达式-理论基础篇》<a ]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="正则表达式" scheme="http://guowenfh.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式-理论基础篇]]></title>
    <link href="http://guowenfh.github.io/2015/12/01/Regexp-basis/"/>
    <id>http://guowenfh.github.io/2015/12/01/Regexp-basis/</id>
    <published>2015-12-01T07:28:12.000Z</published>
    <updated>2015-12-14T06:39:09.177Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>什么是正则表达式?<br>可以称作规则一个描述字符模式的对象，正则表达式中的字母和数字，都是按照字面含义进行匹配的。<strong>强大的字符串匹配工具</strong></p>
</li>
<li><p>如何建立一个正则表达式？</p>
</li>
</ul>
<ol>
<li>使用RegExp()构造函数来创建RegExp对象</li>
<li>特殊的直接量语法来创建，定义为包含在一对斜杠（/）之间的字符</li>
</ol>
<p>例：<code>var reg = /s$/;</code>  , <code>var reg = new RegExp(s$);</code><br>两者效果完全相同，用来匹配所有以字母“s”结尾的字符串。</p>
<h2 id="“文本模式”的正则表达式语法">“文本模式”的正则表达式语法</h2><h3 id="1-直接量字符">1.直接量字符</h3><blockquote>
<p>非字母的字符匹配，这些字符需要通过反斜线（\）作前缀进行转义.</p>
</blockquote>
<table>
<thead>
<tr>
<th>字 符</th>
<th>匹 配</th>
</tr>
</thead>
<tbody>
<tr>
<td>字母和数字字符</td>
<td>自身</td>
</tr>
<tr>
<td><code>\o</code></td>
<td>NUL字符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>垂直制表符</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>换页符</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车符</td>
</tr>
<tr>
<td><code>\xnn</code></td>
<td>由十六进制数nn指定的拉丁字符,例:<code>\x0A</code>等价于<code>\n</code></td>
</tr>
<tr>
<td><code>\uxxxx</code></td>
<td>由十六进制数xxxx指定的unicode字符,例:<code>\u0009</code>等价于<code>\t</code></td>
</tr>
<tr>
<td><code>\cX</code></td>
<td>控制字符^X,例:<code>\cJ</code>等价于换行符<code>\n</code></td>
</tr>
</tbody>
</table>
<ul>
<li>具有特殊含义的标点符号:</li>
</ul>
<p><code>^</code>, <code>$</code>, <code>.</code>, <code>*</code>, <code>+</code>, <code>?</code>, <code>=</code>, <code>!</code>, <code>:</code>, <code>|</code>, <code>\</code>, <code>/</code>,<code>(</code>,<code>)</code>,<code>[</code>,<code>]</code>,<code>{</code>, <code>}</code> </p>
<p>想在正则表达式中使用这些字符的直接量进行匹配，则必须使用前缀”\”，其他标点符号(比如@和引号)无特殊含义，在正则表达式中按照字面含义进行匹配。</p>
<h3 id="2-字符类-">2.字符类.</h3><p>方括号,或,范围</p>
<blockquote>
<p>将直接量字符单独放进方括号内就组成了字符类。一个字符类可以匹配它包含的任意字符。<strong>字符类可以使用连字符来表示字符范围。</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>字 符</th>
<th>含 义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[...]</code></td>
<td>方括号内的任意字符</td>
</tr>
<tr>
<td><code>[^...]</code></td>
<td>不在方括号内的任意字符</td>
</tr>
<tr>
<td><code>.</code></td>
<td>除换行符合其他unicode行终止符之外的任意字符</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>任何ASCII符组成的的单词,等同<code>[a-zA-Z0-9]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td>任何不是ASCII符组成的的单词,等同<code>[^a-zA-Z0-9]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>任何unicode空白字符</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>任何非unicode空白符的字符,注意<code>\W</code>与<code>\s</code>不同</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>任何ASCII数字等价于<code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td>除了ASCII数字之外的任何字符,等价于<code>[^0-9]</code></td>
</tr>
<tr>
<td><code>[\b]</code></td>
<td>退格直接量(特例)</td>
</tr>
</tbody>
</table>
<ul>
<li>例:<ul>
<li><code>/[a,b,c]/</code>:表示和字母”a”,”b”,”c”中的任意一个都匹配</li>
<li><code>/[a-z]/</code>:匹配拉丁字母表中的小写字母</li>
<li><code>/[/s/d]/</code>:匹配任意空白符或数字</li>
</ul>
</li>
</ul>
<h3 id="3-_重复">3. 重复</h3><blockquote>
<p>用以指定字符重复的标记</p>
</blockquote>
<table>
<thead>
<tr>
<th>字 符</th>
<th>含 义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>{n,m}</code></td>
<td>匹配前一项至少n次,但不能超过m次</td>
</tr>
<tr>
<td><code>{n,}</code></td>
<td>匹配前一项n次或者更多次</td>
</tr>
<tr>
<td><code>{n}</code></td>
<td>匹配前一项n次</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前一项0次或者1次(也就是前一项是可选的,等价于{0,1})</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前一项1次或者多次(等价于{1,})</td>
</tr>
<tr>
<td><code>*</code></td>
<td>匹配前一项0次或者多次,等价于{0,}</td>
</tr>
</tbody>
</table>
<ul>
<li><p>例:</p>
<ul>
<li><code>/\d{2,4}/</code>:匹配2-4个数字。</li>
<li><code>/\w{3}\d?/</code>:精确匹配三个单词和一个可选的数字。</li>
<li><code>/\s+java\s+/</code>:匹配前后有1个或多个空格的字符串”java”</li>
<li><code>/[^(]*/</code>:匹配0个或多个非左括号的字符(这里实际上能与<code>&quot;(&quot;</code>匹配)</li>
</ul>
</li>
<li><p><strong>在使用<code>&quot;*&quot;</code>,和<code>&quot;?&quot;</code>时要注意,由于这些字符能匹配0个字符,因此它们允许什么都不匹配</strong>，例:</p>
<ul>
<li><code>/a*/</code>能匹配字符串”bbbb”，因其含有0个a。</li>
</ul>
</li>
<li><strong>上表中列出的匹配字符为”贪婪的”匹配</strong>，它总是尽可能多地匹配,且允许后续的正则表达式继续匹配。</li>
<li>非贪婪匹配,只需在待匹配的字符后跟随一个问号即可,<code>&quot;?&quot;</code>,<code>+?</code>,<code>*?</code>或<code>{1,5}?</code>。例:<ul>
<li><code>/a+/</code>:匹配”aaa”时,三个字符都被匹配,</li>
<li><code>/a+?/</code>:匹配”aaa”时,因其尽可能少的匹配,只能匹配第一个a</li>
</ul>
</li>
</ul>
<h3 id="4-选择-分组和引用">4.选择-分组和引用</h3><blockquote>
<p>包括：指定选择项，自表达式分组，和引用前一子表达式的特殊字符</p>
</blockquote>
<ul>
<li>选择项的尝试匹配次序是从左到右，直到发现匹配项，若左边成功匹配就忽略右边的项。</li>
<li>正则表达式中圆括号的作用：<ol>
<li>把单独的项组成子表达式，以便于可以像处理独立单元一样，用<code>\|</code>,<code>*</code>,<code>+</code>或者<code>?</code>等等来对单元内的项进行处理</li>
<li>在完整的模式中定义子模式</li>
<li>允许在同一正则表达式的后部,引用前面的子表达式</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th>字 符</th>
<th>含 义</th>
</tr>
</thead>
<tbody>
<tr>
<td>“&#124;”</td>
<td>“&#124;”选择,匹配的是该符号左边的子表达式或右边的子表达式</td>
</tr>
<tr>
<td><code>(...)</code></td>
<td>组合,将几个项组合成为一个单元,这个单元可通过”&#124;”,<code>*</code>,<code>+</code>或者<code>?</code>等符号,加以修饰,而且可以记住和这个相匹配的字符串以供以后的引用使用</td>
</tr>
<tr>
<td><code>(?:..)</code></td>
<td>只组合,把项组合到一个单元,但不记忆与该组相匹配的字符</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>和第n个分组第一次匹配的字符相匹配,组是圆括号中的子表达式(也有可能嵌套的),组索引是从左到右的左括号数,”(?:形式的分组不编码”</td>
</tr>
</tbody>
</table>
<ul>
<li>例:<ul>
<li><code>/ab|cd|ef/</code>:可以匹配”ab”,也可以匹配”cd”,还可以匹配”ef”.</li>
<li><code>/\d{3}|[a-z]{4}/</code>:可以匹配3个数字,或者4个小写字母.</li>
<li><code>(/[a-z]+(\d+)/)</code>:匹配一个或多个小写字母后跟随了一位或多位数字,使用括号包裹后,可以从检索到的匹配中抽取数字了.</li>
</ul>
</li>
</ul>
<h3 id="5-指定匹配位置">5.指定匹配位置</h3><blockquote>
<p>我们称这些元素为正则表达式的锚,它们将模式定位在搜索字符串的特定位置上.</p>
</blockquote>
<table>
<thead>
<tr>
<th>字 符</th>
<th>含 义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>匹配字符串的开头,在多行检索中,匹配一行的开头</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配字符串的结尾,在多行检索中,匹配一行的结尾</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个单词边界,简言之,就是位于字符\w和\W之间的位置,或位于字符\w和字符串的开头或结尾之间的位置(需要注意:[\b]匹配的是退格符)</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>匹配非单词边界的位置</td>
</tr>
</tbody>
</table>
<ul>
<li>例:<ul>
<li><code>/^JavaScript$/</code>:匹配”JavaScript”单词</li>
<li><code>/\B[Ss]cript/</code>:与”JavaScript”和”/postscript”匹配,但不与”script”与”Script”.</li>
</ul>
</li>
</ul>
<h3 id="6-修饰符">6.修饰符</h3><blockquote>
<p>说明高级匹配的规则,放在”/“符号之外,第二条斜线后</p>
</blockquote>
<table>
<thead>
<tr>
<th>字 符</th>
<th>含 义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>执行不区分大小写的匹配</td>
</tr>
<tr>
<td><code>g</code></td>
<td>执行一个全局匹配,简言之,就是要找到所有的匹配,而不是在找到一个之后就停止</td>
</tr>
<tr>
<td><code>m</code></td>
<td>多行匹配模式,^匹配一行的开头和字符串的开头,$匹配行的结束和字符串的结束</td>
</tr>
</tbody>
</table>
<ul>
<li>例:<ul>
<li><code>/java$/im</code>:可以匹配”java”也可以匹配”Java\nis fun”</li>
</ul>
</li>
</ul>
<h2 id="用于模式匹配的string方法">用于模式匹配的string方法</h2><blockquote>
<p>正则表达式的作用就是用来解析字符串</p>
</blockquote>
<h3 id="1-_search():">1. <code>search()</code>:</h3><ul>
<li>查找字符串,接受一个参数为正则表达式,返回返回一个与之匹配的子串的起始位置,若未找到返回-1.</li>
<li>例: <code>JavaScript.search(/script/i);//返回4</code></li>
<li><code>search()</code>方法不支持全局属性检索,所以会忽略修饰符g</li>
</ul>
<h3 id="2-_replace():">2. <code>replace()</code>:</h3><ul>
<li>用以执行检索与替换操作,接受两个参数,第一个参数是一个正则,第二个是要进行替换的字符串</li>
<li>若第一个参数是字符串,<code>replace()</code>则会直接搜索这个字符串</li>
<li>若替换字符串中出现了<strong>$加数字</strong>,那么<code>replace()</code>将用与指定的子表达式相匹配的文本来替换这两个字符.</li>
</ul>
<p><strong>例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text.replace(<span class="regexp">/javascript/gi</span>,<span class="string">"JavaScript"</span>);<span class="comment">//将所有不区分大小写的javascript都替换成,大小写正确的JavaScript.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一段引用文本起始于引号,结束与引号.</span></span><br><span class="line"><span class="comment">//中间的内容区域,不能包含引号</span></span><br><span class="line"><span class="keyword">var</span> quote = <span class="regexp">/"([^"]*)"/g</span>;</span><br><span class="line"><span class="comment">//引用中文半角引号替换英文引号,同时要保持引号之间的内容(储存在$1中)没有被修改.</span></span><br><span class="line">text.replace(quote,<span class="string">'“$1”'</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="3-_match()">3. <code>match()</code></h3><ul>
<li>接受唯一一个参数,就是正则表达式,返回的是一个由匹配结果组成的数组.例:<ul>
<li><code>&quot;1 plus 2 equals 3&quot;.match(/\d+/g);//返回[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</code></li>
</ul>
</li>
<li>若在这个正则表达式中没有设置修饰符g,<code>match()</code>就不会进行全局检索,它只检索第一个匹配。但即使match()执行的不是全局检索，它也返回一个数组。在这种情况下，数组的第一个元素就是匹配的字符串，余下的元素则是正则表达式中用圆括号括起来的子表达式。</li>
<li>因此，如果macth()返回一个数组a，那么a[0]存放的是完整的匹配，a[1]存放的是与第一个圆括号括起来的表达式相匹配的子串，以此类推。为了和方法replace()保持以后，a[n]存放的是$n的内容。</li>
<li>例:解析一个url</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="regexp">/(\w+):\/\/([\w.]+)\/(\S*)/</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"Visit my blog at http://www.example.com/~david"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = text.match(url);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fullurl = result[<span class="number">0</span>]; <span class="comment">//包含 "http://www.example.com/"</span></span><br><span class="line">    <span class="keyword">var</span> protocol = result[<span class="number">1</span>]; <span class="comment">//包含 "http"</span></span><br><span class="line">    <span class="keyword">var</span> host = result[<span class="number">2</span>]; <span class="comment">//包含 "www.example.com"</span></span><br><span class="line">    <span class="keyword">var</span> path = result[<span class="number">3</span>]; <span class="comment">//包含~david</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-_split()">4. <code>split()</code></h3><ul>
<li>用以将调用它的字符串拆分为子串组成的数组,使用分隔符是<code>split()</code>的参数</li>
<li>参数为字符串<ul>
<li><code>&quot;123,456,789&quot;.split(&quot;,&quot;);//返回[&quot;123&quot;,&quot;456&quot;,&quot;789&quot;]</code></li>
</ul>
</li>
<li>参数为正则<ul>
<li><code>&quot;1,2, 3,4 ,5&quot;.split(/\s*,\s*/)//返回[&quot;1&quot;,&quot;2&quot;,&quot; 3&quot;,&quot;4 &quot;,&quot;5&quot;]</code></li>
<li>指定分隔符”,”,允许两边可以留有任意多的空白符</li>
</ul>
</li>
</ul>
<h2 id="RegExp对象">RegExp对象</h2><ul>
<li>RegExp对象用以创建新的RegExp对象,可接受两个参数,第二个可选.</li>
<li>RegExp对象的第一个参数为正则表达式的主体部分,也就是<code>/...../</code>之间的文本,无论是字符串直接量,还是正则表达式都使用”\”作为转义字符的前缀.</li>
<li>第二个可选参数为指定正则表达式的修饰符,<code>i</code>,<code>g</code>,<code>m</code>或者他们的组合.参考:文本模式的则表达式-修饰符<br>例:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d&#123;5&#125;"</span>,<span class="string">"g"</span>);<span class="comment">//匹配全局模式下的5个数字</span></span><br><span class="line">alert(reg.test(<span class="string">"1J2a35786"</span>));<span class="comment">//true</span></span><br><span class="line">alert(reg.test(<span class="string">"1J2a356"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="RegExp属性">RegExp属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>source</td>
<td>只读字符串</td>
<td>包含正则表达式的文本</td>
</tr>
<tr>
<td>global</td>
<td>只读布尔值</td>
<td>用以说明正则表达式是否带有修饰<code>g</code></td>
</tr>
<tr>
<td>ignoreCase</td>
<td>只读布尔值</td>
<td>用以说明正则表达式是否带有修饰<code>i</code></td>
</tr>
<tr>
<td>multiline</td>
<td>只读布尔值</td>
<td>用以说明正则表达式是否带有修饰<code>m</code></td>
</tr>
<tr>
<td>lastIndex</td>
<td>可读性的整数</td>
<td>若匹配模式中含有<code>g</code>,这个属性储存在整个字符串中下一次检索的开始位置</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p>什么是正则表达式?<br>可以称作规则一个描述字符模式的对象，正则表达式中的字母和数字，都是按照字面含义进行匹配的。<strong>强大的字符串匹配工具</strong></p>
</li>
<li><p>如何建立一个正则表达式？</p>
</li>
</]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="正则表达式" scheme="http://guowenfh.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript类型识别]]></title>
    <link href="http://guowenfh.github.io/2015/11/30/javascript-type/"/>
    <id>http://guowenfh.github.io/2015/11/30/javascript-type/</id>
    <published>2015-11-30T11:50:30.000Z</published>
    <updated>2015-12-01T06:55:39.504Z</updated>
    <content type="html"><![CDATA[<h2 id="类型系统">类型系统</h2><blockquote>
<p>javascript 类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。</p>
</blockquote>
<p><img src="/images/2015-11-30-javascript-type/javascript-variable-type.jpg" alt="JS数据类型">.</p>
<h3 id="类型转化表">类型转化表</h3><table>
<thead>
<tr>
<th>Value</th>
<th>Boolean</th>
<th>Number</th>
<th>String</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>false</td>
<td>NaN</td>
<td>“undefined”</td>
</tr>
<tr>
<td>null</td>
<td>false</td>
<td>0</td>
<td>“null”</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>1</td>
<td>“true”</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>0</td>
<td>“false”</td>
</tr>
<tr>
<td>“”</td>
<td>false</td>
<td>0</td>
<td>“”</td>
</tr>
<tr>
<td>‘123’</td>
<td>true</td>
<td>123</td>
<td>‘123’</td>
</tr>
<tr>
<td>‘1a’</td>
<td>true</td>
<td>NaN</td>
<td>‘1a’</td>
</tr>
<tr>
<td>0</td>
<td>false</td>
<td>0</td>
<td>“0”</td>
</tr>
<tr>
<td>1</td>
<td>true</td>
<td>1</td>
<td>“1”</td>
</tr>
<tr>
<td>Infinity</td>
<td>true</td>
<td>Infinity</td>
<td>“Infinity”</td>
</tr>
<tr>
<td>NaN</td>
<td>false</td>
<td>NaN</td>
<td>‘NaN’</td>
</tr>
<tr>
<td>{}</td>
<td>true</td>
<td>NaN</td>
<td>“[object Object]”</td>
</tr>
</tbody>
</table>
<h2 id="类型判断">类型判断</h2><ul>
<li><code>typeof</code></li>
<li><code>Object.prototype.toString</code></li>
<li><code>constructor</code></li>
<li><code>instanceof</code></li>
</ul>
<h3 id="typeof"><code>typeof</code></h3><ol>
<li>可以识别标准类型(<code>null</code>除外)</li>
<li>不可识别具体的对象类型(<code>Function</code>除外)</li>
</ol>
<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可以识别标准类型(`null`除外)</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="number">1</span>);<span class="comment">//"number"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="string">""</span>);<span class="comment">//"string"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">undefined</span>);<span class="comment">//"undefined"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>);<span class="comment">//"boolean"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>);<span class="comment">//"object"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不可识别具体的对象类型(`Function`除外)</span></span><br><span class="line"><span class="keyword">typeof</span>([]);<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span>(&#123;&#125;);<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">//"function"</span></span><br></pre></td></tr></table></figure>
<h3 id="instanceof"><code>instanceof</code></h3><ol>
<li>能够判别内置对象类型</li>
<li>不能判别原始类型</li>
<li>能够判别自定义类型</li>
</ol>
<p>例: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 能够判别内置对象类型</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;<span class="comment">//true</span></span><br><span class="line">/\d/ <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不能判别原始类型</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;<span class="comment">//false</span></span><br><span class="line"><span class="string">"xiaohong"</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>;<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 能够判别自定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">c <span class="keyword">instanceof</span> Point;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="Object-prototype-toString-call()方法"><code>Object.prototype.toString.call()</code>方法</h3><ol>
<li>可以识别标准类型,及内置对象类型</li>
<li>不能识别自定义类型</li>
</ol>
<p>例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可以识别标准类型,及内置对象类型</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">21</span>);<span class="comment">//"[object Number]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]);<span class="comment">//"[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/[A-Z]/</span>);<span class="comment">//"[object RegExp]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不能识别自定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//c instanceof Point;//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(c);<span class="comment">//"[object Object]"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>为了方便使用,使用函数封装如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeProto</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>,-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typeProto(<span class="string">"guo"</span>);<span class="comment">//"String"</span></span><br><span class="line">typeProto(&#123;&#125;);<span class="comment">//"Object"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="constructor-NaN"><code>constructor</code></h3><blockquote>
<p><code>constructor</code>指向构造这个对象的构造函数本身..</p>
</blockquote>
<ol>
<li>可识别原始类型</li>
<li>可识别内置对象类型</li>
<li>可识别自定义类型</li>
</ol>
<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可识别原始类型</span></span><br><span class="line"><span class="string">"guo"</span>.constructor === <span class="built_in">String</span>;<span class="comment">//true</span></span><br><span class="line">(<span class="number">1</span>).constructor === <span class="built_in">Number</span>;<span class="comment">//true</span></span><br><span class="line"><span class="literal">true</span>.constructor === <span class="built_in">Boolean</span>;<span class="comment">//true</span></span><br><span class="line">(&#123;&#125;).constructor === <span class="built_in">Object</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 可识别内置对象类型</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().constructor === <span class="built_in">Date</span>;<span class="comment">//true</span></span><br><span class="line">[].constructor === <span class="built_in">Array</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 可识别自定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> People(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">c.constructor===People;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>为了方便使用,使用函数封装如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConstructorName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor.toString().match(<span class="regexp">/function\s*([^(]*)/</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getConstructorName(<span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">//"Date"</span></span><br><span class="line">getConstructorName(<span class="literal">null</span>);<span class="comment">//null</span></span><br><span class="line">getConstructorName(<span class="number">12</span>);<span class="comment">//"Number"</span></span><br></pre></td></tr></table></figure>
<h2 id="类型判断对比表">类型判断对比表</h2><ul>
<li>其中红色的单元格表示该判断方式不支持的类型。</li>
</ul>
<p><img src="/images/2015-11-30-javascript-type/javascript-type-judge.png" alt="类型判断对比表"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="类型系统">类型系统</h2><blockquote>
<p>javascript 类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。</p>
</blockquote>]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Youth (青春)]]></title>
    <link href="http://guowenfh.github.io/2015/11/30/Youth/"/>
    <id>http://guowenfh.github.io/2015/11/30/Youth/</id>
    <published>2015-11-30T08:44:19.000Z</published>
    <updated>2015-12-01T06:48:21.470Z</updated>
    <content type="html"><![CDATA[<p>Youth -Samuel Ullman</p>
<blockquote>
<p>Samuel Ullman（塞缪尔.厄尔曼）</p>
</blockquote>
<p>Youth is not a time of life,it is a state of mind;<br>青春不是年华，而是心境；</p>
<p>it is not a matter of rosy cheeks, red lips and supple knees;<br>青春不是桃面、丹唇、柔膝，</p>
<p>it is a matter of the will, a quality of the imagination, a vigor of the emotions;<br>而是深沉的意志、宏伟的想象、炽热的感情；</p>
<p>it is the freshness of the deep springs of life.<br>青春是生命的深泉在涌流。</p>
<p>Youth means a tempera mental predominance of courage over timidity,<br>青春气贯长虹，勇锐盖过怯弱，</p>
<p>of the appetite for adventure over the love of ease.<br>进取压倒苟安，如此锐气，</p>
<p>This often exists in a man of 60 more than a boy of 20.<br>二十后生有之,六旬男子则更多见.</p>
<p>Nobody grows old merely by a number of years. We grow old by deserting our ideals.<br>年年有加，并非垂老；理想丢弃，方堕暮年。</p>
<p>Years may wrinkle the skin, but to give up enthusiasm wrinkles the soul.<br>岁月悠悠，衰微只及肌肤；热忱抛却，颓唐必至灵魂。</p>
<p>Worry, fear, self-distrust bows the heart and turns the spring back to dust.<br>烦忧、惶恐、丧失自信，定使心灵扭曲，意气如灰。</p>
<p>Whether 60 or 16, there is in every human being`s heart the lure of wonder,<br>无论年届花甲，抑或二八芳龄，心中皆有生命之欢乐，奇迹之诱惑，</p>
<p>the unfailing childlike appetite of what`s next and the joy of the game of living.<br>孩童般天真久盛不衰。</p>
<p>In the center of your heart and my heart there is a wireless station,<br>人人心中皆有一台天线，</p>
<p>so long as it receives messages of beauty, hope, cheer, courage and power from men and from the Infinite,<br>只要你从天上人间接受美好、希望、欢乐、勇气和力量的信号，</p>
<p>so long are you young.<br>你就青春永驻，风华常存。</p>
<p>When the aerials are down, and your spirit is covered with snows of cynicism and the ice of pessimism,<br>一旦天线倒塌，锐气被冰雪覆盖，玩世不恭、自暴自弃油然而生，</p>
<p>then you are grown old, even at 20,<br>即使年芳二十,实已垂老矣;</p>
<p>but as long as your aerials are up,to catch waves of optimism, there is hope you may die young at 80.<br>然则只要竖起天线，捕捉乐观的信号，你就有望在八十岁高龄告别尘寰时仍觉得年轻。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Youth -Samuel Ullman</p>
<blockquote>
<p>Samuel Ullman（塞缪尔.厄尔曼）</p>
</blockquote>
<p>Youth is not a time of life,it is a state of mind;<b]]>
    </summary>
    
      <category term="摘录" scheme="http://guowenfh.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="生活" scheme="http://guowenfh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
