<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[三省吾身丶丶]]></title>
  <subtitle><![CDATA[兴趣遍地都是，专注和持之以恒才是真正稀缺的。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://guowenfh.github.io/"/>
  <updated>2016-03-28T06:21:36.295Z</updated>
  <id>http://guowenfh.github.io/</id>
  
  <author>
    <name><![CDATA[guowenfh]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[webpack入坑之旅（六）配合vue-router实现SPA]]></title>
    <link href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/"/>
    <id>http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/</id>
    <published>2016-03-28T05:57:57.000Z</published>
    <updated>2016-03-28T06:21:36.295Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<p>在上面的练习当中我们已经成功的加载了一个<code>.vue</code>格式的单文件组件，并且实现了在使用vue情况下的自动刷新。</p>
<p>但是我们最终的目的还是要实现单页面应用程序，这个时候我们就必不可少的需要使用到路由管理器来进行SPA的开发，vue官方为我们提供了一个官方库<a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">vue-router</a>，并且配有对应的<a href="http://vuejs.github.io/vue-router/zh-cn/index.html" target="_blank" rel="external">中文文档</a>。关于里面的内容大家自行前去观看。在这里，只会把我们需要的东西拿出来讲。</p>
<h2 id="vue组件">vue组件</h2><blockquote>
<p><a href="http://cn.vuejs.org/guide/components.html" target="_blank" rel="external">官网对于组件讲解</a></p>
</blockquote>
<p>在<code>Vue</code>中定义一个组件非常简单，只需要一对<strong>自定义标签</strong>，在其中填入内容就可以进行我们的组件编写了，然后使用<code>Vue.component()</code>去注册我们的组件下面来看一个例子，来直观的看看vue的组件。</p>
<h3 id="组件入门">组件入门</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义标签作为组件名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 复用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span><br><span class="line">        // 定义并且注册组件</span><br><span class="line">        // 在官方的示例中使用 Vue.extend(&#123;&#125;)先注册了一个定义模板，再引用，看个人喜好吧</span><br><span class="line">        Vue.component("my-component", &#123;</span><br><span class="line">            template:"<span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello Vue component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>"</span><br><span class="line">        &#125;)</span><br><span class="line">        // 创建根实例</span><br><span class="line">        // 在这里 定义并且注册组件 必须创建根实例前，不然会报错，因为解析顺序的问题？</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:"#app"</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面就是最简单的定义组件的方式，<strong><code>template</code>属性中写的东西</strong>:就是<code>&lt;my-component&gt;</code>这个自定义标签渲染后展现出来的样式，这里渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello Vue component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello Vue component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用template标签">使用template标签</h3><p>在上面这段代码中组件内的内容都被写在<code>template</code>属性中，如果组件中的内容继续增加，一堆的引号和加号来拼接这些字符串简直就是噩梦。所以Vue 引入了<code>template</code>标签（html5定义的，浏览器默认不去解析里面的内容）。<strong><code>&lt;template&gt; 不能用在 &lt;table&gt; 内</code></strong>下面来看看它的使用方法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 template 并且添加选择器(只能使用id)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myTemp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Template <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>add ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><br><span class="line">        Vue.component("my-component", &#123;</span><br><span class="line">            template:"#myTemp"//对应上面定义的template标签中的选择器</span><br><span class="line">        &#125;)</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:"#app"</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到在注册组件中，可以<code>template</code>可以使用选择器来获取到上面我们<code>&lt;template&gt;</code>标签中的内容。所以这里应该会被渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Template <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>add ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Template <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>add ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>组件的基础介绍就到这，更多详细内容请移步<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">官网</a> </p>
<h2 id="vue-router">vue-router</h2><p>刚刚已经对于vue的组件有了一定的了解。现在来结合vue-router，来进行一下动态的切换。</p>
<p>首先是安装，如果使用npm的形式的话，直接运行<code>npm install vue-router --save</code>,就可以看到<code>vue-router</code>，已经被添加到了项目依赖中。直接上<code>ES6</code>的语法来进行引入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure>
<h3 id="起步">起步</h3><p>其实这一部分<code>vue-router</code>的<a href="http://vuejs.github.io/vue-router/zh-cn/basic.html" target="_blank" rel="external">中文文档</a>中已经讲的非常详细了。。在这里与它不同的是它用的<code>CommonJS</code>的规范来进行模块安装，而我使用ES6的import，有兴趣自己去看- -。其他的内容我就直接扒下来了。</p>
<p>html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用指令 v-link 进行导航。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: '/foo' &#125;"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: '/bar' &#125;"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由外链 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>javascript:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义组件</span></span><br><span class="line"><span class="keyword">var</span> Foo = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;This is foo!&lt;/p&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Bar = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;This is bar!&lt;/p&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 路由器需要一个根组件。</span></span><br><span class="line"><span class="comment">// 出于演示的目的，这里使用一个空的组件，直接使用 HTML 作为应用的模板</span></span><br><span class="line"><span class="keyword">var</span> App = Vue.extend(&#123;&#125;)</span><br><span class="line"><span class="comment">// 创建一个路由器实例</span></span><br><span class="line"><span class="comment">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter()</span><br><span class="line"><span class="comment">// 定义路由规则</span></span><br><span class="line"><span class="comment">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></span><br><span class="line"><span class="comment">// 创建的组件构造函数，也可以是一个组件选项对象。</span></span><br><span class="line"><span class="comment">// 稍后我们会讲解嵌套路由</span></span><br><span class="line">router.map(&#123;</span><br><span class="line">    <span class="string">'/foo'</span>: &#123;</span><br><span class="line">        component: Foo</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'/bar'</span>: &#123;</span><br><span class="line">        component: Bar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 现在我们可以启动应用了！</span></span><br><span class="line"><span class="comment">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></span><br><span class="line">router.start(App, <span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>我个人感觉这部分还是很好理解的，官方也给了一个<a href="http://jsfiddle.net/yyx990803/xyu276sa/" target="_blank" rel="external">在线示例应用</a>。很好的展现了它的路由切换。</p>
<p>简单的介绍到这，下面最重要的部分到了，看看如何结合我们定义的<code>.vue</code>单文件组件。</p>
<p>首先来看我们的文件目录结构：</p>
<p><img src="/images/vue-webpack/01-webpack-vuerouter.jpg" alt="01-webpack-vuerouter"></p>
<h3 id="定义路由规则">定义路由规则</h3><p><strong>最主要是<code>main.js</code></strong>的变化，直接在文件中讲解了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入vue以及vue-router</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">// 引入组件！直接使用es6的语法</span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./components/app.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> list <span class="keyword">from</span> <span class="string">'./components/list.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">'./components/hello.vue'</span>;</span><br><span class="line"><span class="comment">//开启debug模式</span></span><br><span class="line">Vue.config.debug = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// new Vue(app);//这是上一篇用到的，新建一个vue实例，现在使用vue-router就不需要了。</span></span><br><span class="line"><span class="comment">// 路由器需要一个根组件。</span></span><br><span class="line"><span class="keyword">var</span> App = Vue.extend(&#123;&#125;);</span><br><span class="line"><span class="comment">// 创建一个路由器实例</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter();</span><br><span class="line"><span class="comment">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend创建的组件构造函数，也可以是一个组件选项对象。</span></span><br><span class="line"><span class="comment">// 稍后我们会讲解嵌套路由</span></span><br><span class="line">router.map(&#123;<span class="comment">//定义路由映射</span></span><br><span class="line">    <span class="string">'/index'</span>:&#123;<span class="comment">//访问地址</span></span><br><span class="line">        name:<span class="string">'index'</span>,<span class="comment">//定义路由的名字。方便使用。</span></span><br><span class="line">        component:index,<span class="comment">//引用的组件名称，对应上面使用`import`导入的组件</span></span><br><span class="line">        <span class="comment">//component:require("components/app.vue")//还可以直接使用这样的方式也是没问题的。不过会没有import集中引入那么直观</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'/list'</span>: &#123;</span><br><span class="line">        name:<span class="string">'list'</span>,</span><br><span class="line">        component: list</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">router.redirect(&#123;<span class="comment">//定义全局的重定向规则。全局的重定向会在匹配当前路径之前执行。</span></span><br><span class="line">    <span class="string">'*'</span>:<span class="string">"/index"</span><span class="comment">//重定向任意未匹配路径到/index</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 现在我们可以启动应用了！</span></span><br><span class="line"><span class="comment">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></span><br><span class="line">router.start(App, <span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>
<p>在index.html需要有用于渲染匹配的组件，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>现在当我们运行 <code>npm start</code> 进入<code>http://localhost:8080/</code>就会自动跳转到<code>http://localhost:8080/#!/index</code>，并且读取里面的内容。</p>
<h3 id="实现路由跳转">实现路由跳转</h3><p>主要抽出<code>app.vue</code>中的内容来讲解，的内容是：(<code>list.vue</code>里面的内容自行设置查看吧)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"golist"</span>&gt;</span>$route.router.go查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'list' &#125;"</span>&gt;</span>v-link查看列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'index' &#125;"</span>&gt;</span>回去主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="comment">//这里是官方的写法，默认导出，ES6</span></span><br><span class="line">        data () &#123; <span class="comment">//ES6，等同于data:function()&#123;&#125;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;    <span class="comment">//必须使用这样的形式，才能创建出单一的作用域</span></span><br><span class="line">                name:<span class="string">"guowenfh"</span>,</span><br><span class="line">                age:<span class="string">"21"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods :&#123;</span><br><span class="line">            golist () &#123;<span class="comment">//方法，定义路由跳转，注意这里必须使用this，不然报错</span></span><br><span class="line">                <span class="keyword">this</span>.$route.router.go(&#123;name:<span class="string">"list"</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 样式自行设置，或者直接看源码就好 --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为自刷新的缘故，直接切换到浏览器。</p>
<p>点击上面使用的<code>v-link</code>，与<code>router.go</code>的方式都可以跳转到<code>list</code>定义的路由。（<strong>观察浏览器地址栏的变化</strong>）在这里我们使用的<code>{name:&quot;list&quot;}</code>，使用<code>{ path: &#39;/list&#39; }</code>会有同样的效果。</p>
<h2 id="引用Vue组件">引用Vue组件</h2><p>在第一小点里面我们看到了在页面内的组件的使用方法，第二小点中学习到了<code>vue-router</code>的制定路由规则。</p>
<p>看过这两个地方之后，我们把思维发散开来，应该就能触类旁通的想到如何在页面中嵌套加载别的组件了。<br>我们创建一个<code>hello.vue</code> ，里面内容随意。现在我们如果要在<code>app.vue</code>中加载它，那么只需要在<code>app.vue</code>中使用<code>import hello from &quot;./hello.vue&quot;</code>（其实这个达到了使用require两步的效果。引入赋值）。</p>
<p>引入之后，只需要如下注册：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//其它的就</span></span><br><span class="line">    components:&#123;</span><br><span class="line">        hello<span class="comment">//若还有更多的组件，只需要在import的情况下，以逗号分割，继续注册就好</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在<code>app.vue</code>中添加<code>&lt;hello&gt;&lt;/hello&gt;</code>这一对自定义标签，就可以实现加载<code>hello.vue</code>中的内容。</p>
<p>组件的嵌套也就是这样，很简单的描述完了，但是怎么样去抽离组件，在工作中积累可以复用的组件才是我们真正需要去思考的。</p>
<p>那么先到这，关于组件之间通信的问题，留到以后慢慢了解。</p>
<h2 id="路由嵌套">路由嵌套</h2><p>还是刚刚的代码与目录结构，我们已经实现了组件之间的嵌套，但是有时并不希望组件直接就加载进来，而是在用户点击后才展现在页面中，这是就需要使用到路由嵌套。</p>
<p>为了偷懒，这里就直接使用<code>hello.vue</code>。实现嵌套路由主要有以下几步：</p>
<p>第一步：制定嵌套路由规则：</p>
<p>看<code>main.js</code>下面这部分的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.map(&#123;</span><br><span class="line">    <span class="string">'/index'</span>:&#123;</span><br><span class="line">        name:<span class="string">'index'</span>,</span><br><span class="line">        component:index,</span><br><span class="line">        <span class="comment">// 在/index下设置一个子路由</span></span><br><span class="line">        subRoutes:&#123; </span><br><span class="line">            <span class="comment">// 当匹配到/index/hello时，会在index的&lt;router-view&gt;内渲染</span></span><br><span class="line">            <span class="string">'/hello'</span>:&#123;</span><br><span class="line">                name:<span class="string">'hello'</span>,<span class="comment">//可有可无，主要是为了方便使用</span></span><br><span class="line">                <span class="comment">// 一个hello组件</span></span><br><span class="line">                component:hello</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第二步：在组件中添加<code>&lt;router-view&gt;</code></p>
<blockquote>
<p>来自官网的解释：<code>&lt;router-view&gt;</code> 用于渲染匹配的组件，它基于Vue的动态组件系统，所以它继承了一个正常动态组件的很多特性。</p>
</blockquote>
<p>将<code>&lt;router-view&gt;</code>写在<code>app.vue</code>的<code>&lt;template&gt;&lt;/template&gt;</code>标签中。</p>
<p>第三步：写入跳转路径</p>
<p>还是在<code>app.vue</code>中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'index' &#125;"</span>&gt;</span>回去主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击这两个标签就会实现页面内的切换效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'hello' &#125;"</span>&gt;</span>嵌套的路由<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>，切换到浏览器，点击该<code>嵌套的路由</code>即可让<code>hello.vue</code>中的展现出来，在这里直接使用了<code>v-link</code>来实现跳转（知道为什么要写name了吧。。如果使用path会是这样的<code>{ path: &#39;/index/hello&#39; }</code>- -。 ） ，当然<code>router.go</code>同理。（注意在点击两个不同的文字时，地址栏的变化，以及展现内容的切换）</p>
<p><strong>注意：</strong></p>
<p>在我的源码中是在<code>&lt;style scoped&gt;&lt;/style&gt;</code>标签中定义样式的，请注意<code>scoped</code>的使用，它表示在该<code>style</code>中定义的样式只会在当前的组件中起到效果，而不会去影响全局的css样式。</p>
<p>最简单的理解应该就是：</p>
<p>未写该<code>scoped</code>属性的所有组件中的样式，在经过<code>vue-loader</code>编译之后拥有全局作用域。相当于共用一份<code>css</code>样式表。</p>
<p>而写了该属性的的组件中定义的样式，拥有独立作用域。相当于除去引入了公用的一份<code>css</code>样式表外，但单独拥有一份<code>css</code>的样式表。</p>
<p>好了，先到这。讲的有些凌乱，下次见</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.git]]>
    </summary>
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack入坑之旅（五）加载vue单文件组件]]></title>
    <link href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/"/>
    <id>http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/</id>
    <published>2016-03-25T03:57:50.000Z</published>
    <updated>2016-03-27T15:09:20.383Z</updated>
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
</ul>
<h2 id="需要什么？">需要什么？</h2><p>在经过前面的四个练习，相信已经对于<code>webapck</code>有了一定的了解，现在我们就来一个综合案例，进一步加深对于<code>webpack</code>的理解。</p>
<p>首先我们应该思考要解析<code>.vue</code>类型的文件，需要什么样的东西？应该按照什么样的步骤来？我们应该怎么去搭建这个项目？</p>
<h2 id="开始">开始</h2><h3 id="第一步：初始化项目目录">第一步：初始化项目目录</h3><p>我们需要创建如下目录及文件夹，最终目录结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- dist <span class="comment">//文件生成目录</span></span><br><span class="line">    -- <span class="comment">//自动生成</span></span><br><span class="line">- node_module <span class="comment">//自动安装</span></span><br><span class="line">    -- ...</span><br><span class="line">- src <span class="comment">//文件入口</span></span><br><span class="line">    -- components <span class="comment">//组件存放</span></span><br><span class="line">        -- app.vue <span class="comment">//主.vue</span></span><br><span class="line">    -- main.js <span class="comment">//主.js</span></span><br><span class="line">- index.html <span class="comment">//主.html</span></span><br><span class="line">- package.json <span class="comment">//npm 配置</span></span><br><span class="line">- webpack.cofig.js <span class="comment">// webpack配置</span></span><br></pre></td></tr></table></figure>
<h3 id="第二步：安装项目依赖">第二步：安装项目依赖</h3><p>如果你上面没有创建<code>package.json</code>文件的话，可以直接使用<code>npm init</code>来初始化我们的<code>package.json</code>文件的配置。</p>
<p>想要去编译其他的文件比如<code>react</code>，<code>coffce</code>等等，就必须要加载很多对应的<code>loader</code>。要想加载一个<code>.vue</code>文件。当然也是同样的道理。<br>建议用<code>npm install xxx-loader --save-dev</code>这样的命令一条一条的敲。在命令行中，会有提示，可以帮助理解<code>webpack</code>的中的依赖管理关系。我的配置清单如下：<br><strong>在实际项目中，json文件中不能出现注释</strong>，在这里为了方便大家了解里面设置项的含义，就直接使用注释的方式加载后面了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"05-five-vue"</span>, <span class="comment">//项目名称</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>, <span class="comment">//版本</span></span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"vue+webapck"</span>, <span class="comment">//描述</span></span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"index.js"</span>, <span class="comment">//主文件</span></span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">        <span class="string">"start"</span>: <span class="string">"webpack-dev-server --inline"</span></span><br><span class="line">    &#125;, <span class="comment">//scripts指定了运行脚本命令的npm命令行缩写，比如这是的start指定了运行npm run start时，所要执行的命令。</span></span><br><span class="line">    <span class="string">"dependencies"</span>: &#123; <span class="comment">//项目依赖</span></span><br><span class="line">        <span class="string">"vue"</span>: <span class="string">"^1.0.18"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123; <span class="comment">//各种各样的loader，用来解析想相应的文件格式。要解析vue并且完成相应的功能，这些基本都是必须的。</span></span><br><span class="line">        <span class="string">"autoprefixer-loader"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">        <span class="string">"babel"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">        <span class="string">"babel-core"</span>: <span class="string">"^6.3.21"</span>,</span><br><span class="line">        <span class="string">"babel-loader"</span>: <span class="string">"^6.2.0"</span>,</span><br><span class="line">        <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">        <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">        <span class="string">"babel-runtime"</span>: <span class="string">"^5.8.34"</span>,</span><br><span class="line">        <span class="string">"css-loader"</span>: <span class="string">"^0.16.0"</span>,</span><br><span class="line">        <span class="string">"file-loader"</span>: <span class="string">"^0.8.5"</span>,</span><br><span class="line">        <span class="string">"html-loader"</span>: <span class="string">"^0.3.0"</span>,</span><br><span class="line">        <span class="string">"node-sass"</span>: <span class="string">"^3.4.2"</span>,</span><br><span class="line">        <span class="string">"sass-loader"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">        <span class="string">"style-loader"</span>: <span class="string">"^0.12.3"</span>,</span><br><span class="line">        <span class="string">"url-loader"</span>: <span class="string">"^0.5.6"</span>,</span><br><span class="line">        <span class="string">"vue-html-loader"</span>: <span class="string">"^1.2.0"</span>,</span><br><span class="line">        <span class="string">"vue-loader"</span>: <span class="string">"^7.2.0"</span>,</span><br><span class="line">        <span class="string">"webpack"</span>: <span class="string">"^1.12.0"</span>,</span><br><span class="line">        <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.14.0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"guowenfh"</span>, <span class="comment">//作者</span></span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"MIT"</span>, <span class="comment">//开源协议</span></span><br><span class="line">    <span class="string">"keywords"</span>: [ <span class="comment">//关键字</span></span><br><span class="line">        <span class="string">"vue"</span>,</span><br><span class="line">        <span class="string">"webpack"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想省事的话，直接复制上面的<code>devDependencies</code>,<code>dependencies</code>字段，并且填写到你的<code>package.json</code>文件中。然后运行<code>npm install</code>就会自动安装所有的模块以及依赖。</p>
<h3 id="第三步：配置webpack">第三步：配置webpack</h3><p>文件已经设置好了，接下来就到了我们关键的一步，配置<code>webpack.config.js</code>,清单如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// NodeJS中的Path对象，用于处理目录的对象，提高开发效率。</span></span><br><span class="line"><span class="comment">// 模块导入</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 入口文件地址，不需要写完，会自动查找</span></span><br><span class="line">    entry: <span class="string">'./src/main'</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        <span class="comment">// 文件地址，使用绝对路径形式</span></span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        <span class="comment">//[name]这里是webpack提供的根据路口文件自动生成的名字</span></span><br><span class="line">        publicPath: <span class="string">'/dist/'</span></span><br><span class="line">        <span class="comment">// 公共文件生成的地址</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 服务器配置相关，自动刷新!</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">false</span>,</span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        grogress: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 加载器</span></span><br><span class="line">        loaders: [</span><br><span class="line">        <span class="comment">// 解析.vue文件</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.vue$/</span>, loader: <span class="string">'vue'</span> &#125;,</span><br><span class="line">        <span class="comment">// 转化ES6的语法</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.js$/</span>, loader: <span class="string">'babel'</span>, exclude: <span class="regexp">/node_modules/</span> &#125;,</span><br><span class="line">        <span class="comment">// 编译css并自动添加css前缀</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'style!css!autoprefixer'</span>&#125;,</span><br><span class="line">        <span class="comment">//.scss 文件想要编译，scss就需要这些东西！来编译处理</span></span><br><span class="line">        <span class="comment">//install css-loader style-loader sass-loader node-sass --save-dev</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.scss$/</span>, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</span><br><span class="line">        <span class="comment">// 图片转化，小于8K自动转化为base64的编码</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.(png|jpg|gif)$/</span>, loader: <span class="string">'url-loader?limit=8192'</span>&#125;,</span><br><span class="line">        <span class="comment">//html模板编译？</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.(html|tpl)$/</span>, loader: <span class="string">'html-loader'</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// .vue的配置。需要单独出来配置，其实没什么必要--因为我删了也没保错，不过这里就留这把，因为官网文档里是可以有单独的配置的。</span></span><br><span class="line">    vue: &#123;</span><br><span class="line">        loaders: &#123;</span><br><span class="line">            css: <span class="string">'style!css!autoprefixer'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 转化成es5的语法</span></span><br><span class="line">    babel: &#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>],</span><br><span class="line">        plugins: [<span class="string">'transform-runtime'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">// require时省略的扩展名，如：require('module') 不需要module.js</span></span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">        <span class="comment">// 别名，可以直接使用别名来代表设定的路径以及其他</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            filter: path.join(__dirname, <span class="string">'./src/filters'</span>),</span><br><span class="line">            components: path.join(__dirname, <span class="string">'./src/components'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 开启source-map，webpack有多种source-map，在官网文档可以查到</span></span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>请详细查看这里面的设置，我这里都是很简单的配置，在你的项目中，还可以更进一步的对于入口文件和输出文件进行更加深入的定制。（注意：好像<code>node-sass</code>的包有问题，有很多人解析不了<code>sass</code>）</p>
<p>并且在这里生成的css文件还会插到js中，有时我们需要更进一步的把它独立出来，然后在html中引入这时就会用到<code>webpack</code>的插件，在这里先不说（因为我暂时没用到，没有试验过，好像也不麻烦，可以的话下篇再试试）</p>
<h3 id="第四步：编写代码">第四步：编写代码</h3><p>接下来就是我们要展示的文件的编写了，我直接把代码贴上来了。</p>
<p>index.html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="selector-id">#app</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里是main.js的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6语法：</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"../node_modules/vue/dist/vue.min.js"</span>;<span class="comment">//其实不用写完，会自动查找。可以直接写import Vue from "vue";</span></span><br><span class="line"><span class="comment">//外部引入别的库都可以用这样的方式，比如jquery等。。</span></span><br><span class="line"><span class="comment">//引入我们编写的测试用vue文件。</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'./components/app'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.debug = <span class="literal">true</span>;<span class="comment">//开启错误提示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(app);</span><br></pre></td></tr></table></figure>
<p>这里是app.vue：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="comment">//es6</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">         <span class="comment">//data:function()&#123;&#125;，下面是es6写法</span></span><br><span class="line">         data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                name:<span class="string">"guowenfh"</span>,</span><br><span class="line">                age:<span class="string">"2q1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"sass"</span>&gt;</span><span class="undefined"></span><br><span class="line">    /*一定要加lang不然无法编译*/</span><br><span class="line">    /*测试一下对sass的编译*/</span><br><span class="line">    $qwe:#098;</span><br><span class="line">    body&#123;</span><br><span class="line">        background-color: $qwe;</span><br><span class="line">        h1&#123;</span><br><span class="line">            background-color: #eee;</span><br><span class="line">            color: red;</span><br><span class="line">            transform: translate(10%, 10%);/*测试自动添加前缀*/</span><br><span class="line">        &#125;</span><br><span class="line">        h1:hover&#123;</span><br><span class="line">            height:100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h2&#123;</span><br><span class="line">            background-color: #999;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第五步：修改自动刷新设置">第五步：修改自动刷新设置</h3><p>下面再单独的再谈一下关于自动刷新的实现，首先需要说明，在上一篇博客中的自动刷新实现，是有问题的。只能改变css样式，使颜色进行变化。对于html里面的内容改变时，浏览器并不会自动刷新。</p>
<p><strong>注意点一：</strong><br>首先我们看到<code>package.json</code>中<code>scripts</code>字段中的<code>&quot;start&quot;: &quot;webpack-dev-server --inline&quot;</code>。这里如果按照网上的方法在后面再添加上<code>--hot</code>的话，只会对于<code>app.vue</code>中的<code>&lt;style&gt;</code>标签内的css起效果。</p>
<p><strong>注意点二：</strong><br>因为我们没有加<code>--hot</code>，所以在<code>webpack.cofig.js</code>中需要对于<code>devServer</code>进行一些配置，如下：（主要是是<code>hot</code>设置为了false）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">false</span>,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    grogress: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样设置了之后按下保存相当于按下了F5浏览器整个刷新。而不是局部刷新。（如果你实现了局部刷新，并且没有其他问题，那请教教我^_^）</p>
<p><strong>注意点三：</strong></p>
<p>注意<code>package.json</code>的loader安装中的<code>&quot;vue-hot-reload-api&quot;: &quot;^1.2.2&quot;</code>。它有可能是导致你不能自动刷新的凶手(我现在都没搞明白到底该安装，还是取消)</p>
<h2 id="结束">结束</h2><p>步骤都走完了，因为在上面的<code>package.json</code>中已经进行了<code>scripts</code>项的配置。运行<code>npm start</code>，打开<code>localhost:8080</code></p>
<p>可以看到设置的背景色已经出来了,去改变一下背景颜色？data？template？ </p>
<p>看看浏览器会不会自动刷新？</p>
<hr>
<p>如果你按照我的步骤，并且，npm包安装没有错误的话，应该就能成功了。</p>
<p>不行的话，请再仔细对照去看看有什么地方没有编写对吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解]]>
    </summary>
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack入坑之旅（四）扬帆起航]]></title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/</id>
    <published>2016-03-24T09:28:34.000Z</published>
    <updated>2016-03-25T15:28:43.852Z</updated>
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
</ul>
<h2 id="加载图片">加载图片</h2><p>现在来我们来试试加载图片，首先第一件事情，肯定是安装对应的<code>loader</code>。它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader --save-dev</span><br></pre></td></tr></table></figure>
<p>当然你也可以在<code>package.json</code>添加依赖，然后再<code>npm nstall</code>一样的效果。</p>
<p>现在去我们的项目目录中添加img文件夹，添加两张图片，一张大图jpg，一张小图png。</p>
<p>然后在我们的<code>webpack.config.js</code>中添加这段：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loaders: [</span><br><span class="line">    &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">"style!css"</span> &#125;,</span><br><span class="line">    &#123; test: <span class="regexp">/\.(png|jpg)$/</span>, loader: <span class="string">"url-loade?limit=8192"</span> &#125;   <span class="comment">// 添加到这！并且会按照文件大小, 或者转化为 base64, 或者单独作为文件</span></span><br><span class="line">    <span class="comment">//在大小限制后可以加上&amp;name=./[name].[ext]，会将我们的文件生成在设定的文件夹下。</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在html中添加：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qwe"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"asd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在我们的css中添加：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*记得写宽高。。*/</span></span><br><span class="line"><span class="selector-id">#qwe</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/logo.png);<span class="comment">/*3.2k*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#asd</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/5.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续运行<code>webpack</code>如果正确的话，打开我们的浏览器，就可以看到我们正确的图片显示。</p>
<p>如果不正确，请运行<code>npm install file-loader -D</code>，再进行尝试。</p>
<p>现在我们打开浏览器的调试工具，可以看到小于8K的 <strong>背景图片</strong> 图片已经被转化成了base64的编码，而大于8k的图片则并没有转化（<strong>注意它的地址的变化！</strong>）。<br>直接使用img导入的图也并没有进行base64的转化。</p>
<h3 id="热加载">热加载</h3><p>当项目逐渐变大，<code>webpack</code>的编译时间会变长，可以通过参数让编译的输出内容带有 <strong>进度</strong> 和 <strong>颜色</strong> 。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --progress --colors</span><br></pre></td></tr></table></figure>
<p>下面还有一些其他常用的命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack <span class="comment">#最基本的启动webpack命令</span></span><br><span class="line">webpack -w <span class="comment">#提供watch方法，实时进行打包更新</span></span><br><span class="line">webpack -p <span class="comment">#对打包后的文件进行压缩</span></span><br><span class="line">webpack <span class="_">-d</span> <span class="comment">#提供SourceMaps，方便调试</span></span><br><span class="line">webpack --colors <span class="comment">#输出结果带彩色，比如：会用红色显示耗时较长的步骤</span></span><br><span class="line">webpack --profile <span class="comment">#输出性能数据，可以看到每一步的耗时</span></span><br><span class="line">webpack --display-modules <span class="comment">#默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</span></span><br></pre></td></tr></table></figure>
<p>我们已经把webpack的内容了解了一部分了，那么在生产环境中，我不想每一次进行改变，都去命令行中运行我们的<code>webpack</code>的命令，我们应该怎么样实现改变后自动更新呢？</p>
<p>webpack 为我们提供了一个<code>webpack --watch</code>，他会启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。</p>
<p>去运行这个命令试试吧！！</p>
<p>在我们改变代码之后，命令行中可以看到直接就自动编译了，但是显然不够智能，还需要我们手动去刷新浏览器，（其实用<code>liveload</code>hack成自动刷新！）。</p>
<p>我反正不能忍，还要手动刷新浏览器。所以使用<code>webpack-dev-server</code>会是一个更好的办法！</p>
<p>它将在<code>localhost:8080</code>启动一个express静态资源web服务器，并且会以监听模式自动运行<code>webpack</code>，在浏览器打开<code>http://localhost:8080/</code>或 <code>http://localhost:8080/webpack-dev-server/</code> 可以浏览项目中的页面和编译后的资源输出，并且通过一个<code>socket.io</code>服务实时监听它们的变化并自动刷新页面。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install webpack-dev-server -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>我们来试试使用vue能配合webpack能不能实现自动刷新。(有关vuejs的知识，大家可以可以先自行上<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">官网查看</a>，我在接下来可能也会一步一步的把vue的例子全部敲一遍，再放到github上来让点评)</p>
<p>首先运行<code>npm install vue -save</code>将vue添加到我们的项目依赖中去。</p>
<p>首先在我们的<code>entry.js</code>这个入口文件中进行添加：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import Vue form ("vue") //如果你安装了babel-loader的话，可以直接使用ES6的语法</span></span><br><span class="line"><span class="keyword">var</span> Vue =<span class="built_in">require</span>(<span class="string">"vue"</span>);</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"body"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">"hello vue.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>同样在<code>index.html</code>中添加<code></code>来响应vue的数据绑定。</p>
<p>运行<code>webpack-dev-server</code>。去浏览器查看试试效果吧！任意改变<code>message</code>中的值，可以看到浏览器会自动刷新。并且将改变的值展示在眼前。（有可能只在<code>http://localhost:8080/webpack-dev-server/</code>才会自动刷新）</p>
<p><strong>这里其实并没有完全对，不够全面，可能只能响应css的改变。将在下一篇继续调整该配置</strong></p>
<p>自动刷新都配好了。下面我们就来试试怎么加载vue的文件，来实现单文件组件！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解]]>
    </summary>
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack入坑之旅（三）webpack.config入门]]></title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/</id>
    <published>2016-03-24T09:28:14.000Z</published>
    <updated>2016-03-26T14:41:25.104Z</updated>
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
</ul>
<p>在上面我们已经尝试过了两种对于loader的使用方式，无论是在<code>require</code>的时候编写我们<code>loader</code>的前缀，还是在我们的命令行中进根据扩展名来自动绑定我们的<code>loader</code>，显然都不够自动化，在需要编译的语言继续增加的情况下，显然会是一个噩梦。<br>所以webapck实际上为我们提供了一个简单的方法，下面就一起来看看。</p>
<h2 id="了解webpack配置">了解webpack配置</h2><p>Webpack在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的<code>webpack.config.js</code>文件，这个文件是一个 <code>node.js</code> 模块，返回一个 <code>json</code> 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件。</p>
<p>所以现在我们就来新建一个<code>webpack.config.js</code>，在里面填写进下面的内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: [<span class="string">"./entry.js"</span>],</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: <span class="string">"style!css"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们现在仅仅需要运行:<code>webpack</code>，如果你的配置没有问题的话，可以在命令行中看到正确的输出，因为这个命令会自动在当前目录中查找<code>webpack.config.js</code>的配置文件，并按照里面定义的规则来进行执行。</p>
<p>去修改我们的css文件吧，感受一下它的便利。</p>
<p>上面我们仅仅是使用了这个配置文件，我们肯定想在实际的工作环境中，自我对于项目进行针对性的配置。下面我们就先来简单的了解一下里面参数的意义：</p>
<ul>
<li><code>entry</code>：指入口文件的配置项，它是一个数组的原因是webpack允许多个入口点。 当然如果你只有一个入口的话，也可以直接使用双引号<code>&quot;./entry.js&quot;</code></li>
<li><code>output</code>：配置打包结果，<code>path</code>定义了输出的文件夹，filename则定义了打包结果文件的名称</li>
<li><code>module</code>：定义了对模块的处理逻辑，这里可以用<code>loaders</code>定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的<code>loader</code>对文件进行处理，这正是<code>webpack</code>强大的原因。</li>
</ul>
<p>在这里仅仅能做一些很简单的介绍，如果想要真正做到在项目中的实际应用，还需要大量的练习与尝试。在此暂时不做过多的探究。等真正用到了再记录下来。</p>
<h3 id="了解webpack插件">了解webpack插件</h3><p>下面就来看看<code>webpack</code>中的插件：</p>
<p>插件可以完成更多loader不能完成的功能。插件的使用一般是在<code>webpack.config.js</code>中的<code>plugins</code> 选项中指定。</p>
<p><code>Webpack</code>本身内置了一些常用的插件，还可以通过npm安装第三方插件。</p>
<p>接下来，我们从一个最简单的，用来给输出的文件头部添加注释信息<code>BannerPlugin</code>的内置插件来实践插件的配置和运行。</p>
<p>修改<code>webpack.config.js，</code>添加 plugins配置项：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);<span class="comment">//必须引入</span></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> Webpack.BannerPlugin(<span class="string">"这里是打包文件头部注释！"</span>)<span class="comment">//注意这是一个数组..</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>运行正确的话应该是这样的，打开<code>bundle.js</code>，会发现在文件头部已经有了我们添加的注释：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*! 这里是打包文件头部注释 */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line">        <span class="comment">/***  省略 ***/</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>最简单的插件使用方式就是这样的了，就如上面一样的，平淡无奇。</p>
<p>如果看到了这里，相信你对于<code>webpack</code>的最基本的了解应该就差不多了，下面正式进入实战的阶段，来看看我们的一些<code>loader</code>到底是怎么样使用的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解]]>
    </summary>
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack入坑之旅（二）loader入门]]></title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/</id>
    <published>2016-03-24T09:28:00.000Z</published>
    <updated>2016-03-25T15:58:34.332Z</updated>
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a> 在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
</ul>
<h2 id="引子">引子</h2><p>在上一篇博客中我们已经成功的把简单的事情变得复杂了，把我们的只有几行代码的两个文件<code>first.js</code>、<code>entry.js</code>使用webpack进行文件打包生成了<code>bundle.js</code>。</p>
<p><code>Webpack</code> 能做的就是这样，只能处理 JavaScript 模块。</p>
<p>当然它如果能做的仅仅是这样，那它也就不可能这么火了=_=。所以它可以通过引入其他的<code>loader</code>，进而可以处理其它类型的文件。</p>
<h2 id="loader介绍">loader介绍</h2><p><code>Loader</code>可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过require来加载任何类型的模块或文件，比如<code>VUE</code>、<code>JSX</code>、<code>SASS</code> 或图片。</p>
<p>先来看看 loader 有哪些特性？(网上复制的，不喜欢可以跳过。<a href="http://www.hubwiz.com/class/5670d0a77e7d40946afc5e65" target="_blank" rel="external">地址</a>)</p>
<ul>
<li><code>Loader</code>可以通过管道方式链式调用，每个<code>loader</code>可以把资源转换成任意格式并传递给下一个<code>loader</code>，但是最后一个<code>loader</code>必须返回JavaScript。</li>
<li><code>Loader</code>可以同步或异步执行。</li>
<li><code>Loader</code>运行在node.js环境中，所以可以做任何可能的事情。</li>
<li><code>Loader</code>可以接受参数，以此来传递配置项给<code>loader</code>。</li>
<li><code>Loader</code>可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。</li>
<li><code>Loader</code>可以通过npm发布和安装。</li>
<li>除了通过<code>package.json</code>的<code>main</code>指定，通常的模块也可以导出一个<code>loader</code>来使用。</li>
<li><code>Loader</code>可以访问配置。</li>
<li>插件可以让<code>loader</code>拥有更多特性。</li>
<li><code>Loader</code>可以分发出附加的任意文件。</li>
</ul>
<h2 id="loader使用">loader使用</h2><h3 id="安装">安装</h3><p>根据上面说的<code>loader</code>的知识，就这样编译是肯定不行的，所以我们安装用来读取css文件的<code>css-loader</code>，再用 <code>style-loader</code> 把它插入到页面中。</p>
<p>在命令行中输入：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>
<p>在<code>package.json</code>中，主要是<code>devDependencies</code>这个字段有了改变：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "css-loader": "^0.23.1",</span><br><span class="line">    "style-loader": "^0.13.0",</span><br><span class="line">    "webpack": "^1.12.2"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然你可以用一个更加方便的方式进行安装，可以直接在<code>package.json</code>中，添加相应的依赖（如上面的代码），之后的命令行中运行<code>npm intall</code>，它会自动帮我们安装相应的依赖。</p>
<p>安装完毕。</p>
<h3 id="加载_CSS_文件">加载 CSS 文件</h3><p>还是上一篇博客中的文件，来添加一个css文件。<code>style.css</code>,在里面添加</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改我们的<code>entry.js</code>，原文件不变，添加<code>require(&quot;!style!css!./style.css&quot;);</code>,用来引入我们的css文件。</p>
<p>我们继续编译:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack entry.js bundle.js</span><br></pre></td></tr></table></figure>
<p>完成后，刷新我们的页面，背景颜色是不是已经变成了红色了呢？</p>
<h3 id="扩展名自动绑定loader">扩展名自动绑定loader</h3><p>这就是我们的<code>loader</code>的使用方式了。如果每次 <code>require</code> CSS 文件的时候都要写 <code>loader</code> 前缀<code>!style!css!</code>这样的东西，显然是一件很麻烦的事情。我们需要它可以根据模块类型（扩展名）来自动绑定需要的 <code>loader</code>。</p>
<p>来看看更简便的方式，将 <code>entry.js</code> 中的 <code>require(&quot;!style!css!./style.css&quot;)</code>修改为<code>require(&quot;./style.css&quot;)</code>，可以改变一个背景颜色让你更明显的查看到变化！然后执行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack entry.js bundle.js --module-bind <span class="string">"css=style!css"</span></span><br></pre></td></tr></table></figure>
<p>。。</p>
<p>。。。</p>
<p>没成功对吧!<br>因为<code>!</code>在命令行中具有特殊的含义，所以我们需要对它进行转义操作。再来试试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack ./entry.js bundle.js --module-bind <span class="string">"css=style\!css"</span></span><br></pre></td></tr></table></figure>
<p>成功的话，应该能再次看到背景的变化。</p>
<p>虽然这样可以将多个css文件进行编译打包，但是总感觉很是繁琐，我不想每次都运行那么一长串的命令怎么办？继续向下走吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a> 在本人有了新的理解]]>
    </summary>
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack入坑之旅（一）不是开始的开始]]></title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/</id>
    <published>2016-03-24T09:05:58.000Z</published>
    <updated>2016-03-25T15:59:28.854Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>最近学习框架，选择了vue，然后接触到了vue中的单文件组件，官方推荐使用 Webpack + vue-loader构建这些单文件 Vue 组件，于是就开始了webpack的入坑之旅。<br>因为原来没有用过任何的构建工具与模块化工具，所以本系列会十分的基础。并且可能有很多不正确的地方，希望大家谅解，并指出错误帮助改进。谢谢！</p>
</blockquote>
<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
</ul>
<h2 id="什么是webpack">什么是webpack</h2><blockquote>
<p>其实不是特别想写这个东西，但貌似所有的教程都有这个。随便写两句吧。可以直接跳过。 </p>
</blockquote>
<p>Webpack 是德国开发者 Tobias Koppers 开发的模块加载器兼打包工具，在webpack中，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。因此, Webpack 当中 js 可以引用 css, css 中可以嵌入图片 dataUrl。<br>对应各种不同文件类型的资源, Webpack 有对应的模块 loader比如vue用的是<code>vue-loader</code>当然这是后话，在后面我们再来说。</p>
<p>请看下图：<br><img src="/images/vue-webpack/00-webpack-base.png" alt="webpack"></p>
<p>官网查看：<a href="https://github.com/webpack/webpack" target="_blank" rel="external">https://github.com/webpack/webpack</a></p>
<h2 id="安装">安装</h2><p>前提：因为webpack是一个基于node的项目，所以首先需要确保你的电脑里面已经安装了<code>node.js</code>，以及<code>npm</code>。在这里我使用的版本是：<code>node：v5.8.0  ，npm：3.7.3</code>,若是版本问题，请更新到最新版。<br>若是有出现npm安装过慢的情况，可以使用<a href="https://github.com/Pana/nrm" target="_blank" rel="external">nrm</a>这个项目来进行npm源地址的切换。</p>
<p>首先我们直接进行全局的安装，运行如下命令：<code>npm install webpack -g</code>，可能需要一点时间。</p>
<p>安装成功后，在命令行输入<code>webpack -h</code>即可查看当前安装的版本信息。以及可以使用的指令。   </p>
<p>当然，我们都应该将webapck安装到当前的项目依赖中，此时就可以使用项目的本这样就可以使用项目本地版本的 Webpack。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保已经进入项目目录</span></span><br><span class="line"><span class="comment"># 确定已经有 package.json，没有就通过</span></span><br><span class="line">npm init </span><br><span class="line"><span class="comment"># 创建，直接一路回车就好，后面再来详细说里面的内容。</span></span><br><span class="line"><span class="comment"># 安装 webpack 依赖</span></span><br><span class="line"></span><br><span class="line">npm install webpack --save-dev</span><br><span class="line"><span class="comment"># 简单的写法：-_-,缩写形式 </span></span><br><span class="line">npm i webpack -D</span><br><span class="line"><span class="comment"># –save：模块名将被添加到dependencies，可以简化为参数-S。</span></span><br><span class="line"><span class="comment"># –save-dev: 模块名将被添加到devDependencies，可以简化为参数-D。</span></span><br></pre></td></tr></table></figure>
<p>安装好之后我们的<code>package.json</code>的目录应该是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"first-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"this is my first-demo"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"guowenfh"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.12.14"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>既然环境都已经安装好了，那么我们就开始来用webpack进行我们的第一个打包运行程序吧！</p>
<p>首先创建一个静态页面 <code>index.html</code> 和一个 JS 入口文件 <code>entry.js</code>,（这里你想用什么名字都可以，只需要在打包的时候读取文件为该名字就好，不过，到时候就知道这个名字的含义啦！）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意这里引入的不是我们创建的文件，而是用webpack生成的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** entry.js ***/</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML=<span class="string">"这是我第一个打包成功的程序"</span>;</span><br></pre></td></tr></table></figure>
<p>文件都已经创建成功了，那么就开始我们的打包吧！</p>
<p><code>webpack entry.js bundle.js</code></p>
<p>在浏览器中打开<code>index.html</code>，就能看到我们设置的文字啦！：<strong>这是我第一个打包成功的程序</strong></p>
<p>这么简单的功能直接在html中引入不就好了吗？确实是这样的，不过我们这才刚刚开始嘛，不要急。</p>
<p>下面我们再来增加一个文件，名为<code>first.js</code>内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h2= <span class="built_in">document</span>.createElement(<span class="string">"h2"</span>)</span><br><span class="line">h2.innerHTML=<span class="string">"不是吧，那么快第二个打包程序啦！"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(h2);</span><br></pre></td></tr></table></figure>
<p>更改 <code>entry.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML=<span class="string">"这是我第一个打包成功的程序"</span>;</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./first.js"</span>);</span><br></pre></td></tr></table></figure>
<p>再来进行一次重复的工作，再打包一次。<code>webpack entry.js bundle.js</code>，如果成功，打包过程会显示日志：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hash: b1cfe7ff9d75ce235dc9</span><br><span class="line">Version: webpack 1.12.14</span><br><span class="line">Time: 54ms</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  1.82 kB       0  [emitted]  main</span><br><span class="line">   [0] ./entry.js 208 bytes &#123;0&#125; [built]</span><br><span class="line">   [1] ./first.js 145 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>
<p><code>Webpack</code> 会分析入口文件，<strong>解析包含依赖关系的各个文件</strong>。这些文件（模块）都打包到 <code>bundle.js</code> 。<code>Webpack</code> 会给每个模块分配一个唯一的 <code>id</code> 并通过这个 <code>id</code> 索引和访问模块。在页面启动时，会先执行 <code>entry.js</code> 中的代码，其它模块会在运行 <code>require</code> 的时候再执行。</p>
<p>刷新浏览器，可以发现我们的刚刚的代码已经生效，又有了新的文字出现。</p>
<p>好吧，我知道这么简单的你们不屑于看，等下我们升个级。</p>
<blockquote>
<p>下面是参考文档，也相当于一个汇总吧，有很多我还没实践到，还是可以多看看，好文章应该贴出来</p>
</blockquote>
<ul>
<li><a href="http://www.hubwiz.com/course/5670d0a77e7d40946afc5e65/" target="_blank" rel="external">webpack入门 - 汇智网</a></li>
<li><a href="https://segmentfault.com/a/1190000002552008" target="_blank" rel="external">Webpack 怎么用</a></li>
<li><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="external">Webpack 入门指迷</a></li>
<li><a href="https://github.com/vikingmute/webpack-for-fools/blob/master/entries/chapter-1.md" target="_blank" rel="external">Webpack傻瓜式指南（一）</a></li>
<li><a href="https://github.com/vikingmute/webpack-for-fools/blob/master/entries/chapter-2.md" target="_blank" rel="external">Webpack傻瓜式指南（二）</a></li>
<li><a href="http://jiongks.name/blog/just-vue/" target="_blank" rel="external">Vue + webpack 项目实践</a></li>
<li><a href="http://www.w3ctech.com/topic/1557" target="_blank" rel="external">webpack 入门及实践</a></li>
<li><a href="http://javascript.ruanyifeng.com/#nodejs" target="_blank" rel="external">JavaScript 标准参考教程（alpha）–Node.js</a></li>
<li><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">应该是最好懂的Webpack教程—阮一峰</a> 还没敲呢，应该全部敲一遍的。</li>
<li><a href="http://www.h-simon.com/42/" target="_blank" rel="external">webpack常用配置总结</a></li>
<li><a href="https://segmentfault.com/a/1190000004505747" target="_blank" rel="external">Express结合Webpack的全栈自动刷新</a></li>
<li><a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">Vue.js官方教程</a></li>
<li><a href="http://vuejs.github.io/vue-router/zh-cn/" target="_blank" rel="external">vue-router文档</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>最近学习框架，选择了vue，然后接触到了vue中的单文件组件，官方推荐使用 Webpack + vue-loader构建这些单文件 Vue 组件，于是就开始了webpack的入坑之旅。<br>因为原来没有用过任何的构建工具与模块化工具，所以本系列会]]>
    </summary>
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（六）其它内置组件：进度条、列表组、面板等]]></title>
    <link href="http://guowenfh.github.io/2016/03/01/Bootstrap-06-other-more/"/>
    <id>http://guowenfh.github.io/2016/03/01/Bootstrap-06-other-more/</id>
    <published>2016-02-29T17:41:42.000Z</published>
    <updated>2016-03-01T03:19:19.465Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>博客之外</p>
<p>只剩最后一天，二月份就结束了。距离上一篇博客已经有着整整一个月的时间，这一个月的时间，感觉技术上的成长又被搁置了，没有了之前闭关学习的心无旁骛，那段时间成长真的飞快。<br>在家喝酒，玩耍，到现在实习入职了一个星期，整整一个月时间，学习效率都十分的低，也可以说基本没学到什么新东西。今天是2月最后一天，不能再这样下去，好了懊恼的时间，不能太多，应该着眼当下，现在是2016-02-29 21:40，开始把bootstrap入门理论基础部分完结了吧，下一步就该进入一个新的阶段了！我将一直前行，加油！</p>
</blockquote>
<hr>
<h2 id="缩略图">缩略图</h2><p>其实在我们日常使用的网页中，随处都可以看到有缩略图的存在，比如淘宝的商品列表，慕课网上的课程列表等等，Bootstrap自然不会放过那么常见效果，它将这样的效果独立成为了一个模块组件，使用<code>.thumbnail</code>样式类，Boostrap缩略图的默认设计仅需最少的标签就能展示带链接的图片。</p>
<p>我们需要配合Bootstrap的栅格系统来达到一个不错的显示效果。在Bootstrap中文网中，我们可以看到这样的示例代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 此处应对图片做一些样式设置height: 180px;width: 100%; display: block;等 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们将上面代码中的列复制3份，改变浏览器的大小，我可以看到因为栅格系统的存在，我们的缩略图已经变成了响应式的。这是栅格系统起到的效果那么<code>.thumbnail</code>又起到了什么效果呢？<br>我们可以看到图片周围有了一圈边框，并且在边框与图片之间有着4px的padding，除此之外bootstrap还人性化的为我们的缩略图效果提供了hover效果。</p>
<p><strong>添加标题、描述内容、按钮</strong></p>
<p>我们当然不可能仅仅只展示一张可点击的图片就完了，我们时常还会配上相关的说明文字以及一些按钮等等。在已有的缩略图的基础上，我们需要使用<code>.caption</code>容器，并且在这个容器中放置其它的内容，来达到统一的显示效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加到上面代码中的.thumbnail容器内，a标签后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>说明文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是说明文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>看看效果吧：</p>
<p><img src="/images/Bootstrap/06-thumbnail.jpg" alt="缩略图展示"></p>
<h2 id="警示框">警示框</h2><p>其实在我们的网页中，总是避免不了各种的提示信息，比如我们的登陆界面中，总是避免不了输入错误的情况，就需要使用警示框来提示用户错误信息。Bootstrap为我们提供了一组这样的样式类。</p>
<p>Bootstrap使用<code>.alert</code>来控制警示框的大小边距等样式，然后再用：成功：<code>.alert-success</code>、信息：<code>.alert-info</code>、警告：<code>.alert-warning</code>和错误：<code>.alert-danger</code>、这样的一组样式类,来表示不同的情景颜色。   </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>恭喜您操作成功！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ...等等 --&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/06-alert.jpg" alt="缩略图展示"></p>
<p>关闭</p>
<p>除了展示效果之外，如果你还引入了Bootstrap的js文件。那么我们的还可以为我们的警示框非常简单的创造一些交互效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success alert-dismissable"</span>&gt;</span></span><br><span class="line">    success操作成功</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-remove"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到效果如下：（点击后面的icon便可以关闭该提示信息）</p>
<p><img src="/images/Bootstrap/06-alert-close.jpg" alt="缩略图交互"></p>
<p>那么好的效果，在实现的时候需要注意一些什么呢？主要有三个步骤：</p>
<ol>
<li>在普通的警示框<code>.alert</code>的基础上，添加<code>。alert-dismissable</code>类</li>
<li>在button标签中加入<code>close</code>类，实现警示框<strong>关闭按钮</strong>的样式（我在上面使用了Bootstrap自带的icon图标来实现关闭按钮）</li>
<li>在关闭按钮上添加自定义属性<code>data-dismiss=&quot;alert&quot;</code>（Bootstrap中是通过这样的自定义属性，再使用JS检测来实现关闭效果的）</li>
</ol>
<p><strong>警示框的链接</strong></p>
<p>有时我警示框中除了错误信息之外，还会加入一个链接地址，以便于用户在在新的页面中查找问题去处理他的错误。</p>
<p>Bootstrap仅仅使用了一个<code>.alert-link</code>的类就实现了这样的效果，主要是对于链接样式的<strong>高亮显示</strong>、<strong>加粗</strong>，并且<strong>颜色相应加深</strong>。（除此之外在hover上去后有下划线）</p>
<h2 id="进度条">进度条</h2><p>Bootstrap框架对于进度条提供了一个基本样式，一个100%宽度的背景色，然后一个子容器高亮，表示完成进度。其实制作这样进度条非常容易，一般使用两个容器，外容器具有一定的宽度，设置一个背景色，他的子元素设置一个宽度（父容器的宽度比例值<code>如60%</code>），同时设置一个高亮的背景色。</p>
<p>Bootstrap也是这样实现的，外层容器使用<code>.progress</code>类，子容器使用<code>.progress-bar</code>类（别忘记设置宽度）如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"width:80%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样它也提供了四个不同的情景颜色。<code>.progress-bar-info</code>..等，添加到<strong>子容器</strong>原有的类后即可</p>
<p>除了色彩，还可以使进度条的变为条纹的，只需要将<code>progress-striped</code>添加到原有的<strong>父容器</strong>类后，它同样具有彩色效果。更进一步的是，若在其后再添加一个<code>.active</code>类，可以实现动态的条纹进度条。（必须两个同时使用，使用css3动画实现）我们来试试：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress progress-striped active"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-danger"</span> <span class="attr">style</span>=<span class="string">"width:80%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- .... --&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/06-progress-striped.jpg" alt="条纹进度条"></p>
<p>我们还可以在一个进度条内，将不同状态的进度条放置在一起，水平排列，形成叠加进度条，这个就自己试试吧！^_^</p>
<p><strong>带标签的显示条</strong><br>使用很简单，只需要在子容器中添加相应的数字就可以了，不过下面这段代码会有什么效果呢？不妨也自己去试试吧！(在源码中搜索<code>aria-valuenow=&quot;0&quot;</code>可看到原因)</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"progress"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"progress-bar"</span> role=<span class="string">"progressbar"</span> aria-valuenow=<span class="string">"0"</span> aria-valuemin=<span class="string">"0"</span> aria-valuemax=<span class="string">"100"</span>&gt;<span class="number">0</span>%&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="媒体对象">媒体对象</h2><p>媒体对象一般包括以下几个部分：</p>
<ol>
<li>媒体对像的容器：常使用<code>.media</code>类名表示，用来容纳媒体对象的所有内容</li>
<li>媒体对像的对象：常使用<code>.media-object</code>表示，就是媒体对象中的对象，常常是图片</li>
<li>媒体对象的主体：常使用<code>.media-body</code>表示，就是媒体对像中的主体内容，可以是任何元素，常常是图片侧边内容</li>
<li>媒体对象的标题：常使用<code>.media-heading</code>表示，就是用来描述对象的一个标题，此部分可选</li>
<li><code>.pull-left</code>或者<code>.pull-right</code>来控制媒体对象中的对象浮动方式。(如图片在左或者在右)</li>
</ol>
<p>那么我们可以看到的结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"pull-left"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">".."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>默认样式的媒体对象组件允许在一个内容块的左边或右边展示一个多媒体内容（图像、视频、音频）。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以实现最普通的图片在左，标题与介绍文字在右的媒体对象组。</p>
<p>我们在论坛中常常能看到和Bootstrap中文官网媒体对象组模块类似的阶梯状媒体对象，它是怎么实现的呢？<br>其实很简单，我们只需要在上一级的<code>.media-body</code>容器最后添加新的额媒体对象容器<code>.media</code>就可以实现这样的阶梯效果</p>
<p><img src="/images/Bootstrap/06-media.jpg" alt="媒体对象"></p>
<p>除了这样的阶梯形式，我们还可以在论坛评论系统中看到，评论是平铺着下来的，也就是媒体对象列表。</p>
<p>我们只需要将原来的<code>.media</code>放在<code>.media-list</code>容器中就可以实现，不过既然都说了是列表，那我们还是直接使用ul&gt;li的排列方式吧:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Bootstrap同样帮我们清除了，媒体对象列表中的ul&gt;li的默认样式，使展示更急美观</p>
<h2 id="列表组">列表组</h2><p>列表组是Bootstrap框架新增的一个组件，可以用来制作列表清单、垂直导航等效果，也可以配合其他的组件制作出更漂亮的组件。它主要包括两个部分：</p>
<ol>
<li><code>.list-group</code>：列表组容器，<strong>常用的是ul元素</strong>，当然也可以是ol或者div元素</li>
<li><code>.list-group-item</code>：列表项，<strong>常用的是li元素</strong>，当然也可以是div元素</li>
</ol>
<p>如：</p>
<h3 id="带徽章的列表组">带徽章的列表组</h3><p>带徽章的列表组其实就是将Bootstrap框架中的徽章组件和基础列表组结合在一起的一个效果。具体做法很简单，只需要在<code>.list-group-item</code>中添加徽章组件<code>.badge</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>玩转Bootstrap  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>基础Bootstrap的网页开发  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以实现笑效果如下：</p>
<p><img src="/images/Bootstrap/06-list-badge.jpg" alt="带徽章的列表"></p>
<p>如果在列表组中，我们希望列表项是链接的话，Bootstrap为我们提供了两种方案：</p>
<ol>
<li>直接将链接置于li<code>.list-group-item</code>容器内，它会有链接下划线的存在</li>
<li>将ul.list-group&gt;li.list-group-item的结构换成div.list-group&gt;a.list-group-item，此时与默认的列表组显示无异(emmet会吧？那就能理解我的代码的意思…)</li>
</ol>
<h3 id="自定义列表组">自定义列表组</h3><p>除了上面默认的列表组之外，为了更清晰的展示内容，Bootstrap实现了自定义列表组，主要是新增了两个类：</p>
<ol>
<li><code>.list-group-item-heading</code>：用来定义列表项头部样式</li>
<li><code>.list-group-item-text</code>：用来定义列表项主要内容</li>
</ol>
<p>结构如下编写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>图解CSS3<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>Sass中国<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="列表项的状态设置">列表项的状态设置</h3><p>和其他的组件一样，列表组也两个状态效果：</p>
<ul>
<li><code>.active</code>：表示当前状态</li>
<li><code>.disabled</code>：表示禁用状态</li>
</ul>
<p>只需要在相应的列表项上添加。<code>class=&quot;list-group-item active&quot;&gt;</code>，主要对于该项的背景颜色进行高亮，以及其中的<strong>徽章</strong>进行了<strong>高亮处理</strong></p>
<p>禁用状态，只是添加了一个灰色的背景色，以及文字的暗色处理</p>
<p>除了上面的两个最常用的状态之外，Bootstrap为我们的列表组也提供了不同的情景颜色，只需要在列表项中添加<code>.list-group-item-danger</code>这一系列的类。</p>
<h2 id="面板">面板</h2><p>同样作为一个新增的组件，基础面板非常简单，就是一个div容器运用了<code>.panel</code>样式，产生一个具有边框的文本显示块。由于<code>.panel</code>不控制主题颜色，所以在<code>.panel</code>的基础上增加一个控制颜色的主题<code>.panel-default</code>，另外在里面添加了一个<code>.div.panel-body</code>来放置面板主体内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- panel-default就是那一系列的情景类，设置不同的可以设置不同的颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>我是一个基础面板，带有默认主题样式风格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="带有头和尾的面板">带有头和尾的面板</h3><p>基础面板看上去太简单了，Bootstrap为了丰富面板的功能，特意为面板增加“面板头部”和“页面尾部”的效果：</p>
<ol>
<li><code>.panel-heading</code>：用来设置面板头部样式</li>
<li><code>.panel-footer</code>：用来设置面板尾部样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里对于不同的情景颜色，面板头的颜色改变十分明显 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>图解CSS3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>作者：大漠<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="面板中嵌套表格">面板中嵌套表格</h3><p>其实面板作为一个用于处理，别的组件完成不了的情况的组件，一般情况下可以把面板理解为一个区域，所以在使用面板的时候，都会在<code>.panel-body</code>放置需要的内容，可能是<strong>图片、表格或者列表等</strong>。</p>
<p>如果在面板中嵌套表格，只需要将编写好的表格直接放置在面板中即可，不过有着如下两种形式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>图解CSS3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是放在panel-body后面，实际上我们还可以将table放在panel-body里面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>作者：大漠<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两个效果最大的差异是：</p>
<ol>
<li>放在<code>.panel-body</code><strong>内</strong>的表格，实际上就是简单的嵌套，设置了一些padding值等。</li>
<li>房在<code>.panel-body</code><strong>后</strong>的表格，会与面板融合在一起，与面板相接的地方，不会有着边框的展示，而是直接展示面板的边框</li>
</ol>
<p><strong>在面板中嵌套列表组时，同样是这样的两个差异</strong></p>
<hr>
<p>到这里我们的Bootstrap基础理论入门就结束了，实际上花了很多时间都是在理论上，并且中间还停歇了很长的时间。下一步我们需要做的就是在实战中去不断掌握它，了解它的细节，帮助我们能够缩短搭建时间、快速的搭建网站，并且让其在不同的终端下达到一个非常好的显示效果。</p>
<p>现在各个方面还是有很多不足，坚持学习，继续改进，加油！我的目标可是web全栈呢！</p>
<p>2016-03-01 01:40</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>博客之外</p>
<p>只剩最后一天，二月份就结束了。距离上一篇博客已经有着整整一个月的时间，这一个月的时间，感觉技术上的成长又被搁置了，没有了之前闭关学习的心无旁骛，那段时间成长真的飞快。<br>在家喝酒，玩耍，到现在实习入职了一个星期，整整一个]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（五）导航条、分页导航]]></title>
    <link href="http://guowenfh.github.io/2016/01/30/Bootstrap-05-navbar-pagination/"/>
    <id>http://guowenfh.github.io/2016/01/30/Bootstrap-05-navbar-pagination/</id>
    <published>2016-01-30T15:12:50.000Z</published>
    <updated>2016-03-01T02:57:55.630Z</updated>
    <content type="html"><![CDATA[<h2 id="导航条">导航条</h2><p>导航条（navbar）和我们在上一个笔记中介绍的导航（nav）相比，就多了一个<strong>“条”</strong>字。其实在Bootstrap框架中他们有着一定的区别。<br>在导航条(navbar)中有一个背景色、而且导航条可以是纯链接（类似导航），也可以是表单，还有就是表单和导航一起结合等多种形式。它们在移动设备上可以折叠（并且可开可关），且在视口（viewport）宽度增加时逐渐变为水平展开模式。</p>
<h3 id="基础导航条">基础导航条</h3><p>实际上，导航条和导航在外观上的差别并不是那么的大，但是在实际使用中导航条要比导航复杂得多。下面就来实现一个最基础的导航条。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-default"</span> role=<span class="string">"navigation"</span>&gt;<span class="xml"><span class="comment">&lt;!--role是为了方便屏幕阅读器理解此处内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Other more<br>可以达到的效果是这样的：</p>
<p>宽屏：<br><img src="/images/Bootstrap/05-navbar-1.jpg" alt="基础导航条宽"></p>
<p>窄屏：<br><img src="/images/Bootstrap/05-navbar-2.jpg" alt="基础导航条窄"></p>
<p>在制作一个基础导航条时，主要注意以下几点：</p>
<ol>
<li>首先在制作导航的列表(<code>&lt;ul class=&quot;nav&quot;&gt;</code>)基础上添加类名<code>.navbar-nav</code></li>
<li>在列表外部添加一个容器（div）在这里允许的话<strong>推荐使用</strong><code>&lt;nav&gt;</code>，并且使用类名<code>.navbar</code>和<code>.navbar-default</code></li>
<li><code>.navbar</code>类的主要功能就是设置左右padding和圆角等效果，通过<code>.navbar-default</code>来进行控制导航条的颜色比如还有<code>.navbar-inverse</code>。（有兴趣的可以去看看源码）</li>
</ol>
<h3 id="带标题、二级菜单">带标题、二级菜单</h3><p>在Web页面制作中，一般都可以在菜单前面看到有一个标题（文字字号比其它文字稍大一些），其实在Bootstrap框架也为大家做了这方面考虑，其通过<code>.navbar-header</code>和<code>.navbar-brand</code>来实现，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>WEB开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当然也可以用来做logo，<a href="http://v3.bootcss.com/components/?#navbar-brand-image" target="_blank" rel="external">中文官网描述</a>，在此不进行详细描述。</p>
<p>二级菜单自然不用多说，在上一篇博客中已经进行了详细说明，若还是不太了解的话，可以再去翻翻我的上一篇博客，我们一起来看看下面这段代码以及能实现的效果：（注意这里使用的是<code>navbar-inverse</code>反色的导航条）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>WEB开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>JavaScript</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NodeJS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="/images/Bootstrap/05-navbar-3.jpg" alt="标题-下拉"></p>
<p>我们常常在导航条中都能看到搜索表单，比如知乎，新浪微博等等都具有，Bootstrap框架当然不可能缺掉这样的东西。使用方法也非常简单：</p>
<p>在Bootstrap框架中提供s    了一个<code>.navbar-form</code>，在<code>.navbar</code>容器中放置一个带有<code>.navbar-form</code>类名的表单；再添加<code>.navbar-left</code>让表单左浮动，更好实现对齐。<br>在Bootstrap中，还提供了<code>.navbar-right</code>样式，让元素在导航条靠右对齐。</p>
<p>把这段代码复制到代码当中看看效果吧：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span> <span class="attr">rol</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"请输入关键词"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="按钮、文本和链接">按钮、文本和链接</h3><p>除了上面的一些样式之外，bootstrap框架提供了三种其他样式：</p>
<ol>
<li>导航条中的按钮<code>navbar-btn</code>，使不在<code>&lt;form&gt;</code>中的按钮在导航条里垂直居中</li>
<li>导航条中的文本<code>navbar-text</code>，一般使用<code>&lt;p&gt;</code>元素，达到最优的行距</li>
<li>导航条中的普通链接<code>navbar-link</code>，非导航的链接，添加这个类，可以有正确的默认颜色与反色设置</li>
</ol>
<p>但这三种样式在框架中使用时受到一定的限制，需要和<code>navbar-brand</code>、<code>navbar-nav</code>配合起来使用。而且<strong>对数量也有一定的限制，一般情况在使用一到两个不会有问题，超过两个就会有问题</strong>。</p>
<h3 id="固定导航条">固定导航条</h3><p>有时，我们希望导航条固定在浏览器顶部或底部，Bootstrap为我们方便的提供了两个类来实现这样的样式：</p>
<ol>
<li><code>.navbar-fixed-top</code>：导航条固定在浏览器窗口顶部</li>
<li><code>.navbar-fixed-bottom</code>：导航条固定在浏览器窗口底部</li>
</ol>
<p>使用方法很简单，只需要在制作导航条最外部容器（navbar）上追加对应的类名即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个固定的导航条会<strong>遮住页面上的其它内容</strong>，除非你给<code>&lt;body&gt;</code>元素底部设置了<code>padding</code>。提示：导航条的<strong>默认高度</strong>是 50px。如：<code>body { padding-bottom: 70px; }</code>，当然你也可以使用你自己的值。</p>
<h2 id="响应式导航条">响应式导航条</h2><p>在上面的例子中，导航条就仅仅能大屏幕下有一个不错的效果，在屏幕变小的情况下，还<strong>直接把所有的导航项直接展现出来就不适合了</strong>。为了有一个更好的显示效果，响应式的导航条设计也就随之而来。我们先来看看效果，再一步一步分析它！</p>
<p><img src="/images/Bootstrap/05-navbar-4.jpg" alt="响应式导航条"></p>
<p>窄屏时，点击右边的按钮图标可展开，效果与上面的展开效果除了<code>active</code>状态不再溢出容器外，其他基本相同。实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- .navbar-toggle样式用于toggle收缩的内容，即nav-collapse collapse样式所在元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-responsive-collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle Navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 确保无论是宽屏还是窄屏，navbar-brand都显示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>WEB开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 屏幕宽度小于768px时，div.navbar-responsive-collapse容器里的内容都会隐藏，显示icon-bar图标，当点击icon-bar图标时，再展开。屏幕大于768px时，默认显示。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse navbar-responsive-collapse"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ol>
<li>和普通导航条一样，最外层使用<code>&lt;div class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;</code>容器包裹，主要是<code>.navbar</code>和 <code>.navbar-default</code>类。</li>
<li>保证在窄屏时<strong>需要折叠的内容必须</strong>包裹在带一个div内，并且为这个div加入<code>.collapse</code>、<code>.navbar-collapse</code>两个类名。最后为这个div<strong>添加一个class类名或者id名</strong>。</li>
<li><p>保证在窄屏时要显示的图标样式（固定写法）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle Navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>并为button添加<strong>data-target=”.类名/#id名”</strong>，究竞是类名还是id名呢？由<strong>需要折叠的div</strong>来决定。（这里很关键，你可以把上面的代码在这里进行修改，会发现无法展开）</p>
</li>
</ol>
<h2 id="分页导航">分页导航</h2><p>分页导航几乎在所有的网站都可以看到，好的分页导航可以给用户带来更好额用户体验，还可以方便爬虫在网页中进行搜索。</p>
<h3 id="带页码的分页导航">带页码的分页导航</h3><p>带页码的分页导航，应该是最常见的一种分页导航，特别是在列表页内容很多的时候，会给用户提供带页码的分页导航方式，在Bootstrap中使用的是<code>ul&gt;li&gt;a</code>这样的结构，在ul标签上加入<code>pagination</code>类：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;第一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>最后一页&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现效果如下：</p>
<p><img src="/images/Bootstrap/05-navbar-5.jpg" alt="分页码导航"></p>
<p>可以看到同样会有<code>hover</code>、<code>active</code>、<code>disabled</code>等等状态，当然它也可以调整大小：在外层容器中的<code>.pagination</code>类后，添加<code>.pagination-lg</code>让分页导航变大；<code>.pagination-sm</code>让分页导航变小：</p>
<h3 id="翻页分页导航">翻页分页导航</h3><p>其实这种方式，就是看不到具体的页码，只会提供一个<strong>上一页</strong>和<strong>下一页</strong>的按钮。</p>
<p>使用方式很简单，也就是在ul标签上添加<code>pager</code>类：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它默认是居中显示的，如果我们需要一个居左一个居右显示的话，添加两个样式：<code>previous</code>让“上一步”按钮居左；<code>next</code>让“下一步”按钮居右。（同样可以使用<code>disabled</code>表示禁用状态）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2><h3 id="标签">标签</h3><p>在一些Web页面中常常会添加一个标签用来告诉用户一些额外的信息，比如说在导航上添加了一个新导航项，可能就会加一个“new”标签，来告诉用户。这是新添加的导航项。<br>在Bootstrap专门将这样的效果提取成为了单独的标签组件。可以使用<code>&lt;span&gt;</code>这样的行内标签添加<code>.label</code>类来控制大小，再使用情景类来控制高亮显示的颜色如：<code>label-default</code>、<code>label-danger</code>等等（在原来笔记中说到过这样的情景类，只不过这里需要加上不同的前缀）</p>
<p><img src="/images/Bootstrap/05-navbar-6.jpg" alt="导航条标签"></p>
<h3 id="徽章（角标）">徽章（角标）</h3><p>其实和上面的标签效果很大一部分是类似的，一般用作信息提示，例如剩余多少未读信息等等，也就是我们常常能在右上角看到的未读信息提示。在Bootstrap中，把这种效果称作为徽章效果，使用<code>badge</code>类来实现。</p>
<p>给链接、导航等元素嵌套 <code>&lt;span class=&quot;badge&quot;&gt;</code> 元素，可以很醒目的展示新的或未读的信息条目。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Inbox <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>42<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">  Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/05-navbar-7.jpg" alt="导航条角标"></p>
<p>通过查看源码，我们可以发现Bootstrap同样使用<code>:empty</code>伪元素，来设置当没有内容的时候隐藏：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.badge</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是IE8 不支持 <code>:empty</code> 选择符，所以不会默认隐藏；</p>
<p>Bootstrap 中的徽章会适配导航元素的激活状态。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>42<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/05-navbar-8.jpg" alt="导航条角标-适应激活"></p>
<p>好了《导航条、分页导航》的学习到此就结束了，下面需要学习Bootstrap中其他的一些比较零散的<strong>内置组件</strong>。</p>
<p>继续坚持，加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="导航条">导航条</h2><p>导航条（navbar）和我们在上一个笔记中介绍的导航（nav）相比，就多了一个<strong>“条”</strong>字。其实在Bootstrap框架中他们有着一定的区别。<br>在导航条(navbar)中有一个背景色、而且导航条可]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（四）菜单、按钮及导航]]></title>
    <link href="http://guowenfh.github.io/2016/01/30/Bootstrap-04-dropdown-btn-nav/"/>
    <id>http://guowenfh.github.io/2016/01/30/Bootstrap-04-dropdown-btn-nav/</id>
    <published>2016-01-29T17:23:36.000Z</published>
    <updated>2016-01-30T16:08:55.495Z</updated>
    <content type="html"><![CDATA[<p>我们接下来要学习的东西呢，是Bootstrap为我们提供的一些组件，这些组件的使用非常简单，可以方便快捷帮助我们搭建网站，并且能达到一个不错的显示效果。我们最需要注意的就是：<strong>HTML的结构</strong>和bootstrap提供<strong>添加到结构上的类以及属性</strong>。<br>这些组件的交互功能是依赖于jQuery库实现的，所以还必须引入jQuery.js，且必须在Bootstrap.js之前。正式上线的话直接使用压缩版本就可以了如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"../js/jquery-min-1.11.3.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"../js/bootstrap.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="菜单">菜单</h2><h3 id="基本用法">基本用法</h3><p>在官方文档中，我们看到的下拉菜单组件是这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"dropdownMenu1"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    下拉菜单<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dropdownMenu1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单项1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单项2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么，到底哪一些属性是必须的、用来控制行为的呢？又有哪一部分是起到修饰作用的？</p>
<p>我们来自己简化一下这一段代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span><span class="string">data-toggle="dropdown"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们来看看简化前后的对比图：</p>
<p><img src="/images/Bootstrap/04-dropdown-1.jpg" alt="下拉菜单（基本用法）"></p>
<p>在使用Bootstrap框架中的下拉菜单组件时，其结构运用的正确与否非常的重要，如果结构和类名未使用正确，直接影响组件是否能正常运用。经过我们上面的简化，最终可以看到核心要求有以下几点：</p>
<ol>
<li>使用一个名为<code>.dropdown</code>的容器包裹了整个下拉菜单元素，示例中为：<code>&lt;div class=&quot;dropdown&quot;&gt;&lt;/div&gt;</code></li>
<li>使用了一个<code>&lt;button&gt;</code>按钮做为父菜单，并且定义类名<code>.dropdown-toggle</code>和自定义<code>data-toggle</code>属性，且值必须和最外容器类名一致，此示例为：<code>data-toggle=&quot;dropdown&quot;</code></li>
<li>下拉菜单项使用一个ul列表，并且定义一个类名为<code>.dropdown-menu</code>，此示例为：<code>&lt;ul class=&quot;dropdown-menu&quot;&gt;</code></li>
</ol>
<p>也就是说，我们仅仅需要牢记这3个步骤我们就可以使下拉菜单生效，<code>&lt;button&gt;</code>内的<code>&lt;span&gt;</code>标签，也仅仅是用来进行图标的展示，让菜单更加清晰。不过虽然如此，我个人建议在<strong>实际的使用过程</strong>中，把Bootstrap框架中的下拉菜单的<strong>其它属性也一并加上</strong>，这样更加友好的为不同的客户<strong>如：屏幕阅读器</strong>提供了一个优质的体验。</p>
<p>那么这些是怎么起作用的呢？</p>
<p>查看CSS源码可以看到<code>.dropdown-menu</code>有一个<code>display:none</code>，所以下拉列表项默认隐藏的；我们继续打开chrome开发者工具（F12），可以看到每一次在列表项展现出来时，<code>.dropdown</code>类后还增加了一个<code>.open</code>的类；不用多说想肯定就是这个类在起作用，我们再继续回到CSS源码中去可以看到：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.open</span> &gt; <span class="selector-class">.dropdown-menu</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看到这里也应该不用过多说明了，添加了这个<code>.open</code>类时，<code>.dropdown-menu</code>自然的就显示出来了。</p>
<h3 id="下拉菜单修饰">下拉菜单修饰</h3><h4 id="下拉分隔线">下拉分隔线</h4><p>在Bootstrap框架中的下拉菜单还提供了下拉分隔线，假设下拉菜单有两个组，那么组与组之间可以通过添加一个<strong>空</strong>的<code>&lt;li&gt;</code>，并且给这个<code>&lt;li&gt;</code>添加类名<code>.divider</code>来实现添加下拉分隔线的功能。<code>&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</code>对应的样式代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropdown-menu</span> <span class="selector-class">.divider</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">9px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="菜单标题">菜单标题</h4><p>上一小节讲解通过添加<code>divider</code>可以将下拉菜单分组，为了让这个分组更明显，还可以给每个组添加一个头部（标题）：<code>&lt;li  class=&quot;dropdown-header&quot;&gt;第一部分菜单头部&lt;/li&gt;</code>。</p>
<p>从源码中比较关键的两个点是：标题的字体颜色是：<code>color: #777;</code>，还有内填充<code>padding: 3px 20px;</code></p>
<h4 id="对齐方式">对齐方式</h4><p>Bootstrap框架中下拉菜单<strong>默认是左对齐</strong>也就是添加<code>.dropdown-menu-left</code>类所能达到的效果，如果你想让下拉菜单<strong>相对于父容器右对齐</strong>时，可以在<code>.dropdown-menu</code>上（也就是你的菜单项的ul）添加一个<code>.pull-right</code>或者<code>.dropdown-menu-right</code>类名，如下所示：<code>&lt;ul class=&quot;dropdown-menu pull-right&quot; &gt;</code><br>源码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropdown-menu</span><span class="selector-class">.pull-right</span>,</span><br><span class="line"><span class="selector-class">.dropdown-menu-right</span> &#123;<span class="comment">/*两个类自选*/</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然你只进行这样的设置的话，可能还会有一些奇怪的情况出现，比如列表项跑到屏幕最右边去了，所以同时一定要为<code>.dropdown</code>添加<code>float:left</code>样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropdown</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/04-dropdown-2.jpg" alt="下拉菜单（右对齐）"></p>
<h4 id="菜单项状态">菜单项状态</h4><p>下拉菜单项的默认的状态（不用设置）有悬浮状态（<code>:hover</code>）和焦点状态（<code>:focus</code>）：（包括下面提到的状态都必须在li中包含a标签才有- -）</p>
<p>下拉菜单项除了上面两种状态，还有<strong>当前状态</strong>（<code>.active</code>）和<strong>禁用状态</strong>（<code>.disabled</code>）。这两种状态使用方法只需要在对应的菜单项上添加对应的类名如：<code>&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;桃&lt;/a&gt;&lt;/li&gt;</code></p>
<p>我们可以实现下面这样的效果：</p>
<p><img src="/images/Bootstrap/04-dropdown-3.jpg" alt="下拉菜单（右对齐）"></p>
<h2 id="按钮">按钮</h2><p>我们在<a href="http://guowenfh.github.io/2016/01/18/Bootstrap-02-form/">《Bootstrap入门笔记之（二）表单》</a>中，已经了解过了Bootstrap中按钮的使用，在这里我们继续进行一些扩展！</p>
<h3 id="按钮组及工具栏">按钮组及工具栏</h3><blockquote>
<p>单个按钮在Web页面中的运用有时候并不能满足我们的业务需求，常常会看到将多个按钮组合在一起使用，比如富文本编辑器里的一组小图标按钮等。这个时候我们就会需要用到按钮组</p>
</blockquote>
<p>对于结构方面，非常的简单。使用一个名为<code>.btn-group</code>的容器，把多个按钮放到这个容器中。如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如何转化成工具栏呢？只需要再用一个<code>.btn-toolbar</code>的内容，将我们的<code>.btn-group</code>再进行一次包裹，同时，我们还可以使用<code>.btn-group-lg</code>大按钮组、<code>.btn-group-xs</code>:超小按钮组这一系列的类添加到<code>.btn-group</code>容器来进行对一组按钮进行大小控制如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= "<span class="attr">btn-toolbar</span>"&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- …… --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= "<span class="attr">btn-group</span> "&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= "<span class="attr">btn-group</span> <span class="attr">btn-group-sm</span>"&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- …… --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面两段代码效果如下：</p>
<p><img src="/images/Bootstrap/04-btn-1.jpg" alt="按钮组及工具栏"></p>
<h3 id="嵌套分组">嵌套分组</h3><p>这里的嵌套分组其实就是在分组按钮中嵌套了一个下拉菜单。使用的时候，只需要把当初制作下拉菜单的<code>.dropdown</code>的容器换成<code>.btn-group</code>，并且和普通的按钮放在同一级。如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>产品展示<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>企业文化<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>组织结构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>客服服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然我们还可以从<strong>水平按钮组</strong>变成<strong>垂直分组</strong>，只需要在水平分组的最外层容器的类名<code>.btn-group</code>替换成<code>.btn-group-vertical</code>，就可以实现垂直分组的效果。</p>
<p><strong>按钮的向下向上三角形</strong></p>
<p>我们在下拉菜单和嵌套分组都都看到了一个按钮的向下三角形，我们是通过在<code>&lt;button&gt;</code>标签中添加一个<code>&lt;span&gt;</code>标签元素，并且命名为<code>caret</code>，这个三角形完全是通过CSS代码来实现的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.caret</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">4px</span> solid;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有的时候我们的下拉菜单会<strong>向上弹起</strong>，这个时候我们的<strong>三角方向需要朝上</strong>显示，实现方法：需要在<code>.btn-group</code>类上追加<code>dropup</code>类名（这也是做向上弹起下拉菜单要用的类名）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropup</span> <span class="selector-class">.caret</span>&#123;  </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;<span class="comment">/*可以看到这里top与bottom的变化*/</span></span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么现在就来对比一下，上面代码以及类的添加可以达到的不同效果：</p>
<p><img src="/images/Bootstrap/04-btn-2.jpg" alt="嵌套分组、垂直、向上展开"></p>
<h2 id="导航">导航</h2><p>导航对于一位前端开发人来说眼应该都不陌生。可以说，每一个网页里面都会有导航的存在，便于用户查找网站所提供的各项功能服务。那么如何使用Bootstrap框架制作各式各样的导航呢？</p>
<h3 id="基础样式">基础样式</h3><p>Bootstrap框架中制作导航条主要通过<code>.nav</code>样式。默认的<code>.nav</code>样式<strong>不提供</strong>默认的导航样式，必须附加另外一个样式才会有效，比如<code>nav-tabs</code>、<code>nav-pills</code>之类。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然他们同样也有<strong>当前状态</strong>（<code>.active</code>）和<strong>禁用状态</strong>（<code>.disabled</code>），我们给第一个导航添加当前状态，最后一个导航添加禁用状态，实现效果如下：</p>
<p><img src="/images/Bootstrap/04-nav-1.jpg" alt="导航-基础样式"></p>
<h3 id="修饰">修饰</h3><h4 id="垂直堆叠的导航">垂直堆叠的导航</h4><p>在实际运用当中，除了水平导航之外，还有垂直导航，就类似前面介绍的垂直排列按钮一样。制作垂直堆叠导航只需要在<strong><code>.nav-pills</code></strong>的基础上添加一个<code>.nav-stacked</code>类名即可，同时，我们和下拉菜单一样，同样可以使用组之间的分割线例，只需要在导航项之间添加<code>&lt;li class=”nav-divider”&gt;&lt;/li&gt;</code>,如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-stacked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>复制到浏览器中看看效果吧！</p>
<p>你应该已经发现了在垂直导航中，每一个导航项都是占<strong>文字居左</strong>，占100%的父容器宽度的，如果你想有响应式的效果，应该和栅格系统一起使用，另外为什么不试试使用<code>nav-tabs</code>来实现垂直导航呢？看看效果，你就会明白为什么不使用了。</p>
<p><strong>自适应导航</strong></p>
<p>自适应导航和前面制作自适应按钮是一样的，不过更换了一个类名，<code>.nav-justified</code>。当然他需要和<code>.nav-tabs</code>或者<code>.nav-pills</code>配合在一起使用。 它是响应式的，在宽度足够时，给多个导航项，均分空间；在达到一个临界值（768px）时，它会和垂直导航一样：每一项都充满父容器的宽度，不同的是，他的文字是<strong>居中显示</strong>的</p>
<h4 id="导航中加下拉菜单（二级导航）">导航中加下拉菜单（二级导航）</h4><p>前面介绍的都是使用制作一级导航，但很多时候，在Web页面常常会用到二级导航的效果。<br>在Bootstrap框架中制作二级导航就更容易了。只需要将li当作父容器，使用类名<code>.dropdown</code>，同时在<strong><code>li</code>中嵌套另一个列表<code>ul</code>
</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>JavaScript<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            …</span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的话不进行太多的讲解，与上面的嵌套按钮效果一致。</p>
<h4 id="面包屑式导航">面包屑式导航</h4><p>面包屑(Breadcrumb)一般用于导航，主要是起的作用是告诉用户现在所处页面的位置（<strong>当前位置</strong>）。一般在文章、博客、列表处用的比较多，需要用到<code>.breadcrumb</code>类。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>个人首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以实现的效果：</p>
<p><img src="/images/Bootstrap/04-nav-2.jpg" alt="导航-面包屑"></p>
<p>是不是很简洁明了呢？</p>
<p>好了我们对于《 菜单、按钮及导航》的学习到这里呢先就告一段落了，下一章节应该就是对于<strong>导航条、分页导航</strong>的学习了。继续加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们接下来要学习的东西呢，是Bootstrap为我们提供的一些组件，这些组件的使用非常简单，可以方便快捷帮助我们搭建网站，并且能达到一个不错的显示效果。我们最需要注意的就是：<strong>HTML的结构</strong>和bootstrap提供<strong>添加到结构上]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（三）栅格系统]]></title>
    <link href="http://guowenfh.github.io/2016/01/28/Bootstrap-03-Grid/"/>
    <id>http://guowenfh.github.io/2016/01/28/Bootstrap-03-Grid/</id>
    <published>2016-01-27T16:49:03.000Z</published>
    <updated>2016-01-30T16:08:48.243Z</updated>
    <content type="html"><![CDATA[<h2 id="实现原理">实现原理</h2><p>栅格系统是Bootstrap中的核心，正是因为栅格系统的存在，Bootstrap才能有着如此强大的响应式布局方案。下面是官方文档中的解说：</p>
<blockquote>
<p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。包含了用于简单的布局选项的预定义类，也包含了用于生成更多语义布局的功能强大的混合类。</p>
</blockquote>
<p>我们来理解一下这一段话，可以发现其中最重要的部分就是<strong>移动设备优先</strong>，那么什么是移动设备优先呢？</p>
<p>Bootstrap的基础CSS代码<strong>默认从小屏幕设备</strong>（比如移动设备、平板电脑）开始，然后使用<strong>媒体查询扩展到大屏幕设备</strong>（比如笔记本电脑、台式电脑）上的组件和网格。</p>
<p>有着如下策略：</p>
<ol>
<li>内容：决定什么是最重要的。</li>
<li>布局：优先设计更小的宽度。</li>
<li>渐进增强：随着屏幕大小增加而添加元素。</li>
</ol>
<h2 id="工作原理">工作原理</h2><ol>
<li><p>数据行（<code>.row</code>）必须包含在容器<code>.container</code>（固定宽度）或<code>.container-fluid</code>（100%宽度）中，以便为其赋予合适的排列（aligment）和内填充（padding）。如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="comment">&lt;!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span><span class="comment">&lt;!-- 默认一直充满整个父元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在数据行（<code>.row</code>)中可以添加列（column），但列数之和不能超过平分的总列数（在超过时，多余部分会换行显示），默认12。（使用Less或者Sass可以进行自定义设置）如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>页面上的<strong>具体内容</strong>应当放置于列（column）内，并且<strong>只有列</strong>（column）可以作为数据行<code>.row</code>容器的<strong>直接子元素</strong>。</p>
</li>
<li>预定义的网格类，比如 <code>.row</code> 和 <code>.col-xs-4</code>，可用于快速创建网格布局。</li>
<li>栅格系统中的列是通过指定<strong>1到12</strong>的值来表示其跨越的范围。例如，三个等宽的列可以使用三个<code>.col-xs-4</code>来创建。</li>
</ol>
<p><strong>注意事项：</strong></p>
<p>正如上面在注释部分所展现的一样的<code>.container</code>（固定宽度）是固定宽度的布局方式。通过查看源码，在查看<code>.container</code>类的时候我们会发现，它的宽度是响应式的：（如下）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;<span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">970px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*........*/</span></span><br></pre></td></tr></table></figure>
<p>从上面的css代码可以看到，该类默认为整个父元素的宽度（最小屏幕），但是在大屏幕下有着不同的宽度，并且在不同宽度下左右margin会同时增加或减少（水平居中）。</p>
<p><strong><code>.container-fluid</code>类就和<code>.container</code>的默认情况一样，为100%宽度。</strong>（CSS代码一样）</p>
<p>除此之外</p>
<p>从源码中我们还可以发现，除了有左右margin外，还可以看到该类是有着左右填充（padding）存在的。</p>
<p>如果我们继续查看源码，可以发现数据行<code>.row</code>中的每一个列也有着左右填充（padding）的存在，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-md-1</span>, <span class="selector-class">.col-lg-12</span> <span class="comment">/*......*/</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里，大家应该都能想到会有什么样的情况出现！我们在第一个和最后一个列因为<strong>双填充</strong>的存在，<strong>实际上对于内容的隔离</strong>已经到了<strong>30px</strong>。我们需要怎么消除影响呢？</p>
<p>Bootstrap是通过<code>.rows</code>上的外边距（margin）取负<code>margin-left: -15px;margin-right: -15px;</code>，表示第一列和最后一列的行偏移，用来抵消第一个列的左内距和最后一列的右内距。</p>
<h2 id="基本用法">基本用法</h2><p>一图胜千言，通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。使用方法我想应该不用再多说了，已经有提到过，直接一起来看看区别吧。（图片扒自<a href="http://v3.bootcss.com/css/#grid-less" target="_blank" rel="external">Bootstrap中文官网</a>）</p>
<p><img src="/images/Bootstrap/Grid-parameter.jpg" alt="栅格参数"></p>
<p>通过源码可以发现，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-md-1</span><span class="comment">/*......*/</span>&#123; <span class="attribute">float</span>: left;&#125;<span class="comment">/*所有的列都是默认向左浮动的*/</span></span><br><span class="line"><span class="selector-class">.col-md-1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-md-2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*.....*/</span></span><br><span class="line"><span class="selector-class">.col-md-12</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从这些CSS代码也就不难发现，Bootstrap中每一列所占的宽度，以及为何在列数设置超过12时，超过部分会换行显示了。</p>
<p>在下面所有的示例中每一列的背景颜色与边框的效果由如下CSS代码控制：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class *= col-]</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基础">基础</h3><p>那么我们就来看看一些示例吧，下面这种方式是最基本的用法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span>.col-md-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现的效果如下：</p>
<p><img src="/images/Bootstrap/Grid-base.jpg" alt="网格基本用法"></p>
<p>Bootstrap作为一个响应式框架当然不会只有那么简单的功能，我们继续往下走吧！</p>
<h3 id="列偏移">列偏移</h3><p>在某些情况下，我们不希望相邻的列紧靠在一起，如果你希望不通过额外的margin或其他的手段来实现的话，Bootstrap内置为我们提供了列偏移（offset），这一系列的类来帮助我们实现想要的效果。</p>
<p>只需要给需要偏移的列元素上添加类名<code>col-md-offset-*</code>(<strong>星号代表要偏移的列组合数</strong>)，那么具有这个类名的列就会向右偏移。<br>这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如：在列元素中添加<code>.col-md-offset-6</code> 类将 <code>.col-md-6</code>元素向右侧偏移了6个列（column）的宽度。</p>
<p>现在我们的代码是这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2 "</span>&gt;</span>col-md-8 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-2"</span>&gt;</span>col-md-4 col-md-offset-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-1"</span>&gt;</span>col-md-4 col-md-offset-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 "</span>&gt;</span>col-md-4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-4"</span>&gt;</span>col-md-3 col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-4"</span>&gt;</span>col-md-4 col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以实现的效果如下：</p>
<p><img src="/images/Bootstrap/Grid-offset.jpg" alt="网格基本用法"></p>
<p>从实现的效果我们就能发现一些东西，注意<strong>第二段的显示效果与代码</strong>，从那里我们可以发现：使用<code>col-md-offset-*</code>对列进行向右偏移时，要保证列与偏移列的总数不超过12，不然会致列断行显示。<br>其实原因也很简单：因为该类是对于列设置<code>margin-left</code>，并且我们在上面的源码展示中，也可以看有每一列都有着<code>float:left</code>的属性，从这些地方我们就不难发现在（偏移+列宽）超过12时，为何会换行显示了</p>
<h3 id="列排序">列排序</h3><p>列排序其实就是改变列的方向（顺序），就是改变左右浮动，并且设置浮动的距离。在Bootstrap框架的网格系统中是通过添加类名<code>col-md-push-*</code>和<code>col-md-pull-*</code> (和上面一样，星号代表移动的列组合数)。</p>
<p>Bootstrap仅通过设置left和right来实现定位效果。通过查看源码，我们可以看到基本设置比较简单，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-md-pull-12</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*...*/</span></span><br><span class="line"><span class="selector-class">.col-md-push-1</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-md-push-0</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是继续看看我们的实际效果吧！代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-push-8"</span>&gt;</span>.col-md-4  col-md-push-8 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-pull-4"</span>&gt;</span>.col-md-8  col-md-pull-4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 "</span>&gt;</span>.col-md-4  默认<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 "</span>&gt;</span>.col-md-8  默认<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/Grid-push-pull.jpg" alt="网格基本用法"></p>
<p>我们可以发现列的位置已经发生了改变</p>
<h3 id="列嵌套">列嵌套</h3><p>Bootstrap框架的网格系统还支持列的嵌套。你可以在一个列中添加一个或者多个行（<code>.row</code>）容器，然后在这个行容器中插入列（像前面介绍的一样使用列）。但在列容器中的行容器（<code>.row</code>），宽度为100%时，就是当前外部列的宽度。（其实就是在列中嵌套多个列，下面会有实际效果展示）</p>
<p>注意：被嵌套的行（<code>.row</code>）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列 -_- ）。</p>
<p>我们现在有这样一个需求：</p>
<ol>
<li>创建一个8-4列网格。（备注：以中屏md（970px）为例）。</li>
<li>在第一个8列网格中插入8-4列网格。</li>
<li>在第二个4列网格中插入9-3列网格。</li>
</ol>
<p>效果如下：</p>
<p><img src="/images/Bootstrap/Grid-nesting.jpg" alt="网格基本用法"></p>
<p>该如何实现呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span></span><br><span class="line">            我的里面嵌套了一个网格</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">            我的里面嵌套了一个网格</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span>&gt;</span>col-md-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span>col-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>是不是很简单呢？当然为了完全实现和效果图一样的展示，我们还需要对CSS进行一些添加，主要是对于嵌套的添加 一些高亮的样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class *= col-]</span> <span class="selector-attr">[class *= col-]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f36</span>;      </span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栅格系统的基础里面方面呢，上面已经说的差不多了，看上去十分简单不是吗？</p>
<p>要想在我们的实际项目中使页面在不同屏幕中达到一个最佳的显示效果，还需要我们对于栅格系统进行的灵活的运用！</p>
<p>下面就一起来进行一些实例的研究吧！</p>
<h2 id="实例：">实例：</h2><p>在上面我们已经实现了过最简单的从堆叠到水平排列的布局了，非常简单，我们只使用了单一的一组 <code>.col-md-*</code>栅格类，就创建了一个基本的栅格系统。<br>它在手机和平板设备上一开始是堆叠在一起的（超小屏幕到小屏幕这一范围），在桌面（中等）屏幕设备上变为水平排列</p>
<h3 id="移动设备和桌面屏幕">移动设备和桌面屏幕</h3><p>是否不希望在小屏幕设备上所有列都堆叠在一起？那就使用针对超小屏幕和中等屏幕设备所定义的类吧，即 <code>.col-xs-*</code> 和 <code>.col-md-*</code>。<br>我把Bootstrap中文官网的代码稍微做了一点修改。主要是将中间的<code>.col-md-4</code>和<code>.col-xs-6</code>两个类调换了一下位置（CSS层叠，说到这应该就不需要做更多的说明了吧。），代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-md-8"</span>&gt;</span>.col-xs-12 .col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-4"</span>&gt;</span>.col-xs-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-xs-6"</span>&gt;</span>.col-md-4 .col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-xs-6"</span>&gt;</span>.col-md-4 .col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-xs-6"</span>&gt;</span>.col-md-4 .col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>.col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>.col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>宽屏显示效果如下：<br><img src="/images/Bootstrap/Grid-mobile-desktop-1.jpg" alt="移动设备和桌面屏幕-桌面"><br>窄屏显示效果如下：<br><img src="/images/Bootstrap/Grid-mobile-desktop-2.jpg" alt="移动设备和桌面屏幕-移动"></p>
<p>其实从上面代码和实际的显示效果，我们就可以看出一些问题来：</p>
<ol>
<li>在宽屏时，使用<code>col-md-*</code>的布局方式，在窄屏时使用<code>col-xs-*</code>布局</li>
<li>响应式的列重置与列中设置的类的排列顺序无关。</li>
<li>响应式列重置，在一个<code>.row</code>仍然存在列超过12时，<code>col-xs-6</code><em>3=18。<strong>多余列</strong>的元素将作为一个<em>*整体单元</em></em>被另起一行排列。</li>
</ol>
<p>在了解了上面的这些问题之后是不是明了了一些呢？</p>
<p>举一反三，我们再来看一个更加复杂的例子</p>
<h3 id="手机、平板、桌面">手机、平板、桌面</h3><p>在上面案例的基础上，通过增加使用针对平板设备的 <code>.col-sm-*</code> 类，我们来创建更加动态和强大的布局吧。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-8"</span>&gt;</span>.col-xs-12 .col-sm-6 .col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-12 col-md-4"</span>&gt;</span>.col-xs-6 .col-sm-12 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这一次会比原来的情况更加复杂，一个会有3种情况出现：</p>
<p>宽屏：<br><img src="/images/Bootstrap/Grid-mobile-pad-desktop-1.jpg" alt="桌面"><br>中屏：<br><img src="/images/Bootstrap/Grid-mobile-pad-desktop-2.jpg" alt="平板"><br>窄屏：<br><img src="/images/Bootstrap/Grid-mobile-pad-desktop-3.jpg" alt="手机"></p>
<p>然后我们从这一部分代码与实际效果，再加上上面做的一点小总结，对比之后又能发现一些问题：</p>
<ol>
<li>Bootstrap中对于栅格系统的展示总是<strong>优先展示**</strong>对应屏幕大小**范围的类（<code>.col-xs-6</code>和<code>.col-sm-4</code>等等）。</li>
<li>在为不同大小屏幕，添加多个类一定要记住在<strong>基本用法</strong>处的表格中的内容，它决定了在不同大小屏幕下的显示与排列。</li>
<li>若还要继续添加在超大屏幕下的特定显示效果，只需要对列再添加一个<code>.col-lg-*</code>的类，就能达到你所想要的</li>
</ol>
<h3 id="响应式列重置">响应式列重置</h3><p>除了在上面讲到的内容，在官方文档中还提到了<strong>响应式列重置</strong>，在我看来其实就是以下几点（或者说在这样的条件下可以使用）：</p>
<ol>
<li>需要对于不同屏幕大小进行处理，添加多个对于列宽进行处理的类。</li>
<li>在缩小屏幕时，同一数据行（<code>.row</code>）针对小屏幕设置的类的宽度（<code>.col-sm-*</code>等等）加起来超过12，余下部分进行换行显示。</li>
<li>在不同列的高度，有比较大的差异。可以在<strong>未超过12</strong>与<strong>超过12</strong>的部分，两者之间添加下面这样的代码：<code>&lt;div class=&quot;clearfix visible-xs-block&quot;&gt;&lt;/div&gt;</code>。（<code>.visible-xs-block</code>这一系列的类，会在后面进行讲解）<br>它最主要的作用是：它是响应式的，会占据未超过12的部分的宽高，且只有在发生列换行显示（堆叠）才进行设置。</li>
<li>为了便于大家理解，我加一句：把上面那段代码复制到数据行<code>.row</code>容器内的最末端，它所占据的宽高和<code>.row</code>是一样的。（内容中有多段这样的代码的时候不成立，原因大家应该都能看出来了）</li>
</ol>
<p>说到这里呢，栅格系统的部分，基本告一段落了，我们即将开始对于<strong>菜单、按钮及导航</strong>，这一部分的组件进行学习</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="实现原理">实现原理</h2><p>栅格系统是Bootstrap中的核心，正是因为栅格系统的存在，Bootstrap才能有着如此强大的响应式布局方案。下面是官方文档中的解说：</p>
<blockquote>
<p>Bootstrap 提供了一套响应式、移动设备优]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（二）表单]]></title>
    <link href="http://guowenfh.github.io/2016/01/18/Bootstrap-02-form/"/>
    <id>http://guowenfh.github.io/2016/01/18/Bootstrap-02-form/</id>
    <published>2016-01-18T15:26:45.000Z</published>
    <updated>2016-01-28T06:46:27.480Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>关于表单的应用自然不需要多说，只要您的的网站可以用户登录，那么不可能不用到表单！表单主要功能是用来与用户做交流的一个网页控件，JavaScript发明之初最大的作用也就是用来进行表单操作。所以表单是每一个前端开发者必须要熟练掌握的东西。</p>
</blockquote>
<p>良好的表单设计能够让网页与用户更好的沟通。表单中常见的元素主要包括：<strong>文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等</strong>。其中每个控件所起的作用都各不相同，而且不同的浏览器对表单控件渲染的风格都各有不同。传统的HTML表单就不在这样进行讲解了，下面就开始Bootstrap表单的学习吧！</p>
<h2 id="一-_基础表单">一. 基础表单</h2><p>在Bootstrap对于基础表单没有做太多的定制效果，仅仅是对于一些元素的<strong>margin、padding和border</strong>进行了一些细化设置。<br>当然，也不会那么简单，在Bootstrap框架中，通过定制了一个类名<code>form-control</code>，也就是说，使用了类名<code>form-control</code>，将会实现一些设计上的定制效果。从源码中（2551行，嗯，善用搜索）可以得出结论如下：</p>
<ol>
<li>宽度变成了100%</li>
<li>设置了一个浅灰色（<code>#ccc</code>）的边框</li>
<li>具有4px的圆角</li>
<li>设置阴影效果，并且元素得到焦点之时，阴影和边框效果会有所变化</li>
<li>设置了placeholder(输入框的提示文字)的颜色为<code>#999</code></li>
</ol>
<p>这个类一般用于输入框，对于其他的类型使用，嗯，你可以试试自己尝试一下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span><span class="comment">&lt;!-- form-group这个类在在这里用于控制表单之间的间隔，之后会有另外介绍 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的邮箱地址"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的邮箱密码"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一般来说效果是这样的：<br><img src="/images/Bootstrap/form1.jpg" alt="基础表单"></p>
<h3 id="内联表单">内联表单</h3><p>还是上面那一段代码：我们只需要给<strong>form</strong>加上下面<code>.form-inline</code>这个类就可以实现表单元素在一行排列：</p>
<p><img src="/images/Bootstrap/form3.jpg" alt="内联表单"></p>
<p>它的实现原理很简单，其实就是在添加了这个类后，将内部的表单元素设置为了内联块（inline-block）。</p>
<p>我们继续改变屏幕大小会发现小到一定层度之后又变成了原来的样式，那是因为这个类是处于媒体查询中的！这样是为了更好的在移动设备上体验，Bootstrap本来就是一个响应式框架不是吗？</p>
<p>如果你想更简洁一点还可以对于<code>label</code>添加一个<code>.sr-only</code>类，把label标签进行隐藏。（注意是隐藏，而不是人为删除，设置label标签有助于屏幕阅读器理解此处的含义）</p>
<h3 id="水平表单">水平表单</h3><p>Bootstrap框架默认的表单是<strong>垂直显示风格</strong>，除了上面的内联表达之外，很多时候我们需要的是<strong>水平表单风格</strong>。在Bootstrap框架中要实现水平表单效果，必须满足以下两个条件：</p>
<ol>
<li>在<code>&lt;form&gt;</code>元素是使用类名<code>.form-horizontal</code>，作用如下： </li>
</ol>
<ul>
<li>设置表单控件padding和margin值。</li>
<li>改变“form-group”的表现形式，类似于栅格系统的“row”。</li>
</ul>
<ol>
<li>配合Bootstrap框架的栅格系统。（栅格布局会在以后的章节中详细讲解）</li>
</ol>
<ul>
<li>例如：使用<code>&lt;div class=&quot;col-sm-6&quot;&gt;&lt;/div&gt;</code>将我们的input进行包裹，具体情况到栅格布局的时候再说</li>
</ul>
<p>可以实现下面的效果，（同样处于媒体查询中）<br><img src="/images/Bootstrap/form2.jpg" alt="水平表单"></p>
<h2 id="二-_表单控件">二. 表单控件</h2><h3 id="输入框input">输入框input</h3><p>单行文本框在html编写时，我们都需要设置<strong>type</strong>属性为<strong>text</strong>，在Bootstrap中也必须正确的添加type的类型，因为在这里是使用CSS的属性选择器如：<code>input[type=&quot;text&quot;]</code>来进行样式设置的！<br>为了让控件在各种表单风格中样式不出错，需要添加类名“form-control”，如：<code>&lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;请输入您的邮箱&quot;&gt;</code></p>
<h3 id="下拉选择框select">下拉选择框select</h3><p>Bootstrap框架中的下拉选择框使用和原始的一致，但是Bootstrap框架为这些元素提供统一的样式风格。如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>  <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>踢足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>慢跑<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>想要实现多行选择，只需要在<strong>select</strong>中设置multiple属性的值为multiple。<code>&lt;select multiple class=&quot;form-control&quot;&gt;</code></p>
<p>需要注意的是，经过测试多行选择是固定高度的（82px），也就是说只有一个选项时，也占据那么高的高度，在选项多时，将出现滚动条</p>
<h3 id="文本域textarea">文本域textarea</h3><p>文本域和原始使用方法一样，设置<strong>rows可定义其高度</strong>，设置<strong>cols可以设置其宽度</strong>。但如果textarea元素中添加了类名<code>form-control</code>类名，则无需设置cols属性。因为Bootstrap框架中的<code>form-control</code>样式的表单控件宽度为100%或auto。<br>如：<code>&lt;textarea class=&quot;form-control&quot; rows=&quot;3&quot;&gt;&lt;/textarea&gt;</code></p>
<h3 id="复选框checkbox和单选按钮radio">复选框checkbox和单选按钮radio</h3><p>Bootstrap对于这两个按钮进行了一些优化，要想达到最佳显示效果，有着如下说明：</p>
<ol>
<li>不管是<code>checkbox</code>还是<code>radio</code>都使用<code>label</code>包起来了。</li>
<li><code>checkbox</code>按钮连同<code>label</code>标签放置在一个名为<code>.checkbox</code>的容器内，<code>radio</code>连同<code>label</code>标签放置在一个名为<code>.radio</code>的容器内。</li>
<li>在Bootstrap框架中，主要借助<code>.checkbox</code>和<code>.radio</code>样式，来处理复选框、单选按钮与标签的对齐方式。</li>
<li>只需要将<code>checkbox</code>换成<code>checkbox-inline</code>就可以了，你可以添加在label上也可以添加在外部的容器上。</li>
</ol>
<h3 id="表单控件大小">表单控件大小</h3><p>在Bootstrap中除了使用传统的控制大小（height，padding等等）方式外，还特意定制了两个类名用来控制大小，如下：</p>
<ol>
<li><code>input-sm</code>：让控件比正常大小更小</li>
<li><code>input-lg</code>：让控件比正常大小更大</li>
</ol>
<p>这两个类适用于表单中的<strong>input，textarea和select</strong>控件</p>
<h3 id="表单控件状态">表单控件状态</h3><h4 id="焦点状态">焦点状态</h4><p>焦点状态是通过伪类<code>:focus</code>来实现。在Bootstrap框架中表单控件的焦点状态删除了<code>outline</code>的默认样式，重新添加阴影效果。.</p>
<h4 id="禁用状态">禁用状态</h4><p>Bootstrap实现禁用和普通的表单禁用状态的实现方法一样的，就是在相应的表单控件上添加属性<code>disabled</code>，只不过Bootstrap做了一些样式风格的处理：</p>
<p><img src="/images/Bootstrap/form-disabled.jpg" alt="禁用状态"></p>
<p>其次，除了单独给相应的表单控件添加disabled外，还可以直接添加到域中<code>&lt;fieldset disabled&gt;&lt;/fieldset&gt;</code>，在这种情况，整个域中的表单全部都将会被禁用，此外还有一个<strong>小bug</strong>：如果该域中存在<code>&lt;legend&gt;</code>(域标题)，在其内的表单控件，虽然有禁用的样式，但是实际上可以进行输入，点击等操作！</p>
<h4 id="验证状态">验证状态</h4><p>在前面我们说过，Bootstrap有着大量的对于特定的情景内容的颜色设置，表单当然也不例外！在制作表单时，不免要做表单验证。同样也需要提供验证状态样式，那么Bootstrap框架中就提供了这几种效果：</p>
<ol>
<li><code>.has-warning</code>：警告状态（黄色）</li>
<li><code>.has-error</code>：错误状态（红色）</li>
<li><code>.has-success</code>：成功状态（绿色）</li>
</ol>
<p>除此之外，Bootstrap还实现了在不同的状态提示不同的<strong>icon</strong>，如果你想让表单在对应的状态下显示这样的效果，只需要在对应的状态下添加类名<code>has-feedback</code>。请注意，此类名要与<code>has-error</code>、<code>has-warning</code>和<code>has-success</code>在一起，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-success has-feedback"</span>&gt;</span><span class="comment">&lt;!-- 最后一个class控制图标显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputSuccess1"</span>&gt;</span>成功状态<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputSuccess1"</span> <span class="attr">placeholder</span>=<span class="string">"成功状态"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok form-control-feedback"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!-- 图标显示！选取显示图标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ...... 还有不同的图标显示例如glyphicon-warning-sign glyphicon-remove等等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 Bootstrap 的小图标都是使用<strong>@font-face</strong>来制作，只要有一个容器，就可以通过不同的类名来控制显示的图标。具体内容后面再详细介绍。</p>
<p>显示效果如下：</p>
<p><img src="/images/Bootstrap/form-status.jpg" alt="禁用状态"></p>
<h4 id="表单提示信息">表单提示信息</h4><p>在表单验证的过程，未免会要提供不同的提示信息。在Bootstrap框架中也提供了这样的效果。提供了一个<code>help-block</code>类，例如：<code>&lt;span class=&quot;help-block&quot;&gt;您输入的信息是错误的&lt;/span&gt;</code>只要将其插入到input之后，提示信息将以块状显示，并且显示在控件底部。</p>
<h2 id="三-_按钮">三. 按钮</h2><p>众所周知，我们创建的按钮通常通过下面这几种形式：:</p>
<ul>
<li><code>input[type=&quot;submit&quot;]</code>：提交按钮</li>
<li><code>input[type=&quot;button&quot;]</code>：普通按钮</li>
<li><code>input[type=&quot;reset&quot;]</code>：重置按钮</li>
<li><code>&lt;button&gt;&lt;/button&gt;</code>：按钮元素，（默认行为是提交）</li>
</ul>
<p><strong>在Bootstrap框架中的按钮都是采用<code>&lt;button&gt;</code>来实现。</strong></p>
<h3 id="1-_情景按钮">1. 情景按钮</h3><p>也正如我们前面所说，Bootstrop对于按钮也做了不同情景下的类，用不同的颜色展示很好的描述了当前的状态。一下图片来自<a href="http://www.imooc.com" target="_blank" rel="external">慕课网</a></p>
<p><img src="/images/Bootstrap/form-btn1.jpg" alt="默认状态"><br><img src="/images/Bootstrap/form-btn2.jpg" alt="多种状态"></p>
<p>记住一点！Bootstrap中的按钮，<strong>第一前提是必须添加<code>btn</code>这个类</strong>，其他的各种类，都只能添加到其后。所以一个按钮应该是这个样子的：<code>&lt;button class=&quot;btn btn-info&quot; &gt;信息按钮&lt;/button&gt;</code>，若还有其他的样式，往<code>btn-info</code>后添加，充分利用css的层叠特性。</p>
<h3 id="2-_按钮大小">2. 按钮大小</h3><p>Bootstrap有着很对相似的类（学习完后总结一下吧颜色，大小等等），比如现在要说的，改变按钮的大小，当然你可以自定义，但是Bootstrap默认为我们提供了一些，添加到<code>btn</code>类后就行！</p>
<p><img src="/images/Bootstrap/form-btn-size.jpg" alt="按钮大小"></p>
<h3 id="3-_块状按钮">3. 块状按钮</h3><p>Bootstrap框架中提供了一个类名<code>btn-block</code>。使用这个类名就可以让按钮<strong>充满整个容器</strong>，并且这个按钮不会有任何的padding和margin值。在实际当中，常把这种按钮称为块状按钮。同样添加到<code>btn</code>类后即可生效</p>
<h3 id="4-_活动与禁用状态">4. 活动与禁用状态</h3><p>Bootstrap框架针对按钮的状态做了一些特殊处理。主要分为两种：活动状态和禁用状态。</p>
<h4 id="活动状态">活动状态</h4><p>Bootstrap按钮的活动状态主要包括按钮的悬浮状态(<code>:hover</code>)，点击状态(<code>:active</code>)和焦点状态（<code>:focus</code>）几种。</p>
<p>通过在源码中我们可以看到，Bootstrap对于每一种风格的按钮都做了单独的定制。需要进行修改的话可以参考源码！</p>
<h4 id="禁用状态-1">禁用状态</h4><p>在Bootstrap框架中，要禁用按钮有两种实现方式：</p>
<ol>
<li>在标签中添加<code>disabled</code>属性</li>
<li>在元素标签中添加类名<code>.disabled</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://guowenfh.github.io/"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger disabled"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>添加disabled类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://guowenfh.github.io/"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger "</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">disabled</span>&gt;</span>添加disabled属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这两个方式除了样式上的改变之外，还存在是否阻止默认行为上的区别。（此处有大坑，暂时不能跳，以后在详细了解吧。不同浏览器，对于实现阻止默认行为的方式不同，IE11：两个方式都阻止默认行为，IE10-通过属性可以阻止，FF、Chrome通过类可以阻止默认行为。。我已经醉了）</p>
<p>从这里我们也可以看到，Bootstrap只需要在制作按钮的标签元素比如<code>&lt;div&gt;,&lt;span&gt;</code>等等，上添加类名<code>btn</code>就可以为其加上按钮风格，但是，<strong>并不建议这样使用，为了避免浏览器兼容性问题，个人强烈建议使用button或a标签来制作按钮。</strong></p>
<h2 id="四-_图像">四. 图像</h2><p>在Bootstrap框架中对于图像的样式风格提供以下几种风格：</p>
<ol>
<li><code>.img-responsive</code>：响应式图片，主要针对于响应式设计</li>
<li><code>.img-rounded</code>：圆角图片</li>
<li><code>.img-circle</code>：圆形图片</li>
<li><code>.img-thumbnail</code>：缩略图片，相框效果</li>
</ol>
<p>直接把类名添加到img标签上就行了！</p>
<p><strong>注意：</strong><br>设置图片大小时，由于样式没有对图片做大小上的样式限制，所以在实际使用的时候，需要通过其他的方式来处理图片大小。比如说控制图片容器大小。（注意不可以通过css样式直接修改img图片的大小，这样操作就不响应了）</p>
<h3 id="图标">图标</h3><p>这里说的图标就是Web制作中常看到的小icon图标，包括250多个来自 Glyphicon Halflings 的字体图标，Bootstrap框架中图标都是<strong>glyphicons.com</strong>这个商业网站提供的，并且<strong>免费授权</strong>给Bootstrap框架使用。</p>
<p>可以在<a href="http://v3.bootcss.com/components/#glyphicons" target="_blank" rel="external">Glyphicons 字体图标</a>，看到全部图标的样式，您可以根据你的需求进行设置</p>
<p>在网页中使用图标也非常的简单，在任何<strong>内联元素</strong>上应用所对应的样式即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里第一个类是<strong>所有字体图标所必需的</strong>，第二个类用来自定义显示的图标。</p>
<p>从源码中我们可以看到<code>glyphicon</code>这个类,最主要的部分有着如下样式设置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.glyphicon</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Glyphicons Halflings'</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这里，也就不难发现为什么是必须的了，它控制了标签的显示方式，和引入了字体图标库；而第二个类，仅仅是调用对应字体的编码而已</p>
<p>表单的部分呢，学到这里也就基本高一段落了，下面就要开始进行，Bootstrap的核心<strong>栅格系统</strong>的学习了，继续加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>关于表单的应用自然不需要多说，只要您的的网站可以用户登录，那么不可能不用到表单！表单主要功能是用来与用户做交流的一个网页控件，JavaScript发明之初最大的作用也就是用来进行表单操作。所以表单是每一个前端开发者必须要熟练掌握的东西。</p>
<]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（一）排版]]></title>
    <link href="http://guowenfh.github.io/2016/01/18/Bootstrap-01-typesetting/"/>
    <id>http://guowenfh.github.io/2016/01/18/Bootstrap-01-typesetting/</id>
    <published>2016-01-18T05:40:46.000Z</published>
    <updated>2016-01-18T05:57:37.692Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_标题">1. 标题</h2><p>在Bootstrap中使用标题的方式和常规html一样：从<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>分别从大到小安排标题元素，只不过在Bootstrap中重新设置了其默认样式，从源码中可以看到有如下共性：</p>
<p>字体颜色与字体样式继承自父元素，字体粗细为500，且行高全部设为1.1（也就是font-size的1.1倍）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span>;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在不同大小的标题中有着如下区别：</p>
<ol>
<li>在Bootstrap中对于不同级别标题字体大小设置为：<strong>h1=36px，h2=30px，h3=24px，h4=18px，h5=14px和h6=12px。</strong></li>
<li>重新设置了<strong>margin-top</strong>和<strong>margin-bottom</strong>的值，<strong>h1~h3</strong>重置后的值都是<strong>20px</strong>；<strong>h4~h6</strong>重置后的值都是<strong>10px</strong>。</li>
</ol>
<p>除此之外在Bootstrap中为了<strong>让非标题元素和标题使用相同的样式</strong>，还特意定义了<strong>.h1~.h6</strong>六个类名。如下所示：</p>
<p>在Bootstrap中，下面的代码，显示效果相同。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Bootstrap中的标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bootstrap标题二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bootstrap标题三<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap标题四<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Bootstrap标题五<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Bootstrap标题六<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Bootstrap中让非标题元素和标题使用相同的样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>Bootstrap标题一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h2"</span>&gt;</span>Bootstrap标题二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h3"</span>&gt;</span>Bootstrap标题三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h4"</span>&gt;</span>Bootstrap标题四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h5"</span>&gt;</span>Bootstrap标题五<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>Bootstrap标题六<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为在实际应用中，我们可能经常会遇到除了主标题外，之后紧跟着一个副标题的情况。Bootstrap人性化的为我们设置了这样一个效果。使用方式也特别简单，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap标题一<span class="tag">&lt;<span class="name">small</span>&gt;</span>我是副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然毋庸置疑的是，从<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>都可以使用该设置。副标题<code>&lt;small&gt;</code>有着自己一些独特的样式：</p>
<ol>
<li>行高全部都设置为了1，而且字体粗细变成了常规效果（不加粗），同时颜色被设置为灰色（<code>#999</code>）。</li>
<li>在h1~h3内的<code>&lt;small&gt;</code>标签文本，其大小都设置为当前字号的65%；而在h4~h6内的字号都设置为当前字号的75%；</li>
</ol>
<h2 id="2-_正文文本">2. 正文文本</h2><p>Bootstrap中的文本全局样式如下：</p>
<ol>
<li>字体大小为14px</li>
<li>行高为1.42867143（约等于20px）</li>
<li>字体颜色为<code>#333</code></li>
<li>p标签外部有着10个像素的下外边距<code>margin-bottom:10px;</code></li>
</ol>
<p>当然，你是可以自行设置重置样式的。^_^</p>
<h2 id="3-_强调">3. 强调</h2><h3 id="字体风格相关">字体风格相关</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>lead<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 字体变大，行高变大，下外边距变大 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>i<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="comment">&lt;!--无特殊意义， 斜体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>small<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="comment">&lt;!-- 小号字体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="comment">&lt;!-- 语气强烈的强调，粗体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>em<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="comment">&lt;!-- 强调，斜体 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="强调相关的类">强调相关的类</h3><p>在Bootstrap中定义了一系列的这样的类，用于不同的情景，出去text外，还有bg（背景颜色）等等。使用方法类似，只是前面的文本进行了一些改变！所以。<strong>记住这6个单词吧</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>提示，使用浅灰色（#999）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>主要，使用蓝色（#428bca）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-success"</span>&gt;</span>成功，使用浅绿色(#3c763d)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>通知信息，使用浅蓝色（#31708f）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-warning"</span>&gt;</span>警告，使用黄色（#8a6d3b）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>危险，使用褐色（#a94442）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-_文本对齐风格">4. 文本对齐风格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>我居左<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>我居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>我居右<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-justify"</span>&gt;</span>我两端对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Bootstrap中，为了简化操作，方便使用，使用了上面这四个类分别对应我们在CSS中常常使用<strong>text-align</strong>来实现文本的对齐风格的设置。</p>
<h2 id="5-_列表">5. 列表</h2><p>在Bootstrap中对于列表的设置与原生的html基本一致，需要注意的有：</p>
<ol>
<li>在列表之间有10px的下外边距</li>
<li>在嵌套列表中，不含有下边距</li>
</ol>
<p>Bootstrap当然不会就这么简单做一点点修改，它定义了一些关于列表的类给我们使用。</p>
<h3 id="去点列表-list-unstyled">去点列表<code>.list-unstyled</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-unstyled</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码中，我们可以看到这样的信息，它除了将项目编号去除之外，还将默认的左边距也清除掉了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">    项目列表</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>带有项目编号<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>带有项目编号<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这样一段代码中，三个列表项会整齐的<strong>排列在一起</strong>，且都没有<strong>项目符号</strong></p>
<h3 id="内联列表-list-inline">内联列表<code>.list-inline</code></h3><p>除了去点列表之外，Bootstrap还可以通过添加类名“.list-inline”来实现内联列表，简单点说就是<strong>把垂直列表换成水平列表，而且去掉项目符号（编号），保持水平显示。</strong>也可以说内联列表就是为制作水平导航而生。</p>
<h3 id="水平定义列表-dl-horizontal">水平定义列表<code>.dl-horizontal</code></h3><p>现有代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"dl-horizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题一：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述内容，我很喜欢前端，也很喜欢响应式布局，它能在个不同大小的屏幕下提供很好的体验，我现在是初学者，但是我会越来强的<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题二：标题二：标题二：标题二：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器全屏显示中可以看到效果如下：</p>
<p><img src="/images/Bootstrap/horizontal1.jpg" alt="自定义水平列表大屏"></p>
<p>我们来把屏幕大小进行改变，在遇到一个临界值时（小屏），水平定义列表将回复到原始的状态，如下改变：</p>
<p><img src="/images/Bootstrap/horizontal2.jpg" alt="自定义水平列表小屏"></p>
<p>这是为什么呢？我们去看看源码吧！<br>原来在这里添加了一个媒体查询，只有<strong>屏幕大于768px</strong>的时候，添加类名<code>.dl-horizontal</code>才具有水平定义列表效果。其实现主要方式：</p>
<ol>
<li><strong>将dt设置了一个左浮动，并且设置了一个宽度为160px</strong></li>
<li><strong>将dd设置一个margin-left的值为180px，达到水平的效果</strong></li>
<li><strong>当标题宽度超过160px时，将会显示三个省略号</strong></li>
</ol>
<p>现在再看看上面的效果是不是和这里的描述都是一样的呢？答案当然是肯定的 ^ ^</p>
<h2 id="6-_代码">6. 代码</h2><p>在Bootstrap主要提供了三种代码风格：</p>
<ol>
<li>使用<code>&lt;code&gt;&lt;/code&gt;</code>来显示单行内联代码——针对于<strong>单个单词或单个句子</strong>的代码</li>
<li>使用<code>&lt;pre&gt;&lt;/pre&gt;</code>来显示多行块代码——针对于<strong>多行代码</strong>（也就是成块的代码）</li>
<li>使用<code>&lt;kbd&gt;&lt;/kbd&gt;</code>来显示用户输入代码——表示<strong>用户要通过键盘输入的内容</strong></li>
</ol>
<p>直接来看效果吧!</p>
<p><img src="/images/Bootstrap/code1.jpg" alt="code风格"></p>
<p>代码如下：（需要注意的是，**不管使用哪种代码风格，在代码中碰到小于号（<code>&lt;</code>）和大于号（<code>&gt;</code>）都需要使用转义字符来替代）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">code风格：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Bootstrap的代码风格有三种：<span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;code&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;pre&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span>和<span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;kbd&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">pre风格：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">&amp;lt;ul&amp;gt;</span><br><span class="line">    &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;</span><br><span class="line">&amp;lt;/ul&amp;gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">kbd风格：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>请输入<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl+c<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>来复制代码，然后使用<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl+v<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>来粘贴代码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;pre&gt;</code>元素一般用于显示大块的代码，并保证原有格式不变。但有时候代码太多，而且不想让其占有太大的页面篇幅，就想控制代码块的大小。Bootstrap也考虑到这一点，你只需要在<strong>pre标签</strong>上添加类名<code>.pre-scrollable</code>，就可以控制代码块区域<strong>最大高度为340px</strong>，一旦超出这个高度，就会在<strong>Y轴（纵向）出现滚动条。</strong></p>
<p>当然，你也可以进行自定义配置，例如：只需要在自定义的css中，对于该类添加一个<code>word-wrap: normal;</code>，这样的话，在代码块边框横向宽度小于内部代码横向长度时，就会出现横向滚动条。</p>
<h2 id="7-_表格">7. 表格</h2><p>表格是Bootstrap的一个基础组件之一，Bootstrap为表格提供了<strong>1种基础样式</strong>和<strong>4种附加样式</strong>以及<strong>1个支持响应式的表格</strong>。</p>
<p>对应上面所说的，Bootstrap为表格不同的样式风格提供了不同的类名，主要包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>.table</code></th>
<th style="text-align:center">基础表格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>.table-striped</code></td>
<td style="text-align:center">斑马线表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-bordered</code></td>
<td style="text-align:center">带边框的表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-hover</code></td>
<td style="text-align:center">鼠标悬停高亮的表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-condensed</code></td>
<td style="text-align:center">紧凑型表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-responsive</code></td>
<td style="text-align:center">响应式表格</td>
</tr>
</tbody>
</table>
<p><code>.table</code>主要有三个作用：</p>
<ul>
<li>给表格设置了margin-bottom:20px以及设置单元内距</li>
<li>在thead底部设置了一个2px的浅灰实线</li>
<li>每个单元格顶部设置了一个1px的浅灰实线</li>
</ul>
<p>具体大家可以在源码中查看，后几种附加的样式在这里也不多说，但是下面说一些<strong>注意事项：</strong></p>
<ol>
<li>后几种表格附加样式，必须在基础样式<code>.table</code>之后，例如<code>&lt;table class=&quot;table table-bordered table-hover&quot;&gt;</code></li>
<li>响应式表格：其原理是在表格<strong>外部添加容器</strong>把普通表格<strong>包裹</strong>起来，下面进行详细说明：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span><span class="comment">&lt;!-- 关键！容器包裹后实现响应式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span><span class="comment">&lt;!-- 设置表格样式，带边框的表格 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="comment">&lt;!-- 一个表格应该有表头，若直接写tr&gt;td这样的结构，浏览器会自动创建一个tbody包裹 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--与上同理，即使你不创建，浏览器也会自动添加tbody包裹你的代码  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是宽屏的效果（和普通的表格无区别）：</p>
<p><img src="/images/Bootstrap/table-broad.png" alt="表格行的类"></p>
<p>此处是窄屏的效果（可以看到滚动条的出现）：<br><img src="/images/Bootstrap/table-Narrow.png" alt="表格行的类"></p>
<h3 id="表格行的类，表格情景">表格行的类，表格情景</h3><p>在上面已经说到了在Bootstrap中，为不同的情景做了不一样的颜色，用于不同的信息展示。只是在类名上做了一些小小的改变。下面就可以看到：（图片来自<a href="http://www.imooc.com" target="_blank" rel="external">慕课网</a>）</p>
<p><img src="/images/Bootstrap/table.jpg" alt="表格行的类"></p>
<p>只需要在<strong><code>&lt;tr&gt;</code></strong>标签添加上这些类就可以使用了。<br>除此之外，通过源码可以看到，在这些颜色设置之外，Bootstrap还单独设置了<strong>hover效果（悬浮状态）</strong>的<strong>颜色加深</strong>效果（它对于不同的情况单独进行了颜色设置）。<br>实现也特别简单，只需要像<code>&lt;table class=&quot;table-hover&quot;&gt;</code>这样，在<code>&lt;table&gt;</code>标签加上一个<code>table-hover</code>的类。（在未对<code>&lt;tr&gt;</code>进行情景颜色设置时，该类依然有效果，只是效果不一样，上面已经说到了，因为它的单独设置，具体请到源码中查看）</p>
<p>也正因为这样，如果你想自定义颜色的话，<strong>除了修改<code>tr</code>元素的颜色样式外，在<code>.table-hover</code>表格中也要做相应的调整!</strong></p>
<p>排版的内容到这里就告一段落了，下面进行表单的学习！加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_标题">1. 标题</h2><p>在Bootstrap中使用标题的方式和常规html一样：从<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>分别从大到小安排标题元素，只不过在Bootstrap中重新设置了其默认样]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap入门笔记之（零）简介]]></title>
    <link href="http://guowenfh.github.io/2016/01/17/Bootstrap-00-summary/"/>
    <id>http://guowenfh.github.io/2016/01/17/Bootstrap-00-summary/</id>
    <published>2016-01-17T09:26:06.000Z</published>
    <updated>2016-01-17T10:49:17.791Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是Bootstrap？">什么是Bootstrap？</h3><ol>
<li>Bootstrap 是由Twitter推出的一个用于快速开发 Web 应用程序和网站的前端框架。</li>
<li><p>基于html5、css3的bootstrap，具有下面这些诱人特性：<br>（1）移动设备优先；<br>（2）漂亮的设计；<br>（3）友好的学习曲线；<br>（4）卓越的兼容性；<br>（5）响应式设计；<br>（6）12列响应式栅格结构；<br>（7）样式向导文档。</p>
</li>
<li><p>自定义JQuery插件，完整的类库，基于Less、Sass等</p>
</li>
</ol>
<h3 id="Bootstrap下载">Bootstrap下载</h3><p>可以在其<a href="http://v3.bootcss.com/getting-started/#download" target="_blank" rel="external">中文官网</a>中下载，可以很明显的看到一个大大的下载按钮，此外还可以通过CDN，git命令，以及npm等等方式进行下载。</p>
<p>如果您恰好看了我写的<a href="http://guowenfh.github.io/2015/12/26/SublimeText/">sublime Text</a>的博客的话，肯定知道我们是可以直接通过插件进行安装的。只需要在<code>ctrl</code>+<code>shift</code>+<code>P</code>时,输入<code>fecth:manage</code>，进行如下设置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"packages"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Bootstrap"</span>: <span class="string">"https://github.com/twbs/bootstrap/releases/download/v3.3.6/bootstrap-3.3.6-dist.zip"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>之后就可以直接通过sublime Text进行下载了，还是刚刚的步骤，但是这一次输入的是<code>fetch:package</code>。找到<code>Bootstrap</code>，如果下载成功在您的文件夹中应该可以看到主要包括三个文件夹<code>css</code>，<code>fonts</code>和<code>js</code>，如下：</p>
<p><img src="/images/Bootstrap/downloadFolder.jpg" alt="下载文件夹"></p>
<p>可以看到除去字体文件夹外的其他文件夹中每一分文件都有两个不同的版本，一个完整版的文件，方便查看源码如：<code>bootstrap.js</code>和一个用于实际生产情况的压缩文件如<code>bottstrap.min.js</code>；</p>
<p>在字体文件中可以看到有很多文件，但是它的功能很简单，就是是用来制作<strong>icon图标</strong>的文件，使用了CSS3的@font-face技术。</p>
<p>在实际情况中，如果你还想使用更多的图标，还可以在<a href="http://www.iconfont.cn/" target="_blank" rel="external">Iconfont-阿里巴巴矢量图标库</a>，自行查找设置。</p>
<h3 id="Bootstrap标准模板">Bootstrap标准模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在IE运行最新的渲染模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化移动浏览显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 标准模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. 加载Bootstrap层叠样式表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 你自己自定义的样式文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/your-style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下两个插件用于在IE8以及以下版本浏览器支持HTML5元素和媒体查询，如果不需要用可以移除 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 如果要使用Bootstrap的js插件，必须加载jquery库，且必须在bootstrap库之前 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-min-1.11.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 包括所有bootstrap的js插件或者可以根据需要使用的js插件调用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="全局样式">全局样式</h3><p>Bootstrap框架的核心是轻量的CSS基础代码库，他并没有一味的重置样式，而是注重各浏览器基础表现，降低开发难度。<br>为了增强跨浏览器表现的一致性，Bootstrap使用了 <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css</a>。但没有一味全部使用该重置样式，而是在此基础之上进行了一些改良，让其更加符合Bootstrap的设计思想。<br>Bootstrap保留和坚持部分浏览器的基础样式，解决部分潜在的问题，提升一些细节的体验，在排版、链接样式设置了基本的全局样式。具体说明如下：</p>
<ul>
<li>移除body的margin声明</li>
<li>设置body的背景色为白色</li>
<li>为排版设置了基本的字体、字号和行高</li>
<li>设置全局链接颜色，且当链接处于悬浮<code>:hover</code>状态时才会显示下划线样式</li>
</ul>
<p>Bootstrap简介部分到此就结束了，在Bootstrap的<a href="http://v3.bootcss.com/" target="_blank" rel="external">中文官网</a>中，有着层次清晰且详细的说明文档，下面就和我一起走进Bootstrap的世界吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是Bootstrap？">什么是Bootstrap？</h3><ol>
<li>Bootstrap 是由Twitter推出的一个用于快速开发 Web 应用程序和网站的前端框架。</li>
<li><p>基于html5、css3的bootstrap，具有下面这些]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery入门笔记之（七）插件]]></title>
    <link href="http://guowenfh.github.io/2016/01/13/jQuery-07-Plugin/"/>
    <id>http://guowenfh.github.io/2016/01/13/jQuery-07-Plugin/</id>
    <published>2016-01-13T09:20:59.000Z</published>
    <updated>2016-01-13T09:23:24.941Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>插件(Plugin)也成为 jQuery 扩展(Extension)，是一种遵循一定规范的应用程序接口编写出来的程序。目前 jQuery 插件已超过几千种，由来自世界各地的开发者共同编写、验证和完善。而对于jQuery开发者而言，直接使用这些插件将快速稳定架构系统，节约项目成本。</p>
</blockquote>
<h2 id="一．_插件概述">一． 插件概述</h2><p>插件是以 jQuery 的核心代码为基础，编写出复合一定规范的应用程序。也就是说，插件也是 jQuery 代码，通过 js 文件引入的方式植入即可。<br>插件的种类很多，主要大致可以分为：UI 类、表单及验证类、输入类、特效类、Ajax类、滑动类、图形图像类、导航类、综合工具类、动画类等等。<br>引入插件是需要一定步骤的，基本如下：</p>
<ol>
<li>必须先引入 jquery.js 文件，而且在所有插件之前引入；</li>
<li>引入插件；</li>
<li>引入插件的周边，比如皮肤、中文包等。</li>
</ol>
<p>比如最常用到的表单验证插件：<code>validate</code>，除了最基本的插件文件<code>jquery.validate.min.js</code>之外，还有着<code>messages_zh.js</code>等等各国的语言包可以供你使用。</p>
<p>如何使用该插件在这里就不进行描述了，可以去看看慕课网上的视频<a href="http://www.imooc.com/learn/385" target="_blank" rel="external">jQuery插件——Validation Plugin</a>，里面详细的描述了这个插件的各种配置项，以及扩展。</p>
<p>触类旁通，一个优秀的插件，详细的说明文档必不可少，详细的看说明文档能，并且在本地进行测试能让你快速的入门各种插件的使用。</p>
<p>还有各种各样的别人编写好的插件可以供你使用：比如管理cookie的插件–cookie等等。</p>
<p>插件可以去jQuery官网的插件模块进行查找<a href="http://plugins.jquery.com/" target="_blank" rel="external">The jQuery Plugin Registry</a></p>
<h2 id="二-_自定义插件">二. 自定义插件</h2><p>前面我们使用了别人提供好的插件，使用起来非常的方便。如果市面上找不到自己满意的插件，并且想自己封装一个插件提供给别人使用。那么就需要自己编写一个 jQuery 插件了。</p>
<h3 id="插件种类">插件种类</h3><p>按照功能分类，插件的形式可以分为一下三类：</p>
<ol>
<li>封装对象方法的插件；（也就是基于某个 DOM 元素的 jQuery 对象，局部性，使用最多）</li>
<li>封装全局函数的插件；（全局性的封装）</li>
<li>选择器插件。(类似与.find()，例如：<code>color(red)</code>来选择所有的红色元素之类)</li>
</ol>
<h3 id="插件的基本要点">插件的基本要点</h3><p>主要用以以解决各种因为插件导致的冲突、错误等问题，包括如下：</p>
<ol>
<li>插件名推荐使用 jQuery.[插件名].js，以免和其他 js 文件或者其他库相冲突（可以使用alert(<code>$.[插件名]</code>)验证是否存在该全局方法）；</li>
<li>局部对象附加 jQuery.fn 对象上，全局函数附加在 jQuery对象本身上（可以使用alert(<code>$(selector).[插件名]</code>)验证是否存在该局部方法）；</li>
<li>插件内部，this 指向是当前的局部对象（通过选择器获取的jQuery对象）；</li>
<li>可以通过 this.each 来遍历所有元素；</li>
<li>所有的方法或插件，必须用分号结尾，避免出现问题（为了更稳妥，可在插件头部先加上一个分号）；</li>
<li>插件应该返回的是 jQuery 对象，以保证可链式操作；</li>
<li>避免插件内部使用$，如果要使用，使用闭包把传递 jQuery 进去，使插件内部继续使用$作为jQuery的别名。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;<span class="comment">//这里将$符作为匿名函数的形参</span></span><br><span class="line"><span class="comment">/*在此处编写代码，可使用$作为jQuery的缩写别名*/</span></span><br><span class="line">&#125;)(jQuery);<span class="comment">//这里将jQuery作为实参传递给匿名函数了</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="编写一个插件">编写一个插件</h3><p>假设我们的插件需求是：实现一个下拉菜单，在移入该元素时，把对应的下拉列表展现出来，移出时收回。并且可以设置其展开时的文字颜色。</p>
<p>根据惯例，我们在编写插件时，可以对于html结构有所约束。现在假设我们的页面上有如下HTML结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表1</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表2</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航列表6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认已经引入jquery --&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里，我们就对我们的插件实现效果有了第一个要求，必须在<code>对于需要hover展现的元素</code>内部下面建立<code>ul</code>列表，且<code>className</code>必须为<code>nav</code>。（插件内部都是根据该条件来做文章）</p>
<p>下面就可以开始编写我们的插件了。保存为<code>jQuery.nav.js</code>，（符合上面所说的要求，默认已经导入）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $.extend(&#123; <span class="comment">//插件定义在全局方法上</span></span><br><span class="line">        <span class="string">"nav"</span> : <span class="function"><span class="keyword">function</span> (<span class="params">color</span>)</span>&#123;<span class="comment">//传参，这里只是抛砖引玉，在您编写的时候，参数选项可以更加丰富，例如传入json对象等等</span></span><br><span class="line">            $(<span class="string">'.nav'</span>).css(&#123;<span class="comment">//对展开的下拉列表设置样式，此处在下面进行详细说明</span></span><br><span class="line">                <span class="string">"list-style"</span> : <span class="string">"none"</span>,</span><br><span class="line">                <span class="string">"margin"</span> : <span class="number">0</span>,</span><br><span class="line">                <span class="string">"padding"</span> : <span class="number">0</span>,</span><br><span class="line">                <span class="string">"display"</span> : <span class="string">"none"</span>,</span><br><span class="line">                <span class="string">"color"</span>:color<span class="comment">//由用户控制hover时，展现出来列表的文字颜色</span></span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">'.nav'</span>).parent().hover(<span class="comment">//这里用到了.nav的父节点（就是hover到的元素）</span></span><br><span class="line">                <span class="comment">//因为我们只能在插件要求的范围内进行设定，若是使用了外部的选择器，就违背了这个原则</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).find(<span class="string">".nav"</span>).stop().slideDown(<span class="string">"normal"</span>);<span class="comment">//注意我们在这里使用了jquery的动画方法</span></span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).find(<span class="string">".nav"</span>).stop().slideUp(<span class="string">"normal"</span>);<span class="comment">//注意stop()的使用，不然会有类似手风琴效果的出现，但那并不是我们需要的</span></span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<p>注意：这里使用css方法只是为了方便，在真实插件编写过程中，若存在如此大量的css样式编写时，推荐在外部定义css样式，例如可改写为：<br>插件依赖的css，需和插件一起导入html中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hover</span>&#123;<span class="comment">/*插件必须样式*/</span></span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在插件内部修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.nav'</span>).addClass(<span class="string">"hover"</span>);<span class="comment">//将CSS与jQuery分离开来</span></span><br><span class="line">$(<span class="string">'.nav'</span>).css(<span class="string">"color"</span>,color);<span class="comment">//存在用户设置时启用，不存在就不用了（进行判断）</span></span><br></pre></td></tr></table></figure></p>
<p>刚刚说的都是插件的js文件，最后要起到效果，别忘了页面的js中加上那么一句话（当前插件定义在全局方法上）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>  (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.nav(<span class="string">"#999"</span>);<span class="comment">//调用插件实现的全局方法，并且设置其展现背景颜色为#999。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>就这样，我们的全局插件就编写，而且调用完成了，在你的页面刷新看看，是不是已经有了效果呢？</p>
<p>但是，因为我们的方法定义在全局上，现在只要页面中出现了我们插件所规定的结构，就会存在hover展现效果，但是有时我们往往想要的不是这样，我们希望它在局部，在我指定的元素调用。所以我们需要对其进行一些改造，让其变成局部方法，其实也很简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $.fn.extend(&#123;<span class="comment">//定义为局部方法</span></span><br><span class="line">        <span class="string">"nav"</span> : <span class="function"><span class="keyword">function</span> (<span class="params">color</span>)</span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">'.nav'</span>).addClass(<span class="string">'hover'</span>);<span class="comment">//上面已经说过了,此时this指向调用该方法的元素</span></span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">'.nav'</span>).css(<span class="string">"color"</span>,color);<span class="comment">//在当前元素下，增加了一次find筛选，实现在对应的元素中执行。</span></span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">'.nav'</span>).parent().hover(</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).find(<span class="string">".nav"</span>).stop().slideDown(<span class="string">"normal"</span>);</span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).find(<span class="string">".nav"</span>).stop().slideUp(<span class="string">"normal"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;<span class="comment">//返回当前的对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<p>我们去刷新一下浏览器。<br>你会发现，咦，怎么没效果？ 当然因为原来的代码是直接在全局调用的，现在变成局部方法了，显然就不能这样做了，需要做一点改变：</p>
<p><strong>我这里就不贴html代码了，但是希望您在实践时能把上面的html代码在其下复制几份</strong>，以达到思考其实现的效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>  (<span class="params"></span>)</span>&#123;<span class="comment">//这里的eq(0)代表只对第一份起到效果，复制后的没有效果。</span></span><br><span class="line">    <span class="comment">//（你可以把上面的find筛选删除之后再试试，您会发现，他又对余下的几份起效果了）</span></span><br><span class="line">    $(<span class="string">".list"</span>).eq(<span class="number">0</span>).nav(<span class="string">"red"</span>);<span class="comment">//调用局部方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>现在回过头再把我们写的插件代码对应上面写的<strong>插件编写的要点</strong>，思考一下，我们还有哪些没有做到？就会发现，基本已经能对应上了。现在我们就完成了一个下拉菜单的插件。</p>
<p>其实编写插件并不难，最主要的是在我们编写插件的时候，一定要时刻注意这样的要点，每一个细节都遵循在大家实践过程中总结出来的最佳实现，才能自定义实现一个良好的插件。</p>
<p>代码首先是写个人看的，再然后才是给机器看的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>插件(Plugin)也成为 jQuery 扩展(Extension)，是一种遵循一定规范的应用程序接口编写出来的程序。目前 jQuery 插件已超过几千种，由来自世界各地的开发者共同编写、验证和完善。而对于jQuery开发者而言，直接使用这些插件将]]>
    </summary>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/tags/jQuery/"/>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/categories/jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS多列布局]]></title>
    <link href="http://guowenfh.github.io/2016/01/10/css-MultiColumn-layout/"/>
    <id>http://guowenfh.github.io/2016/01/10/css-MultiColumn-layout/</id>
    <published>2016-01-10T07:30:52.000Z</published>
    <updated>2016-01-10T07:51:01.541Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>需要注意的是：本篇文章的布局，都未对父元素进行清除浮动的操作，所以在有<strong>一些</strong>使用了float的布局中，需要在parent容器清除浮动，才能在实际情况下使用。（清除浮动的方式在这里不做讨论）</p>
</blockquote>
<h2 id="一列定宽一列自适应">一列定宽一列自适应</h2><p>这部分的html结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>大家先来看看直接在左侧添加浮动是怎么样的吧：<br><img src="/images/css/layout/FixedWidthAndAdaptive-initial.jpg" alt="一列定宽，文字环绕效果"></p>
<p>不要觉得诧异！因为float最开始的出现就是为了实现这个文字环绕效果的，只不过被攻城师们玩坏了，用到了布局上；但这肯定不是我们想要的，来看看我们想要的是怎么样的吧！<br><img src="/images/css/layout/FixedWidthAndAdaptive-target.jpg" alt="一列定宽，一列自适应"></p>
<p>这样才对嘛！是我们想要的！下面就来看看css的实现吧：</p>
<h3 id="1-_float+margin">1. <code>float</code>+<code>margin</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;   </span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点：兼容IE7+，便于理解；缺点：不兼容IE6，在right内部第一个元素存在清除浮动时，会发生right掉下去的情况。</p>
<p>一起来看看错误的例子：<br><img src="/images/css/layout/FixedWidthAndAdaptive-issue.jpg" alt="一列定宽，错误"><br>怎么解决呢？</p>
<h3 id="2-_改进版—float+margin+fix">2. 改进版—<code>float</code>+<code>margin</code>+<code>fix</code></h3><p>优点：兼容性好，兼容所有浏览器；缺点：结构增加，样式复杂。</p>
<p>布局改变如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分在这个地方进行了添加，使用right-fix把原有结构包裹住了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-fix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> &gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>css部分：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative; <span class="comment">/*提升左边的层级*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-fix</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right; <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;<span class="comment">/*处理右边掉下来的情况*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-_float+overflow">3. <code>float</code>+<code>overflow</code></h3><p>优点：设置简单；</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;<span class="comment">/*触发BFC*/</span></span><br><span class="line">    <span class="comment">/*_zoom:1;*/</span> <span class="comment">/*IE6使用zoom:1来触发BFC*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-_table">3. <code>table</code></h3><p>HTML结构还是和第一个一样。</p>
<p>优点：加速table渲染，实现布局优先；缺点：代码量大，复杂</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table; <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">table-layout</span>: fixed;<span class="comment">/*加速table渲染，实现布局优先*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-_flex">4. <code>flex</code></h3><p>优点：结构简单；缺点：兼容性差iE10+，性能不好，常用作小范围布局</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;<span class="comment">/**/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="多列定宽一列自适应">多列定宽一列自适应</h2><p>大家来看看想要达到的效果：<br><img src="/images/css/layout/twoFixedWidthAndAdaptive-initial.jpg" alt="二列定宽，一列自适应"><br>其实只是在上面的布局上，中间再加入一个center。<br>html结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>css部分：把center设置和left一样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="一列不定宽,一列自适应">一列不定宽,一列自适应</h2><blockquote>
<p>HTML结构同一列定宽一列自适应。<br>其实就是对一列定宽,一列自适应的后三个进行一下改造</p>
</blockquote>
<p>实现效果和上面一样，但是宽度不在固定了！</p>
<h3 id="1-_float+overflow">1. <code>float</code>+<code>overflow</code></h3><p>优点：兼容性好，使用最多，结构简单；（其实和上面的改变就是左侧使用内容去撑开高度，因为原来的实现已经达到了这个效果）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/*width:200px;*/</span><span class="comment">/*可设置宽度，也可使用内容撑开*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;<span class="comment">/*使用内容去撑开宽度*/</span></span><br></pre></td></tr></table></figure>
<h3 id="2-_table">2. <code>table</code></h3><p>缺点：支持IE8+，设置复杂。</p>
<p>对css进行如下更改：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table; <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.1%</span>;<span class="comment">/*只要足够小就行*/</span></span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;<span class="comment">/*使用内容去撑开宽度*/</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-_flex">3. <code>flex</code></h3><p>缺点：还是上面的问题<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;<span class="comment">/**/</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.left</span> <span class="selector-tag">p</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;<span class="comment">/*使用内容去撑开宽度*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="两列不定宽，一列自适应。">两列不定宽，一列自适应。</h2><p>HTML结构同两列定宽一列自适应。<br>以<code>float+overflow</code>为例，只需要把<code>center</code>设置和<code>left</code>一样就可以了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除了这个方法之外，上面的不定宽中的三个方法都能使用</p>
<h2 id="等分布局">等分布局</h2><p>html结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>按照惯例，先来分析一下实现过程。可以看到下图：<br><img src="/images/css/layout/EqualWidthLayoutThink.jpg" alt="等分布局分析"></p>
<p>其实我们只需要给父容器增加一个G，也就是一个负的margin就可以实现了，下面就来看看吧：</p>
<h3 id="1-_float+margin-1">1. <code>float</code>+<code>margin</code></h3><p>优点：设置简单；缺点：支持IE8+，在布局变更时，需改变css样式（width：XX%）结构和样式耦合在了一起</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">background</span>:<span class="number">#666</span>;&#125;<span class="comment">/*对div中的p标签设置才有间隔效果，所以在设置内容时，也是在p中设置*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果如下：<br><img src="/images/css/layout/EqualWidthLayoutPadding.jpg" alt="等分布局存在左侧padding"></p>
<p>效果不是就达到了呢？其实还不尽然，可以看到最左边还有一个宽度，我们不想要怎么办？</p>
<p>这并不是一个bug，而是我们的设置导致的，现在来删除上面的<code>padding-left: 20px;</code>吧，可以看到成了这样子：<br><img src="/images/css/layout/EqualWidthLayoutDefault.jpg" alt="等分布局未设置padding"></p>
<p>如果你需要有填充的话，自行设置吧</p>
<h3 id="2-_table+(fix)">2. <code>table</code>+<code>(fix)</code></h3><p><strong>html部分在上面的基础上，在最外层增加<code>&lt;div class=&quot;parent-fix&quot;&gt;</code>包裹住<code>&lt;div class=&quot;parent&quot;&gt;</code></strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent-fix</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">table-layout</span>: fixed;<span class="comment">/*布局优先，且在单元格未设宽度时，将被内容平分*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;<span class="comment">/*间隔，自行考虑是否取消*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-_flex-1">3. <code>flex</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>+<span class="selector-class">.column</span>&#123;<span class="comment">/*给后三列设置间隔*/</span></span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果如下：<br><img src="/images/css/layout/EqualWidthLayoutFlex.jpg" alt="等分布局FLex"><br><strong>这里使用的是margin，因为flex自动分配剩余空间</strong></p>
<h2 id="等高布局">等高布局</h2><p>大家先来看看想要的效果：<br><img src="/images/css/layout/EqualHeightLayout.jpg" alt="等高布局"></p>
<p>是不是很熟悉？html和第一部分一样：<br>但是两侧高度等同于高度最高的部分。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在<strong>使用<code>table</code>和<code>flex</code>布局时就自然实现了等高布局</strong></p>
<p>这里就不贴了，代码实现参考上面。主要是下面这个方案：</p>
<h3 id="float实现"><code>float</code>实现</h3><p>实际上没有完全相同，只是达到了效果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">9999px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">9999px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;  </span><br><span class="line">    <span class="attribute">float</span>: left; <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再一次提醒：实际情况中使用，需要在外层容器清除浮动。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>需要注意的是：本篇文章的布局，都未对父元素进行清除浮动的操作，所以在有<strong>一些</strong>使用了float的布局中，需要在parent容器清除浮动，才能在实际情况下使用。（清除浮动的方式在这里不做讨论）</p>
</blockqu]]>
    </summary>
    
      <category term="css" scheme="http://guowenfh.github.io/tags/css/"/>
    
      <category term="布局" scheme="http://guowenfh.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS3选择器详解]]></title>
    <link href="http://guowenfh.github.io/2016/01/08/css-selector/"/>
    <id>http://guowenfh.github.io/2016/01/08/css-selector/</id>
    <published>2016-01-08T14:38:19.000Z</published>
    <updated>2016-01-08T14:39:51.829Z</updated>
    <content type="html"><![CDATA[<h2 id="1-常用选择器">1.常用选择器</h2><p>1.1标签选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123; &#125;<span class="comment">/*选择标签名为p的元素*/</span></span><br></pre></td></tr></table></figure></p>
<p>1.2类选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; &#125;<span class="comment">/*选择class名为box的元素*/</span></span><br></pre></td></tr></table></figure></p>
<p>1.3ID选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pid</span>&#123; &#125;<span class="comment">/*选择id名为pid的元素*/</span></span><br></pre></td></tr></table></figure></p>
<p>1.4通配符选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#123; &#125;<span class="comment">/*选择页面中所有的元素*/</span></span><br></pre></td></tr></table></figure></p>
<p>1.5选择器前缀<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.bd</span>&#123;&#125;<span class="comment">/*选中class名为bd且标签为div的元素*/</span></span><br></pre></td></tr></table></figure></p>
<p>1.6属性选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[disabled]</span>&#123;&#125;<span class="comment">/*选择带有属性disabled的所有元素*/</span></span><br><span class="line"><span class="selector-attr">[type=button]</span>&#123;&#125;<span class="comment">/*选择type属性为button的所有元素*/</span></span><br><span class="line"><span class="selector-attr">[class~=sports]</span>&#123;&#125;<span class="comment">/*选择class属性包含sports所有元素*/</span></span><br><span class="line"><span class="selector-attr">[lang|=en]</span>&#123;  &#125;<span class="comment">/*选择以lang属性以"en"开头以及以"-"分隔的所有元素*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^="#"]</span>&#123; &#125;<span class="comment">/*选择href属性以"#"开头的a元素*/</span></span><br><span class="line"><span class="selector-attr">[href$="pdf"]</span>&#123;  &#125;<span class="comment">/*选择href属性以"pdf"结尾的元素*/</span></span><br><span class="line"><span class="selector-attr">[href*="lady.163.com"]</span>&#123;&#125;<span class="comment">/*选择href属性中包含"lady.163.com"的元素*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-伪类选择器">2.伪类选择器</h2><p>2.1链接伪类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*前两个只可用于描元素（链接）*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#FF0000</span>;&#125;     <span class="comment">/* 未被访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125;  <span class="comment">/* 已被访问的链接 */</span></span><br><span class="line"><span class="comment">/*后两个可以用于其它元素*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125;    <span class="comment">/* 鼠标指针移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;   <span class="comment">/* 正在被点击的链接 */</span></span><br></pre></td></tr></table></figure></p>
<p>链接在进行设置时：<code>a:hover</code> 必须位于 <code>a:link</code> 和 <code>a:visited</code> 之后, <code>a:active</code> 必须位于 <code>a:hover</code> 之后。</p>
<p>2.2动态伪类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;&#125;<span class="comment">/*设置input元素获得焦点后的样式*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:enabled</span>&#123;&#125;<span class="comment">/*元素可用的状态*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span>&#123;&#125;<span class="comment">/*元素不可用的状态，属性选择器[disabled]的简写*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>&#123;&#125;<span class="comment">/*单选框或者复选框选择的样式*/</span></span><br></pre></td></tr></table></figure></p>
<p>2.3树形图上的伪类<br>html结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>选择符：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:first-child</span>&#123;&#125;<span class="comment">/*选择第一个ul下第一个标签（css2定义，支持ie7）在处理margin时很有用*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*以下全是CSS3新增的伪类*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:last-child</span>&#123;&#125;<span class="comment">/*选择最后一个li标签*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child(n)</span>&#123;&#125;<span class="comment">/*选择()内的表达式如：[2n+1]，或者数字所代表的li标签*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-last-child(n)</span><span class="comment">/*同上，反向选择*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:only-child</span>&#123;&#125;<span class="comment">/*选择ul只有一个子元素的项，这里会选中第三个li下的a标签*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:first-of-type</span>&#123;&#125;<span class="comment">/*选择第一个该类型的标签，会选择第一个li和p*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:last-of-type</span>&#123;&#125;<span class="comment">/*选择最后一个该类型的标签，会选择第四个li和p*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-last-of-type(2n)</span>&#123;  &#125;<span class="comment">/*倒数的选择(.)内的表达式[2n]，或数字所代表的该类型标签。选择第一个和第三个li标签*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:only-of-type</span>&#123;&#125;<span class="comment">/*选择ul下中只有一个该类型的项，会选中a标签和p标签*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;&#125;<span class="comment">/*选择文档的根元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:not(li)</span>&#123;&#125;<span class="comment">/*选择不含有li标签的元素，这里会选中a标签和p元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:empty</span>&#123;&#125;<span class="comment">/*匹配ul下没有任何子元素（包括text节点）的元素，这里匹配不到，把p标签中的5删除，可匹配成功*/</span></span><br><span class="line"><span class="selector-tag">E</span><span class="selector-pseudo">:target</span>&#123;&#125;<span class="comment">/*匹配相关URL（锚点）指向的元素。*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-伪元素选择器">3.伪元素选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::first-letter</span>&#123;&#125;<span class="comment">/*选择第一个字母*/</span></span><br><span class="line"><span class="selector-pseudo">::first-line</span>&#123;&#125;<span class="comment">/*选择第一行*/</span></span><br><span class="line"><span class="selector-pseudo">::before</span>&#123;<span class="attribute">content</span>:<span class="string">"before"</span>;&#125;<span class="comment">/*在某个元素之前插入一些内容*/</span></span><br><span class="line"><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>:<span class="string">"after"</span>;&#125;<span class="comment">/*在某个元素后插入一些内容*/</span></span><br><span class="line"><span class="selector-pseudo">::selection</span>&#123;&#125;<span class="comment">/*设置于被用户选中时的样式*/</span></span><br><span class="line"><span class="selector-pseudo">::placeholder</span>&#123;&#125;<span class="comment">/*设置对象文字占位符的样式*/</span></span><br></pre></td></tr></table></figure>
<h2 id="4-组合选择器">4.组合选择器</h2><p>4.1后代选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">h2</span>&#123;  &#125;<span class="comment">/*选择class名为mian元素内的所有h2标签*/</span></span><br></pre></td></tr></table></figure></p>
<p>4.2子选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">h2</span>&#123;  &#125;<span class="comment">/*选择class名为mian元素内的直接关联与父元素的h2标签*/</span></span><br></pre></td></tr></table></figure></p>
<p>4.3相连选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>~<span class="selector-tag">p</span>&#123;&#125;<span class="comment">/*只要P标签前有h2标签便选择*/</span></span><br></pre></td></tr></table></figure></p>
<p>4.4兄弟选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>~<span class="selector-tag">p</span>&#123;&#125;<span class="comment">/*选择h2标签后出现的所有p标签*/</span></span><br></pre></td></tr></table></figure></p>
<p>4.4选择器分组<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>&#123;<span class="attribute">backgound-color</span>:<span class="number">#ddd</span>;&#125;<span class="comment">/*同时设置h1,h2,h3标签,使用","分隔*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5-继承">5.继承</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:<span class="string">"Microsoft Yahei"</span>;&#125;<span class="comment">/*设置页面中所有的字体为微软雅黑*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>继承属性<ul>
<li>color</li>
<li>font</li>
<li>text-align</li>
<li>list-style</li>
<li>…</li>
</ul>
</li>
<li>非继承属性<ul>
<li>background</li>
<li>border</li>
<li>position</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="6-CSS优先级">6.CSS优先级</h2><ul>
<li>计算方法<ul>
<li>a = 行内样式</li>
<li>b = ID选择器的数量</li>
<li>c = 类/伪类和属性选择器的数量</li>
<li>d = 标签选择器和伪元素选择器数量</li>
</ul>
</li>
</ul>
<blockquote>
<p>value = a<em>1000 + b</em>100 + c*10 +d</p>
</blockquote>
<p><code>!important</code>强行提升优先级</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-常用选择器">1.常用选择器</h2><p>1.1标签选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="css" scheme="http://guowenfh.github.io/tags/css/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS之各种居中]]></title>
    <link href="http://guowenfh.github.io/2016/01/06/css-position-middle/"/>
    <id>http://guowenfh.github.io/2016/01/06/css-position-middle/</id>
    <published>2016-01-06T08:16:08.000Z</published>
    <updated>2016-01-06T09:33:09.478Z</updated>
    <content type="html"><![CDATA[<p>本博客讨论居中情况设定为<strong>总宽度不定,内容宽度不定</strong>的情况。（改变大小时，仍然居中）。</p>
<p>特别说明：在元素设置<code>position:absolute;</code>来设置居中效果时，除去博客下介绍的css3方法外，还可以使用负的<code>margin</code>来居中，这样解决了兼容性的问题，但是只适用于宽高已知的情况（因为负的偏移量为元素宽高的一半）。宽高改变时，不再是居中效果。</p>
<p>在这些布局中的子元素，因为其属性设置，都默认为内容宽度。</p>
<p>本博客所有居中的例子，只讨论css的实现，html代码统一如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="1-_水平居中">1. 水平居中</h2><p><img src="/images/css/position/HorizontalCenter.jpg" alt="水平居中"></p>
<h3 id="1-1_inline-block配合text-align">1.1 <code>inline-block</code>配合<code>text-align</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：兼容性非常好，只需要添加只需要在子元素的css中添加<code>*display:inline</code>和<code>*zoom:1</code>就可兼容到IE6、7；缺点：内部文字也会水平居中，需消除影响。</p>
</blockquote>
<h3 id="1-2_table配合margin">1.2  <code>table</code>配合<code>margin</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：设置特别简单，只需对子元素进行设置，支持IE8+，需支持IE6，7时，可更换子元素为表格结构。</p>
</blockquote>
<h3 id="1-3_abasolute配合transform">1.3  <code>abasolute</code>配合<code>transform</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h2 id="2-_垂直居中">2. 垂直居中</h2><p><img src="/images/css/position/VerticalCenter.jpg" alt="垂直居中"></p>
<h3 id="2-1_table-cell配合vertical-align">2.1  <code>table-cell</code>配合<code>vertical-align</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：设置简单，只需对父元素进行设置，兼容到IE8+，需兼容地版本浏览器时，可更换<code>div</code>为表格结构。</p>
</blockquote>
<h3 id="2-2_absolute配合tranform">2.2  <code>absolute</code>配合<code>tranform</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h2 id="3-_水平+垂直居中">3.  水平+垂直居中</h2><p><img src="/images/css/position/middle.jpg" alt="水平垂直居中"></p>
<h3 id="3-1_inline-block配合text-align加上table-cell配合vertical-align">3.1  <code>inline-block</code>配合<code>text-align</code>加上<code>table-cell</code>配合<code>vertical-align</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：综合前两中方法，兼容性好！支持IE8+，低版本浏览器也好兼容。缺点：设置较为复杂。</p>
</blockquote>
<h3 id="3-2_absolute配合transform">3.2  <code>absolute</code>配合<code>transform</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h2 id="4-_全能的flex">4. 全能的<code>flex</code></h2><p>css3新增布局属性，布局简单，强大，性能略差，只支持IE10+，在移动端使用较多。</p>
<h3 id="4-1_水平居中">4.1 水平居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*当父元素设置display: flex;时，子元素为flex-item，默认为内容宽度。*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在设置子元素为margin: 0 auto;时，可删除父元素的justify-content: center;同样可以达到居中效果*/</span></span><br><span class="line"><span class="comment">/*  .child&#123;</span><br><span class="line">        margin: 0 auto; </span><br><span class="line">    &#125;*/</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2_垂直居中">4.2  垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3_水平垂直居中">4.3  水平垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如同flex布局的第一部分一样这里也可以对子元素进行下面的设置：同时删除上面的除去display外的其他属性*/</span></span><br><span class="line"><span class="comment">/*  .child&#123;</span><br><span class="line">        margin:auto;</span><br><span class="line">    &#125; */</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>本博客讨论居中情况设定为<strong>总宽度不定,内容宽度不定</strong>的情况。（改变大小时，仍然居中）。</p>
<p>特别说明：在元素设置<code>position:absolute;</code>来设置居中效果时，除去博客下介绍的css3方法外，还可以使用]]>
    </summary>
    
      <category term="css" scheme="http://guowenfh.github.io/tags/css/"/>
    
      <category term="布局" scheme="http://guowenfh.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery入门笔记之（六）工具函数]]></title>
    <link href="http://guowenfh.github.io/2016/01/03/jQuery-06-toolFunction/"/>
    <id>http://guowenfh.github.io/2016/01/03/jQuery-06-toolFunction/</id>
    <published>2016-01-03T14:20:57.000Z</published>
    <updated>2016-01-03T14:28:45.749Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>工具函数直接依附于 jQuery 对象，针对 jQuery 对象本身定义的方法，它是全局性<br>的函数。主要提供比如字符串、数组、对象等操作方面的遍历。</p>
</blockquote>
<p><strong>字符串操作</strong><br>去除字符串左右空格的工具函数：<code>$.trim()</code>。这个函数我在task0002的部分已经用正则实现了。<br>如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    result = str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>); <span class="comment">//使用正则进行字符串替换</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是jQuery中的使用方法</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"         guowen      "</span>;</span><br><span class="line">alert($.trim(str));<span class="comment">//可以看到空格被去除了</span></span><br></pre></td></tr></table></figure>
<h2 id="数组及对象操作">数组及对象操作</h2><p>jQuery 为处理数组和对象提供了一些工具函数，这些函数可以便利的给数组或对象进行<br>遍历、筛选、搜索等操作。</p>
<p><strong>遍历</strong></p>
<p>这个我也实现了，其实特别简单，只不过jQuery与和我实现的方法略微有一点不同，且更强大一点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"二狗"</span>, <span class="string">"甲地"</span>, <span class="string">"道德"</span>, <span class="string">"鲤鱼"</span>];</span><br><span class="line"><span class="comment">//原生JS实现，只能用来遍历数组，不能遍历对象。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;<span class="comment">//遍历传参</span></span><br><span class="line">        fn(arr[i], i);<span class="comment">//第一项为值，第二项为索引</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index+<span class="string">":"</span>+value);<span class="comment">//0:二狗1:甲地2:道德3:鲤鱼</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery中的方法</span></span><br><span class="line">$.each(arr, <span class="function"><span class="keyword">function</span> (<span class="params">index,value</span>) </span>&#123;<span class="comment">//注意此处更改了参数的位置。index为数组下标，从0开始</span></span><br><span class="line">    <span class="built_in">console</span>.log(index+<span class="string">":"</span>+value);<span class="comment">//0:二狗1:甲地2:道德3:鲤鱼</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//$.each()还可以用来遍历对象</span></span><br><span class="line"><span class="comment">//&lt;div id="box"&gt;&lt;/div&gt;</span></span><br><span class="line">$.each($.ajax(), <span class="function"><span class="keyword">function</span> (<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).html($(<span class="string">"#box"</span>).html() + name + <span class="string">"."</span> + <span class="string">"&lt;br /&gt;"</span>);<span class="comment">//一堆,就不贴了</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong><code>$.grep()</code>数据筛选</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">55</span>, <span class="number">32</span>];</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 数据筛选函数。</span><br><span class="line"> * @param  &#123;String or Number&#125; element  这里表示数组项，字符串数字都有可能（自行在函数内部进行筛选）</span><br><span class="line"> * @param  &#123;Number&#125; index   表示数组下标，如下面的index&lt;4，就只在前四项进行筛选</span><br><span class="line"> * @return &#123;String or Number&#125;         返回筛选出来的项</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">console</span>.log($.grep(arr,<span class="function"><span class="keyword">function</span>  (<span class="params">element,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element&lt;<span class="number">6</span>&amp;&amp;index&lt;<span class="number">4</span>;<span class="comment">//会打印出[4, 5]。</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p><strong> $.map()修改数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还是上面的数组</span></span><br><span class="line"><span class="keyword">var</span> arrMap = $.map(arr,<span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(element&lt;<span class="number">6</span> &amp;&amp; index&lt;<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> element+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arrMap);<span class="comment">//打印出[5,6]</span></span><br></pre></td></tr></table></figure>
<p><strong> $.inArray()获取查找到元素的下标</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 获取查找到元素的下标</span><br><span class="line">* @param  &#123;String or Number&#125; element  需要查找的字符串或数字</span><br><span class="line">* @param  &#123;Array&#125; arr   待查找的数组</span><br><span class="line">* @return &#123;Number&#125;   返回查找到的元素的数组下标0开始，(查找到多个时，返回第一个)，未查找到时返回-1</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">var</span> arrInArray = $.inArray(<span class="number">1</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log(arrInArray);<span class="comment">//返回4</span></span><br></pre></td></tr></table></figure>
<p><strong> $.merge()合并两个数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将arr2拼接到arr后，返回合并的数组</span></span><br><span class="line">$.merge(arr, arr2);</span><br></pre></td></tr></table></figure>
<p> <strong>$.unique()删除重复的 DOM 元素</strong>（不能处理数字和字符串）<br>没太明白，只能删除拼接过来的重复元素，对自身的元素不受影响？<a href="http://www.css88.com/jqapi-1.9/jQuery.unique/" target="_blank" rel="external">文档地址</a><br>希望有看明白的教育我一下。。</p>
<p>发一个我实现的普通数组去重吧。(处理数字和字符串)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqArray</span>(<span class="params">arr</span>) </span>&#123;<span class="comment">//数组去重</span></span><br><span class="line">    <span class="keyword">var</span> result = []; <span class="comment">//创建一个新数组。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.indexOf(arr[i]) === <span class="number">-1</span>) &#123; <span class="comment">//查找是否已经含有该元素</span></span><br><span class="line">            result.push(arr[i]); <span class="comment">//添加到新数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//返回去重后的新数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> toArray()合并多个dom元素组成数组。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'li'</span>).toArray());<span class="comment">//[[li, li, li, li]]。注意数组项是原生的DOM元素。</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'li'</span>).toArray().length);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h2 id="测试操作（类型判断）">测试操作（类型判断）</h2><blockquote>
<p>在jQuery数据有着各种类型和状态。可以通过判断数据的类型和状态做相应的操作。</p>
</blockquote>
<p>测试工具函数</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$.isArray(obj)</td>
<td>判断是否为数组对象，是返回 true</td>
</tr>
<tr>
<td>$.isFunction(obj)</td>
<td>判断是否为函数，是返回 true</td>
</tr>
<tr>
<td>$.isEmptyObject(obj)</td>
<td>判断是否为空对象，是返回 true</td>
</tr>
<tr>
<td>$.isPlainObjet(obj)</td>
<td>判断是否为纯粹对象，是返回 true</td>
</tr>
<tr>
<td>$.contains(obj)</td>
<td>判断 DOM 节点是否含另一个 DOM 节点，是返回 true</td>
</tr>
<tr>
<td>$.type(data)</td>
<td>判断数据类型</td>
</tr>
<tr>
<td>$.isNumeric(data)</td>
<td>判断数据是否为数值</td>
</tr>
<tr>
<td>$.isWindow(data)</td>
<td>判断数据是否为 window 对象</td>
</tr>
</tbody>
</table>
<p>挑几个出来说明一下</p>
<p>判断是否为空对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;a:<span class="string">"1"</span>&#125;;</span><br><span class="line">alert($.isEmptyObject(obj));<span class="comment">//false。</span></span><br></pre></td></tr></table></figure></p>
<p>判断是由{}或 new Object()创造出的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert($.isPlainObject(&#123;a:<span class="string">"1"</span>&#125;));<span class="comment">//true</span></span><br><span class="line">alert($.isPlainObject(<span class="keyword">new</span> <span class="built_in">Object</span>(<span class="string">"a"</span>)));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p>
<p><strong>URL解析</strong><br>其实在Ajax的博客中已经讲到了：$.param()将对象键值对转换为 URL 字符串键值对</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'Lee'</span>,</span><br><span class="line">    email : <span class="string">"guowen921@163.com"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( $.param(obj));<span class="comment">//name=Lee&amp;email=guowen921%40163.com</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>( $.param(obj)));<span class="comment">//name=Lee&amp;email=guowen921@163.com</span></span><br><span class="line"><span class="comment">//请注意上面的邮箱部分，$.param()会对于特殊字符进行编码传输，下面的代码，可以将其解析成字符</span></span><br></pre></td></tr></table></figure>
<p><strong>改变this指向</strong><br>$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。<br>主要用处是为回调函数绑定上下文对象。如如外部事件触发调用对象方法时 this 的指向问题。</p>
<blockquote>
<p>来自javaScript标准参考教程。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;button&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">"Lee"</span>,</span><br><span class="line">    test: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="string">"button"</span>)</span><br><span class="line">  .on(<span class="string">"click"</span>, o.test) <span class="comment">// 无输出（默认this指向触发该事件的元素也就是button）</span></span><br><span class="line">  .on(<span class="string">"click"</span>, $.proxy(o.test, o)); <span class="comment">// Lee，现在指向o</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>工具函数直接依附于 jQuery 对象，针对 jQuery 对象本身定义的方法，它是全局性<br>的函数。主要提供比如字符串、数组、对象等操作方面的遍历。</p>
</blockquote>
<p><strong>字符串操作</strong><br]]>
    </summary>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/tags/jQuery/"/>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/categories/jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery入门笔记之（五）jQuery中的Ajax]]></title>
    <link href="http://guowenfh.github.io/2016/01/03/jQuery-05-Ajax/"/>
    <id>http://guowenfh.github.io/2016/01/03/jQuery-05-Ajax/</id>
    <published>2016-01-03T04:22:45.000Z</published>
    <updated>2016-01-06T09:45:18.663Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>关于Ajax的概述就不说了，有兴趣自己去找一下吧，并且建议去我博客看关于原生js实现Ajax函数的实现，希望有所帮助。服务器的配置，那篇文章也给出了地址。<br><a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-1/">Ajax入门（一）从0开始到一次成功的GET请求</a><br><a href="http://guowenfh.github.io/2015/12/18/Ajax-elementary-course-2-fn/">Ajax入门（二）Ajax函数封装</a></p>
</blockquote>
<h2 id="jQuery中的Ajax">jQuery中的Ajax</h2><blockquote>
<p>jQuery 对 Ajax 做了大量的封装，我们使用起来也较为方便，不需要去考虑浏览器兼容性。对于封装的方式，jQuery采用了三层封装：最底层的封装方法为：$.ajax()，而通过这层封装了第二层有三种方法：.load()、$.get()和$.post()，最高层是$.getScript()和$.getJSON()方法。</p>
</blockquote>
<h3 id="Ajax中的load()方法">Ajax中的<code>load()</code>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Ajax中的load方法（局部方法，可以直接绑定在需要获取的元素上）</span><br><span class="line"> * @param &#123;String&#125;        url  必须，获取文件地址</span><br><span class="line"> * @param &#123;JSON or String&#125;          可选，键值对方式的请求参数或者（使用键值对形式，请求将转化成post）</span><br><span class="line"> * @param &#123;Function&#125;      可选，请求成功的回调函数</span><br><span class="line"> *   @config   &#123;String&#125;   responseText         获得字符串形式的响应数据</span><br><span class="line"> *   @config   &#123;String&#125;   textStatus            文本方式返回HTTP状态码</span><br><span class="line"> *   @config   &#123;Object&#125;   XMLHttpRequest        xhr对象，有多种属性</span><br><span class="line"> */</span></span><br><span class="line">.load(url, data, complete(responseText, textStatus, XMLHttpRequest));</span><br></pre></td></tr></table></figure>
<p>例如下面这段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#box'</span>).load(<span class="string">'test.php'</span>, &#123;url : <span class="string">'guowen'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在控制台可以看到请求为POST，（注意：这里第二个参数若是字符串的情况，例如”url=guowen”，请求仍然为GET。）<br>所以服务器端php文件应该如此设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">"url"</span>] == <span class="string">"guowen"</span>) &#123;<span class="comment">//get请求把POST更改一下就好了</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;a href='http://guowenfh.github.io/'&gt;三省吾身丶丶&lt;/a&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"其他网站"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>关于XHR对象上的属性，和HTTP状态码，参考我原来的博客。</p>
<h3 id="$-get()和$-post()">$.get()和$.post()</h3><blockquote>
<p>.load()方法是局部方法，因为他需要一个包含元素的 jQuery 对象作为前缀。而$.get()和$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。</p>
</blockquote>
<p>$.get()方法有四个参数，前面三个参数和.load()一样，多了一个第四参数type，即服务器返回的内容格式：包括xml、html、script、json、jsonp和text。第一个参数为必选参数，后面三个为可选参数</p>
<p>GET方式请求会直接在html后以<code>?Key=value</code>跟随，所以，有三种形式请求数据，</p>
<ol>
<li>直接跟在url后</li>
<li>字符串形式的<code>&quot;url=guowen&quot;</code></li>
<li>键值对形式的<code>{url:&quot;guowen&quot;}</code></li>
</ol>
<p>POST请求方式除去不能直接跟在url后之外，剩余两个，使用方法一样</p>
<p><strong>注意:</strong> 与<code>.load()</code>方法不同的是：<code>.load()</code>方法根据第二个参数的不同类型，请求方式会改变，但这里已经是两个独立的方法了，所以请求类型不会进行转换。</p>
<p>第四个参数一般都不进行设置，jQuery会自动转换其类型。强制设置时，有可能会连标签一起返回。</p>
<p>至于POST与GET方式请求的差别，在我原来的博客中也有写到，这里就不赘述了。</p>
<h3 id="$-getScript()和$-getJSON()"><code>$.getScript()</code>和<code>$.getJSON()</code></h3><p>jQuery提供了一组用于特定异步加载的方法：<code>$.getScript()</code>，用于加载特定的JS文件；<code>$.getJSON()</code>，用于专门加载JSON文件。</p>
<p><code>$.getJSON()</code>方法与之前的使用方法类似，就是把第四个参数，类型强制设置成了JSON。</p>
<p>有时我们希望能够特定的情况再加载JS文件，而不是一开始把所有JS文件都加载了，这时就可以使用<code>$.getScript()</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击按钮后再加载 JS 文件</span></span><br><span class="line">$(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.getScript(<span class="string">'test.js'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="$-ajax()"><code>$.ajax()</code></h3><blockquote>
<p>$.ajax()是所有 ajax 方法中最底层的方法，所有其他方法都是基于$.ajax()方法的封装。这个方法只有一个参数，传递一个各个功能键值对的对象。</p>
</blockquote>
<p>参数很多有兴趣的自己去看<a href="http://www.css88.com/jqapi-1.9/jQuery.ajax/" target="_blank" rel="external">jQuery.ajax()</a>，本来准备写几个常用的。强迫症犯了，去网上找资料做成了表格。。如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>String</td>
<td>发送请求的地址</td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>请求方式：POST 或 GET，默认 GET</td>
</tr>
<tr>
<td>timeout</td>
<td>Number</td>
<td>设置请求超时的时间（毫秒）</td>
</tr>
<tr>
<td>data</td>
<td>Object 或String</td>
<td>发送到服务器的数据，键值对字符串或对象</td>
</tr>
<tr>
<td>dataType</td>
<td>String</td>
<td>返回的数据类型，比如 html、xml、json 等</td>
</tr>
<tr>
<td>beforeSend</td>
<td>Function</td>
<td>发送请求前可修改 XMLHttpRequest 对象的函数</td>
</tr>
<tr>
<td>complete</td>
<td>Function</td>
<td>请求完成后调用的回调函数</td>
</tr>
<tr>
<td>success</td>
<td>Function</td>
<td>请求成功后调用的回调函数</td>
</tr>
<tr>
<td>error</td>
<td>Function</td>
<td>请求失败时调用的回调函数</td>
</tr>
<tr>
<td>global</td>
<td>Boolean</td>
<td>默认为 true，表示是否触发全局 Ajax</td>
</tr>
<tr>
<td>cache</td>
<td>Boolean</td>
<td>设置浏览器缓存响应，默认为 true。如果 dataType类型为 script 或 jsonp 则为 false。</td>
</tr>
<tr>
<td>content</td>
<td>DOM</td>
<td>指定某个元素为与这个请求相关的所有回调函数的上下文。</td>
</tr>
<tr>
<td>contentType</td>
<td>String</td>
<td>指 定 请 求 内 容 的 类 型 。 默 认 为application/x-www-form-urlencoded。</td>
</tr>
<tr>
<td>async</td>
<td>Boolean</td>
<td>是否异步处理。默认为 true，false 为同步处理</td>
</tr>
<tr>
<td>processData</td>
<td>Boolean</td>
<td>默认为 true，数据被处理为 URL 编码格式。如果为 false，则阻止将传入的数据处理为 URL 编码的格式。</td>
</tr>
<tr>
<td>dataFilter</td>
<td>Function</td>
<td>用来筛选响应数据的回调函数。</td>
</tr>
<tr>
<td>ifModified</td>
<td>Boolean</td>
<td>默认为 false，不进行头检测。如果为true，进行头检测，当相应内容与上次请求改变时，请求被认为是成功的。</td>
</tr>
<tr>
<td>jsonp</td>
<td>String</td>
<td>指定一个查询参数名称来覆盖默认的 jsonp 回调参数名 callback。</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td>在 HTTP 认证请求中使用的用户名</td>
</tr>
<tr>
<td>password</td>
<td>String</td>
<td>在 HTTP 认证请求中使用的密码</td>
</tr>
<tr>
<td>scriptCharset</td>
<td>String</td>
<td>当远程和本地内容使用不同的字符集时，用来设置 script 和 jsonp 请求所使用的字符集。</td>
</tr>
<tr>
<td>xhr</td>
<td>Function</td>
<td>用来提供 XHR 实例自定义实现的回调函数</td>
</tr>
<tr>
<td>traditional</td>
<td>Boolean</td>
<td>默认为 false，不使用传统风格的参数序列化。如为 true，则使用</td>
</tr>
</tbody>
</table>
<p>最常用的如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type : <span class="string">'POST'</span>, <span class="comment">//这里可以换成 GET</span></span><br><span class="line">        url : <span class="string">'test.php'</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line">            url : <span class="string">'guowen'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success : <span class="function"><span class="keyword">function</span> (<span class="params">response, stutas, xhr</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#box'</span>).html(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意：对于data属性，如果是GET、模式，可以使用三种之前说所的三种形式。如果是POST模式可以使用之前所说的两种形式。（这里不需要考虑之前的data类型的问题了，因为指定了请求类型，不会转化）</p>
<h3 id="表单序列化">表单序列化</h3><p>使用表单序列化方法<code>.serialize()</code>，会智能的获取指定表单内的所有元素。这样，在面对大量表单元素时，会把表单元素内容序列化为字符串，然后再使用Ajax请求。<br>序列化表单内的元素：<code>data : $(&#39;form&#39;).serialize()</code>，其余部分相同。</p>
<p>除此之外还可以直接获取单选框、复选框和下拉列表框等内容</p>
<p>除了<code>.serialize()</code>方法，还有一个可以返回 JSON 数据的方法：<code>.serializeArray()</code>。这个方法可以直接把数据整合成键值对的 JSON 对象。<br>使用方法相同<code>$(&#39;form&#39;).serializeArray()</code>.</p>
<p>有时，我们可能会在同一个程序中多次调用$.ajax()方法。而它们很多参数都相同，这<br>个时候我们课时使用 jQuery 提供的<code>$.ajaxSetup()</code>请求默认值来初始化参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form input[type=button]'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajaxSetup(&#123;<span class="comment">//初始化多个ajax方法相同部分参数，后面再写ajax的时候，就不用在写了。</span></span><br><span class="line">        type : <span class="string">'POST'</span>,</span><br><span class="line">        url : <span class="string">'test.php'</span>,</span><br><span class="line">        data : $(<span class="string">'form'</span>).serialize()<span class="comment">//表单序列化</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        success : <span class="function"><span class="keyword">function</span> (<span class="params">response, status, xhr</span>) </span>&#123;</span><br><span class="line">                    alert(response);</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在使用 data 属性传递的时候，如果是以对象形式传递键值对，可以使用<code>$.param()</code>方法将对象转换为字符串键值对格式。</p>
<p>主要是针对无法直接使用表单序列化方法<code>.serialize()</code>的情况，且传递参数为对象，建议使用该方法进行解析后再进行传递。</p>
<h2 id="Ajax进阶">Ajax进阶</h2><h3 id="加载请求，及错误处理。">加载请求，及错误处理。</h3><p>主要是处理网速较慢的情况，出现请求时间较长的问题。而此时若没有一点提示，用户可能会认为你的网页出现了问题。若是能在请求过程中给用户一些提示，比如：正在努力加载中…… 。 可能会对用户更加友好一些。<br>jQuery提供了两个全局事件，jQuery 提供了两个全局事件，<code>.ajaxStart()</code>和<code>.ajaxStop()</code>。<br>这两个全局事件，只要用户触发了 Ajax，请求开始时（<strong>未完成其他请求</strong>）激活<code>.ajaxStart()</code>，请求结束时（<strong>所有请求都结束了</strong>）激活<code>.ajaxStop()</code>。<br>值得注意的是，因为是全局事件，所以这两个方法是直接需要直接绑定到document上的。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".loading"</span>).show();</span><br><span class="line">&#125;).ajaxStop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".loading"</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然你也可以自行在ajax内部进行一些设置,如请求超时时间，该ajax函数是否触发全局事件等等。以键值对的方式写明就可以了。</p>
<p>错误处理也特别简单</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">//…………</span></span><br><span class="line">    timeout : <span class="number">500</span>,<span class="comment">//如果请求时间太长，可以设置超时</span></span><br><span class="line">    global : <span class="literal">false</span>,<span class="comment">//如果某个 ajax 不想触发全局事件，可以设置取消</span></span><br><span class="line">    error : <span class="function"><span class="keyword">function</span>(<span class="params">xhr,errorText,errorType</span>)</span>&#123;<span class="comment">//一般都直接用xhr对象</span></span><br><span class="line">                alert(<span class="string">"发生错误："</span>+xhr.status);<span class="comment">//返回错误状态码</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>除此之外<code>$.get()</code>、<code>$.post()</code>和<code>.load()</code>,可以通过连缀处理使用局部<code>.error()</code>方法来处理错误，当然还有一个全局的方法：通过全局<code>.ajaxError()</code>事件方法来返回错误信息。即可</p>
<h3 id="请求全局事件">请求全局事件</h3><p>jQuery 对于 Ajax 操作提供了很多全局事件方法，除去上面已经提到的.ajaxStart()、.ajaxStop()、.ajaxError()等事件方法。他们都属于请求时触发的全局事件，除了这些，还有一些其他全局事件：</p>
<ol>
<li>.ajaxSuccess()，对应一个局部方法：.success()，请求成功完成时执行。</li>
<li>.ajaxComplete()，对应一个局部方法：.complete()，请求完成后注册一个回调函数。</li>
<li>.ajaxSend()，没有对应的局部方法，只有属性 beforeSend，请求发送之前要绑定的函数。</li>
</ol>
<p><strong>注意：</strong>全局事件方法是所有 Ajax 请求都会触发到，并且只能绑定在 document 上。而局部方法，则针对某个 Ajax。<br>对于一些全局事件方法的参数，大部分为对象，而这些对象有哪些属性或方法能调用，<br>可以通过遍历方法得到。如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历 settings 对象的属性</span></span><br><span class="line">$(<span class="built_in">document</span>).ajaxSuccess(<span class="function"><span class="keyword">function</span> (<span class="params">event, xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> settings) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这些全局方法，在$.ajax()方法中都可以直接以参数中的键值对的形式来完成</p>
<h3 id="JSON和JSONP">JSON和JSONP</h3><p>其实在同一个域中时，只要url的后缀是json的文件的，默认就是json。当然你还可以使用<code>$.ajax()</code>方法设置 dataType属性加载 JSON 文件。</p>
<p>先来试试本地JSON:<br>php如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $_arr= <span class="keyword">array</span>(<span class="string">'a'</span>=&gt;<span class="number">1</span>,<span class="string">'b'</span>=&gt;<span class="number">2</span>,<span class="string">'c'</span>=&gt;<span class="number">3</span>);</span><br><span class="line">    $_result = json_encode($_arr);</span><br><span class="line">    <span class="keyword">echo</span> $_result;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">"post"</span>,</span><br><span class="line">    url:<span class="string">"test.php"</span>,</span><br><span class="line">    dataType:<span class="string">"json"</span>,<span class="comment">//因为文件类型是php。但是返回的数据是json，所以必须设置类型，否则返回字符串</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">response,staus,xhr</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.a);<span class="comment">//打印出来1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>实现跨域：这部分需要服务器端配合。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $_arr= <span class="keyword">array</span>(<span class="string">'a'</span>=&gt;<span class="number">1</span>,<span class="string">'b'</span>=&gt;<span class="number">2</span>,<span class="string">'c'</span>=&gt;<span class="number">3</span>);</span><br><span class="line">    $_result = json_encode($_arr);</span><br><span class="line">    $_callback = $_GET[<span class="string">'callback'</span>];<span class="comment">//关键在这。配合客户端JS使用</span></span><br><span class="line">    <span class="keyword">echo</span> $_callback.<span class="string">"($_result)"</span>;<span class="comment">//php用点号实现字符串拼接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>客户端实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;<span class="comment">//我本地地址为http://127.0.0.1:8020/ajax.html</span></span><br><span class="line">    type:<span class="string">"GET"</span>,</span><br><span class="line">    url:<span class="string">"http://localhost/test.php?callback=?"</span>,<span class="comment">//这样就可以实现跨域资源的访问了，最后的？号，jQuery会自动转化成字符串</span></span><br><span class="line">    dataType:<span class="string">"json"</span>,<span class="comment">//若这里使用JSONP的话，可以删除上面url的“?callback=?”，jQuery会自动处理。</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">response,staus,xhr</span>)</span>&#123;</span><br><span class="line">        alert(response.a);</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当然我们还可以进行使用<code>$.getJSON()</code>。使用方式同上。</p>
<h3 id="jqXHR对象">jqXHR对象</h3><p>在之前，我们使用了局部方法：.success()、.complete()和.error()。这三个局部方法并不是 XMLHttpRequest 对象调用的，而是$.ajax()之类的全局方法返回的对象调用的。这个对象，就是 jqXHR 对象，它是原生对象 XHR 的一个超集。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取 jqXHR 对象，查看属性和方法</span></span><br><span class="line"><span class="keyword">var</span> jqXHR = $.ajax(&#123;</span><br><span class="line">    type : <span class="string">'POST'</span>,</span><br><span class="line">    url : <span class="string">'test.php'</span>,</span><br><span class="line">    data : $(<span class="string">'form'</span>).serialize()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> jqXHR) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">'&lt;br /&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果使用 jqXHR 对象的话，那么建议用.done()、.always()和.fail()代<br>替.success()、.complete()和.error()。以为在未来版本中，很可能将这三种方法废弃取消。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成功后回调函数</span></span><br><span class="line">jqXHR.done(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#box'</span>).html(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 jqXHR 的连缀方式比$.ajax()的属性方式有三大好处：</p>
<ol>
<li>可连缀操作，可读性大大提高；</li>
<li>可以多次执行同一个回调函数；</li>
<li>为多个操作指定回调函数；</li>
</ol>
<p>PS：很多都只做了一下测试，并不能熟练应用，先过一遍吧，以后再来熟练掌握。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>关于Ajax的概述就不说了，有兴趣自己去找一下吧，并且建议去我博客看关于原生js实现Ajax函数的实现，希望有所帮助。服务器的配置，那篇文章也给出了地址。<br><a href="http://guowenfh.github.io/2015/12/]]>
    </summary>
    
      <category term="Ajax" scheme="http://guowenfh.github.io/tags/Ajax/"/>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/tags/jQuery/"/>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/categories/jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery入门笔记之（四）动画效果]]></title>
    <link href="http://guowenfh.github.io/2016/01/01/jQuery-04-animation/"/>
    <id>http://guowenfh.github.io/2016/01/01/jQuery-04-animation/</id>
    <published>2016-01-01T08:29:11.000Z</published>
    <updated>2016-01-01T08:33:01.846Z</updated>
    <content type="html"><![CDATA[<h2 id="jQuery自带动画效果">jQuery自带动画效果</h2><h3 id="一-_显示、隐藏">一. 显示、隐藏</h3><p>jQuery中<code>.show()</code>为显示方法，<code>.hide()</code>为隐藏方法。<br>在无参数的时候，只是硬性的显示内容和隐藏内容。就不用代码来演示了，<code>.hide()</code>方法其实就是把对象的css设为<code>display：none</code>；而<code>.show()</code>方法会保留原来的display值，并进行设置。但是在一些场景中会有所改变，在后面进行说明）。<br>这两个方法都可以带参数。</p>
<p>先来说明第一个参数：</p>
<ol>
<li>第一种用法是传入数字，为毫秒数，表示动画过渡效果的时间。里面同时富含了匀速变大变小，以及透明度变换。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">".show"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#box"</span>).show(<span class="number">1000</span>);<span class="comment">//显示用了一秒</span></span><br><span class="line">    &#125;);<span class="comment">//可以看到很明显的动画过渡效果。</span></span><br><span class="line">    $(<span class="string">".hide"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#box"</span>).hide(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>第二种用法是传入一个字符串。”slow”、”normal”和”fast”，分别对应600毫秒、400毫秒和200毫秒。在传入空字符串或其他字符串参数时，默认为400毫秒。</li>
<li>传入一个对象，后面的参数就不能填了，都在对象中。这个比较强大，整合了<code>show()</code>方法的多种参数实现效果外，还有一些其他的方法，比如可以动画执行中的状态，来执行函数。比较复杂，而且日常使用的话，现在这个就已经够了，在这里并不做讲述，有兴趣的可以自己参考手册。</li>
</ol>
<p><strong>特别注意</strong>：在传入了速度之后，内联元素inline，隐藏显示过后会变成内联块，inline-block。假设你给一个内联元素的css中设置了宽高，本来不生效，但是在执行隐藏显示后宽高生效</p>
<p>第二个参数：为可选参数，easing运动方式，这个参数，大部分参数值需要通过插件来使用，以后再来讲解。自带的参数有两个：”swing”(缓动)、”linear”(匀速)，不填时，默认为”swing”。（注意这里传入一个错误参数，会报错）</p>
<p>第三个参数：可选，回调函数，第一个动画执行完毕后执行，实现链式动画。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>一<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>二<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>三<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">'.show'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//链式动画，递归自调用</span></span><br><span class="line">     $(<span class="string">'.test'</span>).first().show(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span> <span class="title">testShow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="keyword">this</span>).next(<span class="string">".test"</span>).show(<span class="string">'fast'</span>, testShow);</span><br><span class="line">       &#125;);<span class="comment">//注意next中的限制条件，不然会干扰其他的元素，执行该函数。</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'.hide'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">'.test'</span>).last().hide(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="keyword">this</span>).prev(<span class="string">".test"</span>).hide(<span class="string">'fast'</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">       &#125;);<span class="comment">//这里只是展现有arguments.callee这种方式，并不推荐使用，建议使用函数递归自调用</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们在使用<code>.show()</code>和<code>.hide()</code>的时候，如果需要一个按钮切换操作，需要进行一些条件判<br>断。而 jQuery 提供给我们一个类似功能的独立方法：<code>.toggle()</code>。使用方法一样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".toggle"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).toggle(<span class="string">"fast"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="二-_滑动、卷动">二. 滑动、卷动</h3><p>jQuery 提供了一组改变元素高度的方法：<code>.slideUp()</code>、<code>.slideDown()</code>和<code>.slideToggle()</code>。顾名思义，向上收缩(卷动)和向下展开(滑动)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.toggle'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'div'</span>).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>注意：滑动、卷动效果和显示、隐藏效果一样，具有相同的参数。不展开讲</p>
<h3 id="三-_淡入、淡出">三. 淡入、淡出</h3><p>jQuery 提供了一组专门用于透明度变化的方法：<code>.fadeIn()</code>和<code>.fadeOut()</code>，分别表示淡入、<br>淡出，当然还有一个自动切换的方法：<code>.fadeToggle()</code>。</p>
<p>但是上面三个透明度方法只能是从 0 到 100，或者从 100 到 0，如果我们想设置指定值就没<br>有办法了。而 jQuery 为了解决这个问题提供了<code>.fadeTo()</code>方法，使透明度到达指定值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".toggle"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).fadeToggle(<span class="string">'slow'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">".to"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).fadeTo(<span class="string">'slow'</span>, <span class="number">0.3</span>);<span class="comment">//表示30，jQuery中使用的是百分比的形式来设置</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意：最先点击<code>to</code>透明度变成0.3，再点击<code>toggle</code>，第一次点击隐藏，第二次点击显示透明度为0.3！（回到原有设置）</p>
<p>淡入、淡出和上面的显示、隐藏效果一样，具有相同参数</p>
<h2 id="自定义动画">自定义动画</h2><blockquote>
<p>jQuery提供了上面几种简单常用的固定动画方面我们使用。但有些时候，这些简单动画无法满足我们更加复杂的需求。这个时候，jQuery 提供了一个<code>.animate()</code>方法来创建我们的自定义动画，满足更多复杂多变的要求。<br>强烈建议先看我的<a href="http://guowenfh.github.io/2015/12/21/JS-Animated-Frames/">《JavaScript完美运动框架的进阶之旅》</a>，使用JS基本实现了自定义动画，只不过jQuery的更加全面完善，当然也更加复杂。</p>
</blockquote>
<p>必传参数只有一个，对象，实现动画：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).animate(&#123;</span><br><span class="line">        width: <span class="string">"200px"</span>,</span><br><span class="line">        height: <span class="string">"500px"</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这段代码已经实现了多重动画同步运动的效果，使用键值对的方式，来表明运动动画终点的位置。在实现上下左右移动时，需要结合CSS，把物体属性设置绝对定位！</p>
<p>第二个参数，可选，使用字符串时如同上面一样的3个值表示不同的时间（默认400ms），数字类型时，使用毫秒方式。直接跟在第一个参数之后就好<br>第三个参数，可选，也和上面一样，easing运动方式，自带的参数有两个：”swing”(缓动)、”linear”(匀速)，不填时，默认为”swing”。（注意这里传入一个错误参数，会报错）<br>第四个参数，可选，回调函数，在动画执行完毕后执行，可实现链式动画。</p>
<p>下面进行一些特殊的说明：</p>
<p>自定义动画中，每次开始运动都必须是初始位置或初始状态，而有时我们想通过当前位置或状态下再进行动画。jQuery 提供了自定义动画的累加、累减功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).animate(&#123;<span class="comment">//必须先设置CSS的绝对定位。</span></span><br><span class="line">        left:<span class="string">"+=100px"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>主要是说一下自定义动画中的链式动画，有两种形式：</p>
<ol>
<li>在回调函数中再执行一个动画，这个没什么好说的。</li>
<li>通过连缀或顺序来实现链式动画。</li>
</ol>
<p>通过依次顺序实现链式动画</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#box'</span>).animate(&#123;<span class="string">'left'</span> : <span class="string">'100px'</span>&#125;);</span><br><span class="line">    $(<span class="string">'#box'</span>).animate(&#123;<span class="string">'top'</span> : <span class="string">'100px'</span>&#125;);</span><br><span class="line">    $(<span class="string">'#box'</span>).animate(&#123;<span class="string">'width'</span> : <span class="string">'300px'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>注意：如果不是同一个元素，就会实现同步动画</strong></p>
<p>通过连缀实现链式动画</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#box'</span>).animate(&#123;<span class="string">'left'</span> : <span class="string">'100px'</span>&#125;)</span><br><span class="line">    .animate(&#123;<span class="string">'top'</span> : <span class="string">'100px'</span>&#125;)</span><br><span class="line">    .animate(&#123;<span class="string">'width'</span> : <span class="string">'300px'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="链式动画进阶">链式动画进阶</h2><p>之前我们已经可以实现链式动画了，如果是同一个元素，可以依次顺序或连缀调用。如果是不同元素，可以使用回调函数。但有时链式动画太多，回调函数的可读性大大降低。为此，jQuery 提供了一组专门用于链式动画的方法。</p>
<p><code>$(&#39;#box&#39;).slideUp(&#39;slow&#39;).slideDown(&#39;slow&#39;).css(&#39;background&#39;, &#39;orange&#39;);</code>这段代码中，css方法会在一开始就执行。因为动画方法可以用连缀来实现依次排列，但是css方法不是，会在一开始传入队列之前。如何解决呢？回调函数当然可以实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#box'</span>).slideUp(<span class="string">'slow'</span>).slideDown(<span class="string">'slow'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">'background'</span>, <span class="string">'orange'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这当然没问题，但是那并不是我们应该做的，因为这样可读性太差了，链式动画一多呢？原本的动画都不清晰了吧？jQuery为我们实现了一个类似回调函数的方法：<code>.queue()</code>。jQuery 的<code>.queue()</code>的回调函数可以传递一个参数，这个参数是 next 函数，在结尾处调用这个 next()方法即可再连缀执行列队动画。（不这样使用的话，后续动画效果无法实现）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//在同一个元素直接这样写就可以了。</span></span><br><span class="line">    $(<span class="string">'#box'</span>).slideUp(<span class="string">'slow'</span>)</span><br><span class="line">                .slideDown(<span class="string">'slow'</span>)</span><br><span class="line">                .queue(<span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).css(<span class="string">'background'</span>, <span class="string">'orange'</span>);</span><br><span class="line">                    <span class="comment">//next();//animate的动画效果不会生效，因为把next()注释掉了。</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .animate(&#123;<span class="comment">//记得设置绝对定位</span></span><br><span class="line">                    height: <span class="string">"200px"</span>,</span><br><span class="line">                    left: <span class="string">"100px"</span></span><br><span class="line">                &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>.queue()</code>方法还有一个功能，就是可以得到当前链式动画剩余的长度（包括当前的动画）。fx 是默认链条的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把上面的代码的第一个动画改装成如下模样时，会弹出4。</span></span><br><span class="line">$(<span class="string">'#box'</span>).slideUp(<span class="string">'slow'</span>,<span class="function"><span class="keyword">function</span>  (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert($(<span class="keyword">this</span>).queue(<span class="string">'fx'</span>).length);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>jQuery 还提供了一个清理链式动画的功能方法：<code>.clearQueue()</code>。把它放入一个链式的回调函数或<code>.queue()</code>方法里，就可以把剩下未执行的链条给截断。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清理后续链式调用</span></span><br><span class="line">$(<span class="string">'#box'</span>).slideDown(<span class="string">'slow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;$(<span class="keyword">this</span>).clearQueue()&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="动画相关方法与全局属性">动画相关方法与全局属性</h2><p><strong>停止动画</strong><br>有很多时候，我们需要停止正在运行中的动画，jQuery中为此提供了一个<code>.stop()</code>方法。<br>它有三个<strong>可选参数</strong>：</p>
<ol>
<li>queue        类型: String   停止链式动画的名称。（比较少用到，若存在，后两个参数都是指向该链式动画）</li>
<li>clearQueue类型: Boolean一个布尔值，指示是否取消后续的链式动画。默认 false.</li>
<li>jumpToEnd 类型: Boolean一个布尔值指示是否当前动画立即完成。默认false.</li>
</ol>
<p>说明：</p>
<ol>
<li>在无参数，且为链式动画时，调用<code>.stop()</code>方法，只是立即停止当前正在进行的动画，后续动画继续执行。</li>
<li>传入一个true时，立即停止动画，并且清空后续所有动画。</li>
<li>传入2个true时，立即停止，并且跳转到当前动画的结束位置，后续动画也不再执行。</li>
</ol>
<p>代码如下：有兴趣的自行测试<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"start"</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"stop"</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: absolute;height: 50px;width: 50px;background-color: #0B71E6;top:30px"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">'.start'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'div'</span>).animate(&#123;<span class="string">'left'</span> : <span class="string">'300px'</span>&#125;, <span class="number">1000</span>)</span><br><span class="line">                 .animate(&#123;<span class="string">'top'</span> : <span class="string">'300px'</span>&#125;, <span class="number">1000</span>)</span><br><span class="line">                 .animate(&#123; <span class="string">'width'</span> : <span class="string">'300px'</span>&#125;, <span class="number">1000</span>)</span><br><span class="line">                 .animate(&#123;<span class="string">'height'</span> : <span class="string">'300px'</span>&#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">".stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).stop(<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>延迟动画</strong><br>有时在执行动画或链式动画时，需要在运动之前有延迟执行，jQuery 为此提供了<code>.delay()</code>方法。参数为延迟时间，单位为毫秒数。这个方法可以在动画之前设置延迟，也可 、以在列队动画中间加上。直接在上面代码任意地方加都可以，比较简单，自行测试吧。</p>
<p><strong>获取正在进行的动画</strong><br>在选择器的那篇文章中中，我们提到过一个过滤器<code>:animated</code>，这个过滤器可以判断出当前运动的动画是哪个元素。通过这个特点，我们可以避免由于用户快速在某个元素执行动画时，由于动画积累而导致的动画和用户的行为不一致。</p>
<p>对上面代码进行一些改造,将原div进行复制，添加到其后，给原div添加一个id并且在动画效果中改为该元素运动<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.stop'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'div:animated'</span>).stop().css(<span class="string">'background'</span>, <span class="string">'red'</span>);</span><br><span class="line">        <span class="comment">//可以看到只有运动的div背景变色，而未移动的div不改变背景色。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>动画全局属性</strong><br>jQuery 提供了两种全局设置的属性，分别为：<code>$.fx.interval</code>，设置每秒运行的帧数；<code>$.fx.off</code>，关闭页面上所有的动画。</p>
<p><code>$.fx.interval</code> 属性可以调整动画每秒的运行帧数，默认为 13 毫秒。数字越小越流畅，但可能影响浏览器性能。<br>设置运行帧数为 1000 毫秒：<code>$.fx.interval = 1000;</code></p>
<p>设置动画为关闭 true：<code>$.fx.off = true;</code>默认为false</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="jQuery自带动画效果">jQuery自带动画效果</h2><h3 id="一-_显示、隐藏">一. 显示、隐藏</h3><p>jQuery中<code>.show()</code>为显示方法，<code>.hide()</code>为隐藏方法。<br>在无参数]]>
    </summary>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/tags/jQuery/"/>
    
      <category term="jQuery" scheme="http://guowenfh.github.io/categories/jQuery/"/>
    
  </entry>
  
</feed>
