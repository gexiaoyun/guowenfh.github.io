<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[三省吾身丶丶]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://guowenfh.github.io/"/>
  <updated>2015-12-01T06:53:45.186Z</updated>
  <id>http://guowenfh.github.io/</id>
  
  <author>
    <name><![CDATA[guowenfh]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JavaScript类型识别]]></title>
    <link href="http://guowenfh.github.io/2015/11/30/2015-12-01-javascript-type/"/>
    <id>http://guowenfh.github.io/2015/11/30/2015-12-01-javascript-type/</id>
    <published>2015-11-30T11:50:30.000Z</published>
    <updated>2015-12-01T06:53:45.186Z</updated>
    <content type="html"><![CDATA[<h2 id="类型系统">类型系统</h2><blockquote>
<p>javascript 类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。</p>
</blockquote>
<p><img src="/images/2015-11-30-javascript-type/javascript-variable-type.jpg" alt="JS数据类型">.</p>
<h3 id="类型转化表">类型转化表</h3><table>
<thead>
<tr>
<th>Value</th>
<th>Boolean</th>
<th>Number</th>
<th>String</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>false</td>
<td>NaN</td>
<td>“undefined”</td>
</tr>
<tr>
<td>null</td>
<td>false</td>
<td>0</td>
<td>“null”</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>1</td>
<td>“true”</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>0</td>
<td>“false”</td>
</tr>
<tr>
<td>“”</td>
<td>false</td>
<td>0</td>
<td>“”</td>
</tr>
<tr>
<td>‘123’</td>
<td>true</td>
<td>123</td>
<td>‘123’</td>
</tr>
<tr>
<td>‘1a’</td>
<td>true</td>
<td>NaN</td>
<td>‘1a’</td>
</tr>
<tr>
<td>0</td>
<td>false</td>
<td>0</td>
<td>“0”</td>
</tr>
<tr>
<td>1</td>
<td>true</td>
<td>1</td>
<td>“1”</td>
</tr>
<tr>
<td>Infinity</td>
<td>true</td>
<td>Infinity</td>
<td>“Infinity”</td>
</tr>
<tr>
<td>NaN</td>
<td>false</td>
<td>NaN</td>
<td>‘NaN’</td>
</tr>
<tr>
<td>{}</td>
<td>true</td>
<td>NaN</td>
<td>“[object Object]”</td>
</tr>
</tbody>
</table>
<h2 id="类型判断">类型判断</h2><ul>
<li><code>typeof</code></li>
<li><code>Object.prototype.toString</code></li>
<li><code>constructor</code></li>
<li><code>instanceof</code></li>
</ul>
<h3 id="typeof"><code>typeof</code></h3><ol>
<li>可以识别标准类型(<code>null</code>除外)</li>
<li>不可识别具体的对象类型(<code>Function</code>除外)</li>
</ol>
<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可以识别标准类型(`null`除外)</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="number">1</span>);<span class="comment">//"number"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="string">""</span>);<span class="comment">//"string"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">undefined</span>);<span class="comment">//"undefined"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>);<span class="comment">//"boolean"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>);<span class="comment">//"object"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不可识别具体的对象类型(`Function`除外)</span></span><br><span class="line"><span class="keyword">typeof</span>([]);<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span>(&#123;&#125;);<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">//"function"</span></span><br></pre></td></tr></table></figure>
<h3 id="instanceof"><code>instanceof</code></h3><ol>
<li>能够判别内置对象类型</li>
<li>不能判别原始类型</li>
<li>能够判别自定义类型</li>
</ol>
<p>例: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 能够判别内置对象类型</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;<span class="comment">//true</span></span><br><span class="line">/\d/ <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不能判别原始类型</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;<span class="comment">//false</span></span><br><span class="line"><span class="string">"xiaohong"</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>;<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 能够判别自定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">c <span class="keyword">instanceof</span> Point;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="Object-prototype-toString-call()方法"><code>Object.prototype.toString.call()</code>方法</h3><ol>
<li>可以识别标准类型,及内置对象类型</li>
<li>不能识别自定义类型</li>
</ol>
<p>例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可以识别标准类型,及内置对象类型</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">21</span>);<span class="comment">//"[object Number]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]);<span class="comment">//"[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/[A-Z]/</span>);<span class="comment">//"[object RegExp]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 不能识别自定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//c instanceof Point;//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(c);<span class="comment">//"[object Object]"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>为了方便使用,使用函数封装如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeProto</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>,-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typeProto(<span class="string">"guo"</span>);<span class="comment">//"String"</span></span><br><span class="line">typeProto(&#123;&#125;);<span class="comment">//"Object"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="constructor-NaN"><code>constructor</code></h3><blockquote>
<p><code>constructor</code>指向构造这个对象的构造函数本身..</p>
</blockquote>
<ol>
<li>可识别原始类型</li>
<li>可识别内置对象类型</li>
<li>可识别自定义类型</li>
</ol>
<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可识别原始类型</span></span><br><span class="line"><span class="string">"guo"</span>.constructor === <span class="built_in">String</span>;<span class="comment">//true</span></span><br><span class="line">(<span class="number">1</span>).constructor === <span class="built_in">Number</span>;<span class="comment">//true</span></span><br><span class="line"><span class="literal">true</span>.constructor === <span class="built_in">Boolean</span>;<span class="comment">//true</span></span><br><span class="line">(&#123;&#125;).constructor === <span class="built_in">Object</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 可识别内置对象类型</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().constructor === <span class="built_in">Date</span>;<span class="comment">//true</span></span><br><span class="line">[].constructor === <span class="built_in">Array</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 可识别自定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> People(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">c.constructor===People;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>为了方便使用,使用函数封装如下:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConstructorName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor.toString().match(<span class="regexp">/function\s*([^(]*)/</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getConstructorName(<span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">//"Date"</span></span><br><span class="line">getConstructorName(<span class="literal">null</span>);<span class="comment">//null</span></span><br><span class="line">getConstructorName(<span class="number">12</span>);<span class="comment">//"Number"</span></span><br></pre></td></tr></table></figure>
<h2 id="类型判断对比表">类型判断对比表</h2><ul>
<li>其中红色的单元格表示该判断方式不支持的类型。</li>
</ul>
<p><img src="/images/2015-11-30-javascript-type/javascript-type-judge.png" alt="类型判断对比表"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="类型系统">类型系统</h2><blockquote>
<p>javascript 类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。</p>
</blockquote>]]>
    </summary>
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Youth (青春)]]></title>
    <link href="http://guowenfh.github.io/2015/11/30/2015-11-30-Youth/"/>
    <id>http://guowenfh.github.io/2015/11/30/2015-11-30-Youth/</id>
    <published>2015-11-30T08:44:19.000Z</published>
    <updated>2015-12-01T06:48:21.470Z</updated>
    <content type="html"><![CDATA[<p>Youth -Samuel Ullman</p>
<blockquote>
<p>Samuel Ullman（塞缪尔.厄尔曼）</p>
</blockquote>
<p>Youth is not a time of life,it is a state of mind;<br>青春不是年华，而是心境；</p>
<p>it is not a matter of rosy cheeks, red lips and supple knees;<br>青春不是桃面、丹唇、柔膝，</p>
<p>it is a matter of the will, a quality of the imagination, a vigor of the emotions;<br>而是深沉的意志、宏伟的想象、炽热的感情；</p>
<p>it is the freshness of the deep springs of life.<br>青春是生命的深泉在涌流。</p>
<p>Youth means a tempera mental predominance of courage over timidity,<br>青春气贯长虹，勇锐盖过怯弱，</p>
<p>of the appetite for adventure over the love of ease.<br>进取压倒苟安，如此锐气，</p>
<p>This often exists in a man of 60 more than a boy of 20.<br>二十后生有之,六旬男子则更多见.</p>
<p>Nobody grows old merely by a number of years. We grow old by deserting our ideals.<br>年年有加，并非垂老；理想丢弃，方堕暮年。</p>
<p>Years may wrinkle the skin, but to give up enthusiasm wrinkles the soul.<br>岁月悠悠，衰微只及肌肤；热忱抛却，颓唐必至灵魂。</p>
<p>Worry, fear, self-distrust bows the heart and turns the spring back to dust.<br>烦忧、惶恐、丧失自信，定使心灵扭曲，意气如灰。</p>
<p>Whether 60 or 16, there is in every human being`s heart the lure of wonder,<br>无论年届花甲，抑或二八芳龄，心中皆有生命之欢乐，奇迹之诱惑，</p>
<p>the unfailing childlike appetite of what`s next and the joy of the game of living.<br>孩童般天真久盛不衰。</p>
<p>In the center of your heart and my heart there is a wireless station,<br>人人心中皆有一台天线，</p>
<p>so long as it receives messages of beauty, hope, cheer, courage and power from men and from the Infinite,<br>只要你从天上人间接受美好、希望、欢乐、勇气和力量的信号，</p>
<p>so long are you young.<br>你就青春永驻，风华常存。</p>
<p>When the aerials are down, and your spirit is covered with snows of cynicism and the ice of pessimism,<br>一旦天线倒塌，锐气被冰雪覆盖，玩世不恭、自暴自弃油然而生，</p>
<p>then you are grown old, even at 20,<br>即使年芳二十,实已垂老矣;</p>
<p>but as long as your aerials are up,to catch waves of optimism, there is hope you may die young at 80.<br>然则只要竖起天线，捕捉乐观的信号，你就有望在八十岁高龄告别尘寰时仍觉得年轻。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Youth -Samuel Ullman</p>
<blockquote>
<p>Samuel Ullman（塞缪尔.厄尔曼）</p>
</blockquote>
<p>Youth is not a time of life,it is a state of mind;<b]]>
    </summary>
    
      <category term="摘录" scheme="http://guowenfh.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="生活" scheme="http://guowenfh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
